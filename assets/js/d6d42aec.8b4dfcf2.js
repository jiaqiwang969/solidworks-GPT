"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[71822],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>D});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),p=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,m=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,D=u["".concat(m,".").concat(d)]||u[d]||l[d]||s;return n?r.createElement(D,a(a({ref:t},c),{},{components:n})):r.createElement(D,a({ref:t},c))}));function D(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8522:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const s={title:"Write custom properties to all sources using Document Manager API",caption:"Write All Properties",description:"VBA macro to write custom properties to all sources (file, configuration, cut-list items) using Document Manager API",image:"added-custom-property.png",labels:["write properties"]},a=void 0,i={unversionedId:"codestack/solidworks-document-manager-api/document/data-storage/custom-properties/write-all-properties/index",id:"codestack/solidworks-document-manager-api/document/data-storage/custom-properties/write-all-properties/index",title:"Write custom properties to all sources using Document Manager API",description:"VBA macro to write custom properties to all sources (file, configuration, cut-list items) using Document Manager API",source:"@site/docs/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/write-all-properties/index.md",sourceDirName:"codestack/solidworks-document-manager-api/document/data-storage/custom-properties/write-all-properties",slug:"/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/write-all-properties/",permalink:"/solidworks-GPT/docs/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/write-all-properties/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/write-all-properties/index.md",tags:[],version:"current",frontMatter:{title:"Write custom properties to all sources using Document Manager API",caption:"Write All Properties",description:"VBA macro to write custom properties to all sources (file, configuration, cut-list items) using Document Manager API",image:"added-custom-property.png",labels:["write properties"]},sidebar:"tutorialSidebar",previous:{title:"Read All Custom Properties using SOLIDWORKS Document Manager API",permalink:"/solidworks-GPT/docs/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/"},next:{title:"Saving the data into 3rd party storage using SOLIDWORKS Document Manager API",permalink:"/solidworks-GPT/docs/codestack/solidworks-document-manager-api/document/data-storage/third-party/"}},m={},p=[],c={toc:p},u="wrapper";function l(e){let{components:t,...s}=e;return(0,o.kt)(u,(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Custom property added to the file",src:n(29326).Z,width:"1006",height:"687"}),"{ width=450 }"),(0,o.kt)("p",null,"This VBA example demonstrates how to add the ",(0,o.kt)("em",{parentName:"p"},"ApprovedBy")," property with the value of the name of current user to all sources using Document Manager API. Property will be added (or updated) for the file (general), all configurations and all cut-list items."),(0,o.kt)("p",null,"Specify the full path of the file in the ",(0,o.kt)("em",{parentName:"p"},"FILE_PATH")," constant."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Const SW_DM_KEY As String = "Your License Key"\n\nConst FILE_PATH As String = "C:\\SampleModel.SLDPRT"\nConst PRP_NAME As String = "ApprovedBy"\n\nDim swDmClassFactory As SwDocumentMgr.swDmClassFactory\nDim swDmApp As SwDocumentMgr.SwDMApplication\n\nSub main()\n\n    Set swDmClassFactory = CreateObject("SwDocumentMgr.SwDMClassFactory")\n    \n    If Not swDmClassFactory Is Nothing Then\n        \n        Set swDmApp = swDmClassFactory.GetApplication(SW_DM_KEY)\n        Dim swDmDoc As SwDocumentMgr.SwDMDocument19\n        Set swDmDoc = OpenDocument(FILE_PATH, False)\n        \n        Dim curUser As String\n        curUser = Environ("UserName")\n        \n        SetGeneralProperty swDmDoc, PRP_NAME, curUser, SwDmCustomInfoType.swDmCustomInfoText\n        SetConfigurationSpecificProperty swDmDoc, PRP_NAME, curUser, SwDmCustomInfoType.swDmCustomInfoText\n        SetCutListProperty swDmDoc, PRP_NAME, curUser, SwDmCustomInfoType.swDmCustomInfoText\n        \n        swDmDoc.Save\n        swDmDoc.CloseDoc\n        \n    Else\n        MsgBox "Document Manager SDK is not installed"\n    End If\n    \nEnd Sub\n\nSub SetGeneralProperty(dmDoc As SwDocumentMgr.SwDMDocument19, prpName As String, prpVal As String, prpType As SwDmCustomInfoType)\n    dmDoc.AddCustomProperty prpName, prpType, prpVal\n    dmDoc.SetCustomProperty prpName, prpVal\nEnd Sub\n\nSub SetConfigurationSpecificProperty(dmDoc As SwDocumentMgr.SwDMDocument19, prpName As String, prpVal As String, prpType As SwDmCustomInfoType)\n    \n    Dim vConfNames As Variant\n    vConfNames = dmDoc.ConfigurationManager.GetConfigurationNames()\n    \n    Dim i As Integer\n        \n    For i = 0 To UBound(vConfNames)\n        \n        Dim confName As String\n        confName = vConfNames(i)\n        \n        Dim swDmConf As SwDocumentMgr.SwDMConfiguration13\n        Set swDmConf = dmDoc.ConfigurationManager.GetConfigurationByName(confName)\n        \n        swDmConf.AddCustomProperty prpName, prpType, prpVal\n        swDmConf.SetCustomProperty prpName, prpVal\n        \n    Next\n    \nEnd Sub\n\nSub SetCutListProperty(dmDoc As SwDocumentMgr.SwDMDocument19, prpName As String, prpVal As String, prpType As SwDmCustomInfoType)\n    \n    Dim vConfNames As Variant\n    vConfNames = dmDoc.ConfigurationManager.GetConfigurationNames()\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(vConfNames)\n        \n        Dim confName As String\n        confName = vConfNames(i)\n        \n        Dim swDmConf As SwDocumentMgr.SwDMConfiguration16\n        Set swDmConf = dmDoc.ConfigurationManager.GetConfigurationByName(confName)\n        \n        Dim vCutListItems As Variant\n        vCutListItems = swDmConf.GetCutListItems\n                \n        If Not IsEmpty(vCutListItems) Then\n            \n            Dim j As Integer\n            \n            For j = 0 To UBound(vCutListItems)\n                \n                Dim swDmCutList As SwDocumentMgr.SwDMCutListItem3\n                Set swDmCutList = vCutListItems(j)\n                \n                swDmCutList.AddCustomProperty prpName, prpType, prpVal\n                swDmCutList.SetCustomProperty prpName, prpVal\n                \n            Next\n        \n        End If\n        \n    Next\n    \nEnd Sub\n\nFunction OpenDocument(filePath As String, readOnly As Boolean) As SwDocumentMgr.SwDMDocument19\n    \n    Dim openErr As SwDmDocumentOpenError\n    \n    Dim docType As SwDocumentMgr.SwDmDocumentType\n    \n    Dim ext As String\n    ext = LCase(Right(filePath, Len(".SLDXXX")))\n    \n    Select Case ext\n        Case ".sldprt"\n            docType = swDmDocumentPart\n        Case ".sldasm"\n            docType = swDmDocumentAssembly\n        Case ".slddrw"\n            docType = swDmDocumentDrawing\n    End Select\n    \n    Dim swDmDoc As SwDocumentMgr.SwDMDocument19\n    \n    Set swDmDoc = swDmApp.GetDocument(filePath, docType, readOnly, openErr)\n    \n    If swDmDoc Is Nothing Then\n        Err.Raise vbError, "", "Failed to open document: " & openErr\n    End If\n    \n    Set OpenDocument = swDmDoc\n    \nEnd Function\n')))}l.isMDXComponent=!0},29326:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/added-custom-property-612161da20c0d34ddff3982a9f16495a.png"}}]);