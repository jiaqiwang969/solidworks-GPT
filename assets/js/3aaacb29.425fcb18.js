"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[75790],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=a.createContext({}),l=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=l(r),u=o,m=p["".concat(i,".").concat(u)]||p[u]||g[u]||n;return r?a.createElement(m,s(s({ref:t},c),{},{components:r})):a.createElement(m,s({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,s=new Array(n);s[0]=u;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[p]="string"==typeof e?e:o,s[1]=d;for(var l=2;l<n;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},98593:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>g,frontMatter:()=>n,metadata:()=>d,toc:()=>l});var a=r(87462),o=(r(67294),r(3905));const n={title:"Storing data in the 3rd party storage store via SwEx.AddIn framework",caption:"Storage",description:"Serializing custom structures into the 3rd party storage store using SwEx.AddIn framework","toc-group-name":"labs-solidworks-swex",order:2},s=void 0,d={unversionedId:"codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/index",id:"codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/index",title:"Storing data in the 3rd party storage store via SwEx.AddIn framework",description:"Serializing custom structures into the 3rd party storage store using SwEx.AddIn framework",source:"@site/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/index.md",sourceDirName:"codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage",slug:"/codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/",permalink:"/solidworks-GPT/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/index.md",tags:[],version:"current",frontMatter:{title:"Storing data in the 3rd party storage store via SwEx.AddIn framework",caption:"Storage",description:"Serializing custom structures into the 3rd party storage store using SwEx.AddIn framework","toc-group-name":"labs-solidworks-swex",order:2},sidebar:"tutorialSidebar",previous:{title:"Storing 3rd party data in SOLIDWORKS models using SwEx.AddIn framework",permalink:"/solidworks-GPT/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/"},next:{title:"Storing data in the 3rd party storage (stream) via SwEx.AddIn framework",permalink:"/solidworks-GPT/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/stream/"}},i={},l=[{value:"Storage Access Handler",id:"storage-access-handler",level:2},{value:"Reading data",id:"reading-data",level:2},{value:"Writing data",id:"writing-data",level:2}],c={toc:l},p="wrapper";function g(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Call ",(0,o.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/M_SolidWorks_Interop_sldworks_ModelDocExtension_Access3rdPartyStorageStore.htm"},"IModelDoc2::Access3rdPartyStorageStore ")," extension method to access the 3rd storage store. Pass the boolean parameter to read or write storage."),(0,o.kt)("p",null,"Use this approach when it is required to store multiple data structures which need to be accessed and managed independently. Prefer this instead of creating multiple ",(0,o.kt)("a",{parentName:"p",href:"/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/stream/"},"streams")),(0,o.kt)("h2",{id:"storage-access-handler"},"Storage Access Handler"),(0,o.kt)("p",null,"To simplify the handling of the storage lifecycle, use the Documents Manager API from the SwEx.AddIn framework:"),(0,o.kt)("p",null,"{% code-snippet { file-name: ThirdPartyData.StorageHandler.* } %}"),(0,o.kt)("h2",{id:"reading-data"},"Reading data"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/P_CodeStack_SwEx_AddIn_Base_IThirdPartyStoreHandler_Storage.htm"},"IThirdPartyStoreHandler::Storage")," property returns null for the storage which not exists on reading."),(0,o.kt)("p",null,"{% code-snippet { file-name: ThirdPartyData.Storage.StorageLoad.* } %}"),(0,o.kt)("h2",{id:"writing-data"},"Writing data"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/P_CodeStack_SwEx_AddIn_Base_IThirdPartyStoreHandler_Storage.htm"},"IThirdPartyStoreHandler::Storage")," will always return the pointer to the storage (stream is automatically created if it doesn't exist)."),(0,o.kt)("p",null,"{% code-snippet { file-name: ThirdPartyData.Storage.StorageSave.* } %}"),(0,o.kt)("p",null,"Explore the methods of ",(0,o.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/T_CodeStack_SwEx_AddIn_Base_IComStorage.htm"},"IComStorage")," for information of how to create sub streams or sub storages and enumerate the existing elements."))}g.isMDXComponent=!0}}]);