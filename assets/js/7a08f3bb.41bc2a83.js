"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[43145],{3905:(e,n,t)=>{t.d(n,{Zo:()=>f,kt:()=>d});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=i.createContext({}),c=function(e){var n=i.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},f=function(e){var n=c(e.components);return i.createElement(a.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,f=s(e,["components","mdxType","originalType","parentName"]),p=c(t),g=r,d=p["".concat(a,".").concat(g)]||p[g]||u[g]||o;return t?i.createElement(d,l(l({ref:n},f),{},{components:t})):i.createElement(d,l({ref:n},f))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=g;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},39585:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(87462),r=(t(67294),t(3905));const o={title:"Show file browse for save or open in Visual Basic 6 (VBA)",caption:"Browse File For Save Or Open",description:"Displaying file browse dialog to select the save file path or open file path in Visual Basic 6 (VBA)",labels:["files","browse","save"]},l=void 0,s={unversionedId:"codestack-clone/visual-basic/algorithms/fso/browse-file/index",id:"codestack-clone/visual-basic/algorithms/fso/browse-file/index",title:"Show file browse for save or open in Visual Basic 6 (VBA)",description:"Displaying file browse dialog to select the save file path or open file path in Visual Basic 6 (VBA)",source:"@site/docs/codestack-clone/visual-basic/algorithms/fso/browse-file/index.md",sourceDirName:"codestack-clone/visual-basic/algorithms/fso/browse-file",slug:"/codestack-clone/visual-basic/algorithms/fso/browse-file/",permalink:"/solidworks-GPT/docs/codestack-clone/visual-basic/algorithms/fso/browse-file/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/visual-basic/algorithms/fso/browse-file/index.md",tags:[],version:"current",frontMatter:{title:"Show file browse for save or open in Visual Basic 6 (VBA)",caption:"Browse File For Save Or Open",description:"Displaying file browse dialog to select the save file path or open file path in Visual Basic 6 (VBA)",labels:["files","browse","save"]},sidebar:"tutorialSidebar",previous:{title:"Code snippets for File System Object (FSO) in Visual Basic (VBA)",permalink:"/solidworks-GPT/docs/codestack-clone/visual-basic/algorithms/fso/"},next:{title:"Browse for folder in VBA macro",permalink:"/solidworks-GPT/docs/codestack-clone/visual-basic/algorithms/fso/browse-folder/"}},a={},c=[],f={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,i.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Excel VBA macro provides a helper function to browse the name of the file to save ",(0,r.kt)("strong",{parentName:"p"},"Application.GetSaveAsFilename")," or open ",(0,r.kt)("strong",{parentName:"p"},"Application.GetOpenAsFilename"),". These functions however only available in Excel VBA macros and is not available in other environments."),(0,r.kt)("p",null,"This example demonstrates how create a generic functions to browse for save or open file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Private Declare PtrSafe Function GetSaveFileName Lib "comdlg32.dll" Alias "GetSaveFileNameA" (pOpenfilename As OPENFILENAME) As Boolean\nPrivate Declare PtrSafe Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (pOpenfilename As OPENFILENAME) As Boolean\n\nPrivate Type OPENFILENAME\n  lStructSize As Long\n  hwndOwner As LongPtr\n  hInstance As LongPtr\n  lpstrFilter As String\n  lpstrCustomFilter As String\n  nMaxCustFilter As Long\n  nFilterIndex As Long\n  lpstrFile As String\n  nMaxFile As Long\n  lpstrFileTitle As String\n  nMaxFileTitle As Long\n  lpstrInitialDir As String\n  lpstrTitle As String\n  Flags As LongPtr\n  nFileOffset As Integer\n  nFileExtension As Integer\n  lpstrDefExt As String\n  lCustData As Long\n  lpfnHook As Long\n  lpTemplateName As String\nEnd Type\n\nConst FILTER As String = "Text Files (*.txt)|*.txt|PNG Image Files (*.png)|*.png|All Files (*.*)|*.*"\n\nSub main()\n\n    Dim filePath As String\n    filePath = BrowseForFileSave("Select file path to save", FILTER)\n    \n    If filePath <> "" Then\n        Debug.Print "Selected save file path: " & filePath\n    Else\n        Debug.Print "No save file selected"\n    End If\n    \n    filePath = BrowseForFileOpen("Select file path to open", FILTER)\n    \n    If filePath <> "" Then\n        Debug.Print "Selected open file path: " & filePath\n    Else\n        Debug.Print "No open file selected"\n    End If\n\nEnd Sub\n\nFunction BrowseForFileSave(title As String, filters As String) As String\n    BrowseForFileSave = BrowseForFile(title, filters, True)\nEnd Function\n\nFunction BrowseForFileOpen(title As String, filters As String) As String\n    BrowseForFileOpen = BrowseForFile(title, filters, False)\nEnd Function\n\nFunction BrowseForFile(title As String, filters As String, save As Boolean) As String\n    \n    Dim ofn As OPENFILENAME\n    Const FILE_PATH_BUFFER_SIZE As Integer = 260\n    \n    ofn.lpstrFilter = Replace(filters, "|", Chr(0)) & Chr(0)\n    ofn.lpstrTitle = title\n    ofn.nMaxFile = FILE_PATH_BUFFER_SIZE\n    ofn.nMaxFileTitle = FILE_PATH_BUFFER_SIZE\n    ofn.lpstrFile = String(FILE_PATH_BUFFER_SIZE, Chr(0))\n    ofn.lStructSize = LenB(ofn)\n    \n    Dim res As Boolean\n    \n    If save Then\n        res = GetSaveFileName(ofn)\n    Else\n        res = GetOpenFileName(ofn)\n    End If\n    \n    If res Then\n        \n        Dim filePath As String\n        filePath = Left(ofn.lpstrFile, InStr(ofn.lpstrFile, vbNullChar) - 1)\n        \n        If save Then\n            Dim vFilters As Variant\n            vFilters = Split(FILTER, "|")\n            Dim ext As String\n            ext = vFilters((ofn.nFilterIndex - 1) * 2 + 1)\n            ext = Right(ext, Len(ext) - InStrRev(ext, ".") + 1)\n            \n            If LCase(Right(filePath, Len(ext))) <> LCase(ext) Then\n                filePath = filePath & ext\n            End If\n        End If\n        \n        BrowseForFile = filePath\n        \n    Else\n        BrowseForFile = ""\n    End If\n    \nEnd Function\n')))}u.isMDXComponent=!0}}]);