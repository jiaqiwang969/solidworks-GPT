"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[96445],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var i=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var r=i.createContext({}),a=function(e){var n=i.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=a(e.components);return i.createElement(r.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,r=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=a(t),p=l,h=u["".concat(r,".").concat(p)]||u[p]||m[p]||o;return t?i.createElement(h,s(s({ref:n},d),{},{components:t})):i.createElement(h,s({ref:n},d))}));function h(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,s=new Array(o);s[0]=p;var c={};for(var r in n)hasOwnProperty.call(n,r)&&(c[r]=n[r]);c.originalType=e,c[u]="string"==typeof e?e:l,s[1]=c;for(var a=2;a<o;a++)s[a]=t[a];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},95256:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var i=t(87462),l=(t(67294),t(3905));const o={title:"Check-in all checked-out files in SOLIDWORKS PDM vault",caption:"Check-In All Checked-Out Files",description:"Command line utility to check-in all checked-out files in SOLIDWORKS PDM vault",image:"console-output.png",labels:["check-in","check-out","pdm"]},s=void 0,c={unversionedId:"codestack-clone/solidworks-pdm-api/files/check-in-all-files/index",id:"codestack-clone/solidworks-pdm-api/files/check-in-all-files/index",title:"Check-in all checked-out files in SOLIDWORKS PDM vault",description:"Command line utility to check-in all checked-out files in SOLIDWORKS PDM vault",source:"@site/docs/codestack-clone/solidworks-pdm-api/files/check-in-all-files/index.md",sourceDirName:"codestack-clone/solidworks-pdm-api/files/check-in-all-files",slug:"/codestack-clone/solidworks-pdm-api/files/check-in-all-files/",permalink:"/solidworks-GPT/docs/codestack-clone/solidworks-pdm-api/files/check-in-all-files/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/solidworks-pdm-api/files/check-in-all-files/index.md",tags:[],version:"current",frontMatter:{title:"Check-in all checked-out files in SOLIDWORKS PDM vault",caption:"Check-In All Checked-Out Files",description:"Command line utility to check-in all checked-out files in SOLIDWORKS PDM vault",image:"console-output.png",labels:["check-in","check-out","pdm"]},sidebar:"tutorialSidebar",previous:{title:"Working with files in the vault using SOLIDWORKS PDM API",permalink:"/solidworks-GPT/docs/codestack-clone/solidworks-pdm-api/files/"},next:{title:"Check-out active SOLIDWORKS model using SOLIDWORKS and PDM API",permalink:"/solidworks-GPT/docs/codestack-clone/solidworks-pdm-api/files/check-out-active-model/"}},r={},a=[],d={toc:a},u="wrapper";function m(e){let{components:n,...o}=e;return(0,l.kt)(u,(0,i.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This VB.NET command line utility searches for all checked-out files in the specified SOLIDWORKS PDM Professional vault and checks them in."),(0,l.kt)("p",null,"Utility can be called from the command line and can be a part of the automation process (such as Windows Task Scheduler)."),(0,l.kt)("p",null,"Utility expects 3 arguments to be specified:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Vault Name"),(0,l.kt)("li",{parentName:"ul"},"User Name"),(0,l.kt)("li",{parentName:"ul"},"User Password")),(0,l.kt)("p",null,"The list of files, ids and the locked by user information is displayed in the command line. Once script finishes execution, all files are checked-in. Any errors occurred during the execution are printed into the console window."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Output of command line",src:t(12383).Z,width:"843",height:"549"}),"{ width=450 }"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-vb"},'Imports EPDM.Interop.epdm\n\nModule Module1\n\n    Sub Main()\n        Try\n            Dim vault As New EdmVault5\n\n            Dim args As String() = Environment.GetCommandLineArgs()\n\n            Dim vaultName As String = args(1)\n            Dim login As String = args(2)\n            Dim password As String = args(3)\n\n            vault.Login(login, password, vaultName)\n\n            If vault.IsLoggedIn Then\n                CheckInAllCheckedOutFiles(vault)\n            Else\n                Throw New Exception("Failed to login to vault")\n            End If\n        Catch ex As Exception\n            Console.WriteLine(ex.Message)\n        End Try\n    End Sub\n\n    Sub CheckInAllCheckedOutFiles(vault As EdmVault5)\n\n        Dim checkOutFiles = GetCheckedOutFilesList(vault)\n\n        If checkOutFiles.Any() Then\n\n            Console.WriteLine(String.Format("Checking in {0} files", checkOutFiles.Length))\n\n            Dim selItems(checkOutFiles.Length - 1) As EdmSelItem\n\n            For i As Integer = 0 To checkOutFiles.Length - 1\n                selItems(i) = New EdmSelItem()\n                selItems(i).mlDocID = checkOutFiles(i)\n            Next\n\n            Dim batchUnlockUtil As IEdmBatchUnlock2 = vault.CreateUtility(EdmUtility.EdmUtil_BatchUnlock)\n\n            batchUnlockUtil.AddSelection(vault, selItems)\n\n            batchUnlockUtil.CreateTree(IntPtr.Zero, EdmUnlockBuildTreeFlags.Eubtf_MayUnlock + EdmUnlockBuildTreeFlags.Eubtf_MayUndoLock + EdmUnlockBuildTreeFlags.Eubtf_UndoLockDefault + EdmUnlockBuildTreeFlags.Eubtf_RefreshFileListing)\n\n            batchUnlockUtil.GetFileList(EdmUnlockFileListFlag.Euflf_GetUnlocked + EdmUnlockFileListFlag.Euflf_GetUndoLocked + EdmUnlockFileListFlag.Euflf_GetUnprocessed)\n\n            batchUnlockUtil.UnlockFiles(IntPtr.Zero, Nothing)\n        Else\n            Console.WriteLine("There are not files to check-in")\n        End If\n\n    End Sub\n\n    Function GetCheckedOutFilesList(vault As EdmVault5) As Integer()\n\n        Dim fileIds As New List(Of Integer)\n        Dim search As IEdmSearch6\n\n        search = vault.CreateSearch()\n\n        search.FindFiles = True\n        search.FindFolders = False\n        search.Recursive = True\n        search.FindLockedFiles = True\n        search.FindUnlockedFiles = False\n\n        Dim searchRes As IEdmSearchResult5 = search.GetFirstResult\n\n        While Not searchRes Is Nothing\n            Console.WriteLine(String.Format("{0} [{1}] - {2}", searchRes.Path, searchRes.ID, searchRes.LockedByUserName))\n            fileIds.Add(searchRes.ID)\n            searchRes = search.GetNextResult()\n        End While\n\n        Return fileIds.ToArray()\n\n    End Function\n\nEnd Module\n')))}m.isMDXComponent=!0},12383:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/console-output-3ee8984d7ade84a8a4f95696cb9f0b92.png"}}]);