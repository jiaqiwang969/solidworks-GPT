"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[53329],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>p});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",w={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},M=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=m(a),M=s,p=d["".concat(l,".").concat(M)]||d[M]||w[M]||r;return a?n.createElement(p,i(i({ref:t},c),{},{components:a})):n.createElement(p,i({ref:t},c))}));function p(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,i=new Array(r);i[0]=M;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:s,i[1]=o;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}M.displayName="MDXCreateElement"},76670:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>w,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var n=a(87462),s=(a(67294),a(3905));const r={caption:"Flip Alignment Of Last Mate",title:"Macro to flip alignment of the last inserted mate in SOLIDWORKS assembly",description:"VBA macro which flips alignment (anti-aligned to aligned and vice-versa) for the last mate in the SOLIDWORKS assembly feature manager tree"},i=void 0,o={unversionedId:"codestack-clone/solidworks-api/document/assembly/mates/flip-last/index",id:"codestack-clone/solidworks-api/document/assembly/mates/flip-last/index",title:"Macro to flip alignment of the last inserted mate in SOLIDWORKS assembly",description:"VBA macro which flips alignment (anti-aligned to aligned and vice-versa) for the last mate in the SOLIDWORKS assembly feature manager tree",source:"@site/docs/codestack-clone/solidworks-api/document/assembly/mates/flip-last/index.md",sourceDirName:"codestack-clone/solidworks-api/document/assembly/mates/flip-last",slug:"/codestack-clone/solidworks-api/document/assembly/mates/flip-last/",permalink:"/solidworks-GPT/docs/codestack-clone/solidworks-api/document/assembly/mates/flip-last/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/solidworks-api/document/assembly/mates/flip-last/index.md",tags:[],version:"current",frontMatter:{caption:"Flip Alignment Of Last Mate",title:"Macro to flip alignment of the last inserted mate in SOLIDWORKS assembly",description:"VBA macro which flips alignment (anti-aligned to aligned and vice-versa) for the last mate in the SOLIDWORKS assembly feature manager tree"},sidebar:"tutorialSidebar",previous:{title:"Add mate between coordinate systems using SOLIDWORKS API",permalink:"/solidworks-GPT/docs/codestack-clone/solidworks-api/document/assembly/mates/add-mate-between-coordinate-systems/"},next:{title:"Run force mate command using SOLIDWORKS and Windows API",permalink:"/solidworks-GPT/docs/codestack-clone/solidworks-api/document/assembly/mates/force-mate/"}},l={},m=[],c={toc:m},d="wrapper";function w(e){let{components:t,...a}=e;return(0,s.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This VBA macro finds the last mate in the feature manager tree of the active SOLIDWORKS assembly."),(0,s.kt)("p",null,"For this mate the alignment is switched from anti-aligned to aligned and vice-versa."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swAssy As SldWorks.AssemblyDoc\n    \n    Set swAssy = swApp.ActiveDoc\n    \n    Dim swLastMate As SldWorks.Mate2\n    \n    Set swLastMate = GetLastMate(swAssy)\n    \n    Dim curAlignment As swMateAlign_e\n    curAlignment = swLastMate.Alignment\n    \n    Dim destAlignment As swMateAlign_e\n    \n    If curAlignment = swMateAlignALIGNED Then\n        destAlignment = swMateAlignANTI_ALIGNED\n    ElseIf curAlignment = swMateAlignANTI_ALIGNED Then\n        destAlignment = swMateAlignALIGNED\n    Else\n        Exit Sub\n    End If\n    \n    Dim swMateFeat As SldWorks.Feature\n    Set swMateFeat = swLastMate\n    \n    Dim swMateFeatData As SldWorks.MateFeatureData\n    \n    Set swMateFeatData = swMateFeat.GetDefinition\n    \n    Select Case swMateFeatData.TypeName\n        Case swMateType_e.swMateANGLE\n            Dim swAngleMateFeatData As SldWorks.AngleMateFeatureData\n            Set swAngleMateFeatData = swMateFeatData\n            swAngleMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateCAMFOLLOWER\n            Dim swCamFollowerMateFeatData As SldWorks.CamFollowerMateFeatureData\n            Set swCamFollowerMateFeatData = swMateFeatData\n            swCamFollowerMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateCOINCIDENT\n            Dim swCoincidentMateFeatData As SldWorks.CoincidentMateFeatureData\n            Set swCoincidentMateFeatData = swMateFeatData\n            swCoincidentMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateCONCENTRIC\n            Dim swConcentricMateFeatData As SldWorks.ConcentricMateFeatureData\n            Set swConcentricMateFeatData = swMateFeatData\n            swConcentricMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateDISTANCE\n            Dim swDistanceMateFeatData As SldWorks.DistanceMateFeatureData\n            Set swDistanceMateFeatData = swMateFeatData\n            swDistanceMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateHINGE\n            Dim swHingeMateFeatData As SldWorks.HingeMateFeatureData\n            Set swHingeMateFeatData = swMateFeatData\n            swHingeMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMatePARALLEL\n            Dim swParallelMateFeatData As SldWorks.ParallelMateFeatureData\n            Set swParallelMateFeatData = swMateFeatData\n            swParallelMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMatePROFILECENTER\n            Dim swProfileCenterMateFeatData As SldWorks.ProfileCenterMateFeatureData\n            Set swProfileCenterMateFeatData = swMateFeatData\n            swProfileCenterMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateSCREW\n            Dim swScrewMateFeatData As SldWorks.ScrewMateFeatureData\n            Set swScrewMateFeatData = swMateFeatData\n            swScrewMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateSLOT\n            Dim swSlotMateFeatData As SldWorks.SlotMateFeatureData\n            Set swSlotMateFeatData = swMateFeatData\n            swSlotMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateSYMMETRIC\n            Dim swSymmetricMateFeatData As SldWorks.SymmetricMateFeatureData\n            Set swSymmetricMateFeatData = swMateFeatData\n            swSymmetricMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateTANGENT\n            Dim swTangentMateFeatData As SldWorks.TangentMateFeatureData\n            Set swTangentMateFeatData = swMateFeatData\n            swTangentMateFeatData.MateAlignment = destAlignment\n        Case Else\n            Err.Raise vbError, "", "Not supported mate type"\n    End Select\n        \n    swMateFeat.ModifyDefinition swMateFeatData, swAssy, Nothing\n    \nEnd Sub\n\nFunction GetLastMate(assm As SldWorks.AssemblyDoc) As SldWorks.Mate2\n    \n    Dim swMates() As SldWorks.Feature\n    Dim isInit As Boolean\n    isInit = False\n    \n    Dim swModel As SldWorks.ModelDoc2\n    Set swModel = assm\n    \n    Dim swMateGroupFeat As SldWorks.Feature\n    \n    Dim featIndex As Integer\n    featIndex = 0\n        \n    Do\n        Set swMateGroupFeat = swModel.FeatureByPositionReverse(featIndex)\n        \n        featIndex = featIndex + 1\n    Loop While swMateGroupFeat.GetTypeName2() <> "MateGroup"\n    \n    Dim swLastMateFeat As SldWorks.Feature\n    \n    Dim swMateFeat As SldWorks.Feature\n    \n    Set swMateFeat = swMateGroupFeat.GetFirstSubFeature\n    \n    While Not swMateFeat Is Nothing\n        \n        If TypeOf swMateFeat.GetSpecificFeature2() Is SldWorks.Mate2 Then\n            Set swLastMateFeat = swMateFeat\n        End If\n        \n        Set swMateFeat = swMateFeat.GetNextSubFeature\n    Wend\n    \n    Debug.Print swLastMateFeat.Name\n    \n    Set GetLastMate = swLastMateFeat.GetSpecificFeature2\n    \nEnd Function\n')))}w.isMDXComponent=!0}}]);