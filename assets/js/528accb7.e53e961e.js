"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[18247],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||i;return n?o.createElement(f,a(a({ref:t},l),{},{components:n})):o.createElement(f,a({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},25058:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const i={title:"Inter-Process communication between SOLIDWORKS applications",caption:"Inter-Process Communication",description:"Ways for Inter-Process communication between SOLIDWORKS applications (macros, add-ins, stand-alone application)",labels:["communication","parameters"]},a=void 0,s={unversionedId:"codestack/solidworks-api/getting-started/inter-process-communication/index",id:"codestack/solidworks-api/getting-started/inter-process-communication/index",title:"Inter-Process communication between SOLIDWORKS applications",description:"Ways for Inter-Process communication between SOLIDWORKS applications (macros, add-ins, stand-alone application)",source:"@site/docs/codestack/solidworks-api/getting-started/inter-process-communication/index.md",sourceDirName:"codestack/solidworks-api/getting-started/inter-process-communication",slug:"/codestack/solidworks-api/getting-started/inter-process-communication/",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/getting-started/inter-process-communication/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/getting-started/inter-process-communication/index.md",tags:[],version:"current",frontMatter:{title:"Inter-Process communication between SOLIDWORKS applications",caption:"Inter-Process Communication",description:"Ways for Inter-Process communication between SOLIDWORKS applications (macros, add-ins, stand-alone application)",labels:["communication","parameters"]},sidebar:"tutorialSidebar",previous:{title:"Naming for methods and properties in SOLIDWORKS API",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/getting-started/api-object-model/naming-convention/"},next:{title:"Invoke function of SOLIDWORKS add-in from stand-alone application or macro",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/getting-started/inter-process-communication/invoke-add-in-functions/"}},c={},p=[],l={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This section describes ways to perform inter-process communication between applications developed for SOLIDWORKS. Communication involves passing of custom parameters or signals between different modules (i.e. macros, add-ins and stand-alone applications)."),(0,r.kt)("p",null,"This could allows to introduce additional level of automation for the applications developed for SOLIDWORKS. As an example the following techniques can be used for the inter-process communication: COM, named pipes, Windows Communication Foundation (WCF), shared memory, buffer, file exchange etc."),(0,r.kt)("p",null,"Explore this section for detailed guides and examples for establishing the communication between software developed for SOLIDWORKS."))}m.isMDXComponent=!0}}]);