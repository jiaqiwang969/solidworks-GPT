"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[4104],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var o=t(67294);function d(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){d(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,d=function(e,n){if(null==e)return{};var t,o,d={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(d[t]=e[t]);return d}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(d[t]=e[t])}return d}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,d=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(t),p=d,g=m["".concat(l,".").concat(p)]||m[p]||u[p]||a;return t?o.createElement(g,r(r({ref:n},c),{},{components:t})):o.createElement(g,r({ref:n},c))}));function g(e,n){var t=arguments,d=n&&n.mdxType;if("string"==typeof e||d){var a=t.length,r=new Array(a);r[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:d,r[1]=i;for(var s=2;s<a;s++)r[s]=t[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},98642:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=t(87462),d=(t(67294),t(3905));const a={title:"Handling the common events of SOLIDWORKS file using SwEx.AddIn framework",caption:"Common Events",description:"Handling of common events (rebuild, selection, configuration change, item modification, custom property modification etc.) using documents management functionality in SwEx.AddIn Framework","toc-group-name":"labs-solidworks-swex",labels:["events","rebuild","selection"]},r=void 0,i={unversionedId:"codestack-clone/labs/solidworks/swex/add-in/documents-management/events/index",id:"codestack-clone/labs/solidworks/swex/add-in/documents-management/events/index",title:"Handling the common events of SOLIDWORKS file using SwEx.AddIn framework",description:"Handling of common events (rebuild, selection, configuration change, item modification, custom property modification etc.) using documents management functionality in SwEx.AddIn Framework",source:"@site/docs/codestack-clone/labs/solidworks/swex/add-in/documents-management/events/index.md",sourceDirName:"codestack-clone/labs/solidworks/swex/add-in/documents-management/events",slug:"/codestack-clone/labs/solidworks/swex/add-in/documents-management/events/",permalink:"/solidworks-GPT/docs/codestack-clone/labs/solidworks/swex/add-in/documents-management/events/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/labs/solidworks/swex/add-in/documents-management/events/index.md",tags:[],version:"current",frontMatter:{title:"Handling the common events of SOLIDWORKS file using SwEx.AddIn framework",caption:"Common Events",description:"Handling of common events (rebuild, selection, configuration change, item modification, custom property modification etc.) using documents management functionality in SwEx.AddIn Framework","toc-group-name":"labs-solidworks-swex",labels:["events","rebuild","selection"]},sidebar:"tutorialSidebar",previous:{title:"Managing SOLIDWORKS documents life cycle via SwEx.AddIn framework",permalink:"/solidworks-GPT/docs/codestack-clone/labs/solidworks/swex/add-in/documents-management/"},next:{title:"Getting Started with SwEx.AddIn to develop advanced add-ins for SOLIDWORKS",permalink:"/solidworks-GPT/docs/codestack-clone/labs/solidworks/swex/add-in/getting-started/"}},l={},s=[],c={toc:s},m="wrapper";function u(e){let{components:n,...t}=e;return(0,d.kt)(m,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,d.kt)("p",null,"SwEx.AddIn framework exposes the common events via generic ",(0,d.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/T_CodeStack_SwEx_AddIn_Core_DocumentHandler.htm"},"DocumentHandler"),":"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"Save"),(0,d.kt)("li",{parentName:"ul"},"Selection"),(0,d.kt)("li",{parentName:"ul"},"Access3rdPartyData"),(0,d.kt)("li",{parentName:"ul"},"CustomPropertyModify"),(0,d.kt)("li",{parentName:"ul"},"ItemModify"),(0,d.kt)("li",{parentName:"ul"},"ConfigurationChange"),(0,d.kt)("li",{parentName:"ul"},"Rebuild"),(0,d.kt)("li",{parentName:"ul"},"Dimension Change")),(0,d.kt)("p",null,"Call the ",(0,d.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/M_CodeStack_SwEx_AddIn_Base_ISwAddInEx_CreateDocumentsHandler.htm"},"ISwAddInEx.CreateDocumentsHandler"),"  to create a generic events handler."),(0,d.kt)("p",null,"It is recommended to use the ",(0,d.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/E_CodeStack_SwEx_AddIn_Base_IDocumentsHandler_1_HandlerCreated.htm"},"HandleCreated")," notification which will notify that new document is loaded to subscribe to the document events."),(0,d.kt)("p",null,"Unsubscribe from the events from ",(0,d.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/E_CodeStack_SwEx_AddIn_Core_DocumentHandler_Destroyed.htm"},"Destroyed")," notification."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-vb"},'Imports CodeStack.SwEx.AddIn\nImports CodeStack.SwEx.AddIn.Attributes\nImports CodeStack.SwEx.AddIn.Base\nImports CodeStack.SwEx.AddIn.Core\nImports CodeStack.SwEx.AddIn.Delegates\nImports CodeStack.SwEx.AddIn.Enums\nImports SolidWorks.Interop.sldworks\nImports SolidWorks.Interop.swconst\nImports System\nImports System.Runtime.InteropServices\n\nNamespace CodeStack.SwEx\n    <AutoRegister>\n    <ComVisible(True), Guid("E6BE0C5A-8B24-46B4-98F9-BEC4100BC709")>\n    Public Class EventsAddIn\n        Inherits SwAddInEx\n\n        Private m_DocHandlerGeneric As IDocumentsHandler(Of DocumentHandler)\n\n        Public Overrides Function OnConnect() As Boolean\n            m_DocHandlerGeneric = CreateDocumentsHandler()\n            AddHandler m_DocHandlerGeneric.HandlerCreated, AddressOf OnHandlerCreated\n            Return True\n        End Function\n\n        Private Sub OnHandlerCreated(ByVal doc As DocumentHandler)\n            AddHandler doc.Initialized, AddressOf OnInitialized\n            AddHandler doc.Activated, AddressOf OnActivated\n            AddHandler doc.ConfigurationChange, AddressOf OnConfigurationOrSheetChanged\n            AddHandler doc.CustomPropertyModify, AddressOf OnCustomPropertyModified\n            AddHandler doc.Access3rdPartyData, AddressOf OnAccess3rdPartyData\n            AddHandler doc.ItemModify, AddressOf OnItemModified\n            AddHandler doc.Save, AddressOf OnSave\n            AddHandler doc.Selection, AddressOf OnSelection\n            AddHandler doc.Rebuild, AddressOf OnRebuild\n            AddHandler doc.DimensionChange, AddressOf OnDimensionChange\n            AddHandler doc.Destroyed, AddressOf OnDestroyed\n        End Sub\n\n        Private Sub OnDestroyed(ByVal handler As DocumentHandler)\n            RemoveHandler handler.Initialized, AddressOf OnInitialized\n            RemoveHandler handler.Activated, AddressOf OnActivated\n            RemoveHandler handler.ConfigurationChange, AddressOf OnConfigurationOrSheetChanged\n            RemoveHandler handler.CustomPropertyModify, AddressOf OnCustomPropertyModified\n            RemoveHandler handler.ItemModify, AddressOf OnItemModified\n            RemoveHandler handler.Save, AddressOf OnSave\n            RemoveHandler handler.Selection, AddressOf OnSelection\n            RemoveHandler handler.Rebuild, AddressOf OnRebuild\n            RemoveHandler handler.DimensionChange, AddressOf OnDimensionChange\n            RemoveHandler handler.Destroyed, AddressOf OnDestroyed\n            Logger.Log($"\'{handler.Model.GetTitle()}\' destroyed")\n        End Sub\n\n        Public Overrides Function OnDisconnect() As Boolean\n            RemoveHandler m_DocHandlerGeneric.HandlerCreated, AddressOf OnHandlerCreated\n            Return True\n        End Function\n\n    End Class\nEnd Namespace\n')),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-cs"},'using CodeStack.SwEx.AddIn;\nusing CodeStack.SwEx.AddIn.Attributes;\nusing CodeStack.SwEx.AddIn.Base;\nusing CodeStack.SwEx.AddIn.Core;\nusing CodeStack.SwEx.AddIn.Delegates;\nusing CodeStack.SwEx.AddIn.Enums;\nusing SolidWorks.Interop.sldworks;\nusing SolidWorks.Interop.swconst;\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace CodeStack.SwEx\n{\n    [AutoRegister]\n    [ComVisible(true), Guid("76045173-E27C-4DF9-AE5F-147B893CE3DC")]\n    public class EventsAddIn : SwAddInEx\n    {\n        private IDocumentsHandler<DocumentHandler> m_DocHandlerGeneric;\n\n        public override bool OnConnect()\n        {\n            m_DocHandlerGeneric = CreateDocumentsHandler();\n            m_DocHandlerGeneric.HandlerCreated += OnHandlerCreated;\n            return true;\n        }\n\n        private void OnHandlerCreated(DocumentHandler doc)\n        {\n            doc.Initialized += OnInitialized;\n            doc.Activated += OnActivated;\n            doc.ConfigurationChange += OnConfigurationOrSheetChanged;\n            doc.CustomPropertyModify += OnCustomPropertyModified;\n            doc.Access3rdPartyData += OnAccess3rdPartyData;\n            doc.ItemModify += OnItemModified;\n            doc.Save += OnSave;\n            doc.Selection += OnSelection;\n            doc.Rebuild += OnRebuild;\n            doc.DimensionChange += OnDimensionChange;\n            doc.Destroyed += OnDestroyed;\n        }\n\n        private void OnDestroyed(DocumentHandler handler)\n        {\n            handler.Initialized -= OnInitialized;\n            handler.Activated -= OnActivated;\n            handler.ConfigurationChange -= OnConfigurationOrSheetChanged;\n            handler.CustomPropertyModify -= OnCustomPropertyModified;\n            handler.ItemModify -= OnItemModified;\n            handler.Save -= OnSave;\n            handler.Selection -= OnSelection;\n            handler.Rebuild -= OnRebuild;\n            handler.DimensionChange -= OnDimensionChange;\n            handler.Destroyed -= OnDestroyed;\n\n            Logger.Log($"\'{handler.Model.GetTitle()}\' destroyed");\n        }\n\n        public override bool OnDisconnect()\n        {\n            m_DocHandlerGeneric.HandlerCreated -= OnHandlerCreated;\n            return true;\n        }\n\n    }\n}\n')),(0,d.kt)("p",null,"Event handlers provide additional information about event, such as is it a pre or post notification and any additional parameters. Explore API reference for more information about the passed parameters."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-vb"},"Private Function OnRebuild(ByVal docHandler As DocumentHandler, ByVal type As RebuildState_e) As Boolean\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' rebuilt ({type})\")\n\n    If type = RebuildState_e.PreRebuild Then\n        'return false to cancel regeneration\n    End If\n\n    Return True\nEnd Function\n\nPrivate Sub OnInitialized(ByVal docHandler As DocumentHandler)\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' initialized\")\nEnd Sub\n\nPrivate Function OnSelection(ByVal docHandler As DocumentHandler, ByVal selType As swSelectType_e, ByVal type As SelectionState_e) As Boolean\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' selection ({type}) of {selType}\")\n\n    If type <> SelectionState_e.UserPreSelect Then 'dynamic selection\n        'return false to cancel selection\n    End If\n\n    Return True\nEnd Function\n\nPrivate Function OnSave(ByVal docHandler As DocumentHandler, ByVal fileName As String, ByVal type As SaveState_e) As Boolean\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' saving ({type})\")\n\n    If type = SaveState_e.PreSave Then\n        'return false to cancel saving\n    End If\n\n    Return True\nEnd Function\n\nPrivate Sub OnItemModified(ByVal docHandler As DocumentHandler, ByVal type As ItemModificationAction_e, ByVal entType As swNotifyEntityType_e, ByVal name As String, ByVal Optional oldName As String = \"\")\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' item modified ({type}) of {entType}. Name: {name} (from {oldName})\")\nEnd Sub\n\nPrivate Sub OnCustomPropertyModified(ByVal docHandler As DocumentHandler, ByVal modifications As CustomPropertyModifyData())\n    For Each [mod] In modifications\n        Logger.Log($\"'{docHandler.Model.GetTitle()}' custom property '{[mod].Name}' changed ({[mod].Action}) in '{[mod].Configuration}' to '{[mod].Value}'\")\n    Next\nEnd Sub\n\nPrivate Sub OnAccess3rdPartyData(ByVal docHandler As DocumentHandler, ByVal state As Access3rdPartyDataState_e)\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' accessing 3rd party data ({state})\")\nEnd Sub\n\nPrivate Sub OnConfigurationOrSheetChanged(ByVal docHandler As DocumentHandler, ByVal type As ConfigurationChangeState_e, ByVal confName As String)\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' configuration {confName} changed ({type})\")\nEnd Sub\n\nPrivate Sub OnDimensionChange(ByVal docHandler As DocumentHandler, ByVal dispDim As IDisplayDimension)\n    Dim [dim] = dispDim.GetDimension2(0)\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' dimension change: {[dim].FullName} = {[dim].Value}\")\n    Marshal.ReleaseComObject([dim])\n    [dim] = Nothing\nEnd Sub\n\nPrivate Sub OnActivated(ByVal docHandler As DocumentHandler)\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' activated\")\nEnd Sub\n")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-cs"},"private bool OnRebuild(DocumentHandler docHandler, RebuildState_e type)\n{\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' rebuilt ({type})\");\n\n    if(type == RebuildState_e.PreRebuild)\n    {\n        //return false to cancel regeneration\n    }\n\n    return true;\n}\n\nprivate void OnInitialized(DocumentHandler docHandler)\n{\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' initialized\");\n}\n\nprivate bool OnSelection(DocumentHandler docHandler, swSelectType_e selType, SelectionState_e type)\n{\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' selection ({type}) of {selType}\");\n\n    if (type != SelectionState_e.UserPreSelect) //dynamic selection\n    {\n        //return false to cancel selection\n    }\n\n    return true;\n}\n\nprivate bool OnSave(DocumentHandler docHandler, string fileName, SaveState_e type)\n{\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' saving ({type})\");\n\n    if (type == SaveState_e.PreSave)\n    {\n        //return false to cancel saving\n    }\n\n    return true;\n}\n\nprivate void OnItemModified(DocumentHandler docHandler, ItemModificationAction_e type, swNotifyEntityType_e entType, string name, string oldName = \"\")\n{\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' item modified ({type}) of {entType}. Name: {name} (from {oldName})\");\n}\n\nprivate void OnCustomPropertyModified(DocumentHandler docHandler, CustomPropertyModifyData[] modifications)\n{\n    foreach (var mod in modifications)\n    {\n        Logger.Log($\"'{docHandler.Model.GetTitle()}' custom property '{mod.Name}' changed ({mod.Action}) in '{mod.Configuration}' to '{mod.Value}'\");\n    }\n}\n\nprivate void OnAccess3rdPartyData(DocumentHandler docHandler, Access3rdPartyDataState_e state)\n{\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' accessing 3rd party data ({state})\");\n}\n\nprivate void OnConfigurationOrSheetChanged(DocumentHandler docHandler, ConfigurationChangeState_e type, string confName)\n{\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' configuration {confName} changed ({type})\");\n}\n\nprivate void OnDimensionChange(DocumentHandler docHandler, IDisplayDimension dispDim)\n{\n    var dim = dispDim.GetDimension2(0);\n\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' dimension change: {dim.FullName} = {dim.Value}\");\n\n    Marshal.ReleaseComObject(dim);\n    dim = null;\n}\n\nprivate void OnActivated(DocumentHandler docHandler)\n{\n    Logger.Log($\"'{docHandler.Model.GetTitle()}' activated\");\n}\n")))}u.isMDXComponent=!0}}]);