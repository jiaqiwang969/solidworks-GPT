"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[62096],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var s=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=s.createContext({}),l=function(e){var t=s.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return s.createElement(i.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},k=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(n),k=r,h=d["".concat(i,".").concat(k)]||d[k]||p[k]||o;return n?s.createElement(h,c(c({ref:t},u),{},{components:n})):s.createElement(h,c({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=k;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a[d]="string"==typeof e?e:r,c[1]=a;for(var l=2;l<o;l++)c[l]=n[l];return s.createElement.apply(null,c)}return s.createElement.apply(null,n)}k.displayName="MDXCreateElement"},8534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=n(87462),r=(n(67294),n(3905));const o={layout:"sw-tool",title:"Macro to select equal arcs in the sketch using SOLIDWORKS API",caption:"Select Equal Arcs",description:"VBA macro to find and select all arcs with diameter equal to the input arc using SOLIDWORKS API",image:"selected-equal-arcs.png",labels:["sketch","arc","circle","equal"],group:"Sketch"},c=void 0,a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/sketch/select-equal-arcs/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/sketch/select-equal-arcs/index",title:"Macro to select equal arcs in the sketch using SOLIDWORKS API",description:"VBA macro to find and select all arcs with diameter equal to the input arc using SOLIDWORKS API",source:"@site/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/sketch/select-equal-arcs/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/sketch/select-equal-arcs",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/sketch/select-equal-arcs/",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/sketch/select-equal-arcs/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/sketch/select-equal-arcs/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"Macro to select equal arcs in the sketch using SOLIDWORKS API",caption:"Select Equal Arcs",description:"VBA macro to find and select all arcs with diameter equal to the input arc using SOLIDWORKS API",image:"selected-equal-arcs.png",labels:["sketch","arc","circle","equal"],group:"Sketch"},sidebar:"tutorialSidebar",previous:{title:"Macro to merge sketches using SOLIDWORKS API",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/sketch/merge-sketches/"},next:{title:"Macro to toggle the sketch snapping in SOLIDWORKS document",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/sketch/toggle-snapping/"}},i={},l=[{value:"Options",id:"options",level:2}],u={toc:l},d="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,s.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Equal arcs selected in the sketch",src:n(42953).Z,width:"1083",height:"718"}),"{ width=350 }"),(0,r.kt)("p",null,"This VBA macro selects equal size sketch arcs to the pre-selected input sketch arc. Only arcs in the sketch of the original input arc are selected. Macro works both for active and inactive sketch."),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,"Macro can be configured by changing the values of the constant at the beginning of the macro"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},"Const EPS As Double = 0.0000000001 'arcs radius comparison tolerance\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Const EPS As Double = 0.0000000001\n\nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    On Error GoTo catch\n    \ntry:\n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    If Not swModel Is Nothing Then\n        \n        Dim swSkSrcArc As SldWorks.SketchArc\n        Set swSkSrcArc = swModel.SelectionManager.GetSelectedObject6(1, -1)\n        \n        If Not swSkSrcArc Is Nothing Then\n            \n            Dim radius As Double\n            radius = swSkSrcArc.GetRadius()\n            \n            Dim swSketch As SldWorks.Sketch\n            Set swSketch = swSkSrcArc.GetSketch\n            \n            Dim vSegs As Variant\n            vSegs = swSketch.GetSketchSegments()\n            \n            Dim i As Integer\n            \n            For i = 0 To UBound(vSegs)\n                \n                Dim swSkSeg As SldWorks.SketchSegment\n                Set swSkSeg = vSegs(i)\n                \n                If swSkSeg.GetType() = swSketchSegments_e.swSketchARC Then\n                \n                    If Not swSkSrcArc Is swSkSeg Then\n                    \n                        Dim swSkArc As SldWorks.SketchArc\n                        Set swSkArc = swSkSeg\n                        \n                        If Abs(swSkArc.GetRadius() - radius) < EPS Then\n                            swSkSeg.Select4 True, Nothing\n                        End If\n                        \n                    End If\n                End If\n                \n            Next\n            \n        Else\n            Err.Raise vbError, "", "Please select sketch arc"\n        End If\n        \n    Else\n        Err.Raise vbError, "", "Open model"\n    End If\n    \n    GoTo finally\ncatch:\n    swApp.SendMsgToUser2 Err.Description, swMessageBoxIcon_e.swMbStop, swMessageBoxBtn_e.swMbOk\nfinally:\n    \nEnd Sub\n\n')))}p.isMDXComponent=!0},42953:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/selected-equal-arcs-790aeea06f25a7d4a8a3707d17da8acf.png"}}]);