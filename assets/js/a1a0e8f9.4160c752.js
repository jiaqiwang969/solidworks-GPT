"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[19929],{3905:(e,n,i)=>{i.d(n,{Zo:()=>m,kt:()=>p});var t=i(67294);function o(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function s(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function r(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?s(Object(i),!0).forEach((function(n){o(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):s(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function d(e,n){if(null==e)return{};var i,t,o=function(e,n){if(null==e)return{};var i,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)i=s[t],n.indexOf(i)>=0||(o[i]=e[i]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)i=s[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var a=t.createContext({}),l=function(e){var n=t.useContext(a),i=n;return e&&(i="function"==typeof e?e(n):r(r({},n),e)),i},m=function(e){var n=l(e.components);return t.createElement(a.Provider,{value:n},e.children)},c="mdxType",w={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var i=e.components,o=e.mdxType,s=e.originalType,a=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),c=l(i),u=o,p=c["".concat(a,".").concat(u)]||c[u]||w[u]||s;return i?t.createElement(p,r(r({ref:n},m),{},{components:i})):t.createElement(p,r({ref:n},m))}));function p(e,n){var i=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=i.length,r=new Array(s);r[0]=u;var d={};for(var a in n)hasOwnProperty.call(n,a)&&(d[a]=n[a]);d.originalType=e,d[c]="string"==typeof e?e:o,r[1]=d;for(var l=2;l<s;l++)r[l]=i[l];return t.createElement.apply(null,r)}return t.createElement.apply(null,i)}u.displayName="MDXCreateElement"},27217:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>w,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var t=i(87462),o=(i(67294),i(3905));const s={caption:"Add Holes Ordinate Dimensions",title:"Macro to add horizontal and vertical ordinate dimensions for holes in SOLIDWORKS drawings view",description:"SOLIDWORKS VBA macro to add horizontal and vertical ordinate dimensions for all holes of the selected view relative to the bottom left vertex",image:"ordinate-dimensions.png"},r=void 0,d={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/dimensions/add-ordinate-dimensions/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/dimensions/add-ordinate-dimensions/index",title:"Macro to add horizontal and vertical ordinate dimensions for holes in SOLIDWORKS drawings view",description:"SOLIDWORKS VBA macro to add horizontal and vertical ordinate dimensions for all holes of the selected view relative to the bottom left vertex",source:"@site/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/dimensions/add-ordinate-dimensions/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/dimensions/add-ordinate-dimensions",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/dimensions/add-ordinate-dimensions/",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/dimensions/add-ordinate-dimensions/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/dimensions/add-ordinate-dimensions/index.md",tags:[],version:"current",frontMatter:{caption:"Add Holes Ordinate Dimensions",title:"Macro to add horizontal and vertical ordinate dimensions for holes in SOLIDWORKS drawings view",description:"SOLIDWORKS VBA macro to add horizontal and vertical ordinate dimensions for all holes of the selected view relative to the bottom left vertex",image:"ordinate-dimensions.png"},sidebar:"tutorialSidebar",previous:{title:"Add equation to dimension using SOLIDWORKS API",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/dimensions/add-equation/"},next:{title:"Add smart dimension between two segments using SOLIDWORKS API",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/dimensions/add-smart-dimension-between-two-segments/"}},a={},l=[],m={toc:l},c="wrapper";function w(e){let{components:n,...s}=e;return(0,o.kt)(c,(0,t.Z)({},m,s,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Ordinate dimensions in the drawing view",src:i(79605).Z,width:"690",height:"554"})),(0,o.kt)("p",null,"This SOLIDWORKS VBA macro automates adding the horizontal ordinate dimensions for all the holes in the selected drawing view."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Macro will find the ordinate dimension origin by finding the bottom left vertex in the view"),(0,o.kt)("li",{parentName:"ul"},"Macro will find all holes of the view (only internal holes are included, fillets will not be considered)"),(0,o.kt)("li",{parentName:"ul"},"Macro will add horizontal and vertical dimensions for the holes"),(0,o.kt)("li",{parentName:"ul"},"Dimensions wil be positioned relative to the drawing view")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\nDim swMathUtils As SldWorks.MathUtility\n\nSub main()\n\n    Set swApp = Application.SldWorks\n        \n    Set swMathUtils = swApp.GetMathUtility\n        \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    Dim swView As SldWorks.view\n\n    Set swView = swModel.SelectionManager.GetSelectedObject6(1, -1)\n    \n    If swView Is Nothing Then\n        Err.Raise vbError, "", "Please select view"\n    End If\n    \n    Dim swOrigVertex As SldWorks.vertex\n    Set swOrigVertex = FindOriginVertex(swView)\n    \n    Dim vHoles As Variant\n    vHoles = FindHoles(swView)\n    \n    If IsEmpty(vHoles) Then\n        Err.Raise vbError, "", "No holes found"\n    End If\n    \n    Dim vOutline As Variant\n    vOutline = swView.GetOutline\n    \n    Dim offset As Double\n    offset = (vOutline(2) - vOutline(1)) * 0.1\n    \n    AddOrdinateDimensions swModel, swOrigVertex, vHoles, swAddOrdinateDims_e.swHorizontalOrdinate, 0, vOutline(1) - offset\n    AddOrdinateDimensions swModel, swOrigVertex, vHoles, swAddOrdinateDims_e.swVerticalOrdinate, vOutline(0) - offset, 0\n\nEnd Sub\n\nSub AddOrdinateDimensions(model As SldWorks.ModelDoc2, origVertex As SldWorks.vertex, holes As Variant, dimType As swAddOrdinateDims_e, x As Double, y As Double)\n    \n    Dim swSels() As SldWorks.Entity\n    ReDim swSels(1 + UBound(holes))\n    \n    Set swSels(0) = origVertex\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(holes)\n        Set swSels(i + 1) = holes(i)\n    Next\n    \n    If model.Extension.MultiSelect2(swSels, False, Nothing) = UBound(swSels) + 1 Then\n        Dim res As Long\n        res = model.Extension.AddOrdinateDimension(dimType, x, y, 0)\n        \n        model.SetPickMode\n        \n        If res <> swCreateOrdDimError_e.swCreateOrdDimErr_Success Then\n            Err.Raise vbError, "", "Failed to add ordinate dimension"\n        End If\n    Else\n        Err.Raise vbError, "", "Failed to select entities"\n    End If\n    \nEnd Sub\n\n\nFunction FindOriginVertex(view As SldWorks.view) As SldWorks.vertex\n    \n    Dim vComps As Variant\n    \n    vComps = view.GetVisibleComponents\n    \n    Dim swViewTransform As SldWorks.MathTransform\n    Set swViewTransform = view.ModelToViewTransform\n    \n    Dim swOriginVertex As SldWorks.vertex\n    \n    If Not IsEmpty(vComps) Then\n    \n        Dim i As Integer\n        \n        For i = 0 To UBound(vComps)\n        \n            Dim swComp As SldWorks.Component2\n                \n            Set swComp = vComps(i)\n            \n            Dim vVisEnts As Variant\n            vVisEnts = view.GetVisibleEntities2(swComp, swViewEntityType_e.swViewEntityType_Vertex)\n            \n            Dim j As Integer\n            \n            For j = 0 To UBound(vVisEnts)\n                Dim swVertex As SldWorks.vertex\n                Set swVertex = vVisEnts(j)\n                                \n                If swOriginVertex Is Nothing Then\n                    Set swOriginVertex = swVertex\n                Else\n                    Dim vCurOrigCoord As Variant\n                    vCurOrigCoord = GetVertexCoordinate(swOriginVertex, swViewTransform)\n                    \n                    Dim vCoord As Variant\n                    vCoord = GetVertexCoordinate(swVertex, swViewTransform)\n\n                    If vCoord(0) < vCurOrigCoord(0) And vCoord(1) < vCurOrigCoord(1) Then\n                        Set swOriginVertex = swVertex\n                    End If\n                    \n                End If\n                \n            Next\n            \n        Next\n        \n    End If\n    \n    If swOriginVertex Is Nothing Then\n        Err.Raise vbError, "", "Failed to find origin vertex"\n    End If\n    \n    Set FindOriginVertex = swOriginVertex\n    \nEnd Function\n\nFunction GetVertexCoordinate(vertex As SldWorks.vertex, transform As SldWorks.MathTransform) As Variant\n        \n    Dim vCoordPt As Variant\n    vCoordPt = vertex.GetPoint()\n    \n    Dim swMathPt As SldWorks.MathPoint\n    Set swMathPt = swMathUtils.CreatePoint(vCoordPt)\n    \n    Set swMathPt = swMathPt.MultiplyTransform(transform)\n    \n    GetVertexCoordinate = swMathPt.ArrayData\n    \nEnd Function\n\nFunction FindHoles(view As SldWorks.view) As Variant\n    \n    Dim vComps As Variant\n    \n    vComps = view.GetVisibleComponents\n       \n    Dim swHoles() As SldWorks.Edge\n    \n    If Not IsEmpty(vComps) Then\n    \n        Dim i As Integer\n        \n        For i = 0 To UBound(vComps)\n        \n            Dim swComp As SldWorks.Component2\n                \n            Set swComp = vComps(i)\n            \n            Dim vVisEnts As Variant\n            vVisEnts = view.GetVisibleEntities2(swComp, swViewEntityType_e.swViewEntityType_Edge)\n            \n            Dim j As Integer\n            \n            For j = 0 To UBound(vVisEnts)\n                \n                Dim swEdge As SldWorks.Edge\n                Set swEdge = vVisEnts(j)\n                \n                Dim swCurve As SldWorks.Curve\n                Set swCurve = swEdge.GetCurve\n                \n                If False <> swCurve.IsCircle() Then\n                    \n                    Dim isClosed As Boolean\n                    swCurve.GetEndParams -1, -1, isClosed, -1\n                    \n                    If False <> isClosed Then\n                    \n                        If (Not swHoles) = -1 Then\n                            ReDim swHoles(0)\n                        Else\n                            ReDim Preserve swHoles(UBound(swHoles) + 1)\n                        End If\n                        \n                        Set swHoles(UBound(swHoles)) = swEdge\n        \n                    End If\n                    \n                End If\n                \n            Next\n            \n        Next\n        \n    End If\n    \n    If (Not swHoles) = -1 Then\n        FindHoles = Empty\n    Else\n        FindHoles = swHoles\n    End If\n\nEnd Function\n')))}w.isMDXComponent=!0},79605:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/ordinate-dimensions-c4062817d08ec4fc19d47fea853211f3.png"}}]);