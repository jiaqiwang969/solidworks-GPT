"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[64191],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,g=p["".concat(i,".").concat(m)]||p[m]||u[m]||a;return t?r.createElement(g,s(s({ref:n},d),{},{components:t})):r.createElement(g,s({ref:n},d))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[p]="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},59818:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={title:"Handling dynamic values updated in the controls",caption:"Dynamic Values",description:"Handling dynamic values updated in the controls of the Property Manager Page using SwEx.PMPage framework",image:"controls-dynamic-values.gif","toc-group-name":"labs-solidworks-swex",sidebar_position:0},s=void 0,l={unversionedId:"codestack-clone/labs/solidworks/swex/pmpage/controls/dynamic-values/index",id:"codestack-clone/labs/solidworks/swex/pmpage/controls/dynamic-values/index",title:"Handling dynamic values updated in the controls",description:"Handling dynamic values updated in the controls of the Property Manager Page using SwEx.PMPage framework",source:"@site/docs/codestack-clone/labs/solidworks/swex/pmpage/controls/dynamic-values/index.md",sourceDirName:"codestack-clone/labs/solidworks/swex/pmpage/controls/dynamic-values",slug:"/codestack-clone/labs/solidworks/swex/pmpage/controls/dynamic-values/",permalink:"/solidworks-GPT/docs/codestack-clone/labs/solidworks/swex/pmpage/controls/dynamic-values/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/labs/solidworks/swex/pmpage/controls/dynamic-values/index.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Handling dynamic values updated in the controls",caption:"Dynamic Values",description:"Handling dynamic values updated in the controls of the Property Manager Page using SwEx.PMPage framework",image:"controls-dynamic-values.gif","toc-group-name":"labs-solidworks-swex",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Assigning tags and managing Property Manager Page control dependencies",permalink:"/solidworks-GPT/docs/codestack-clone/labs/solidworks/swex/pmpage/controls/dependencies/"},next:{title:"Group Box in SOLIDWORKS Property Manager Page",permalink:"/solidworks-GPT/docs/codestack-clone/labs/solidworks/swex/pmpage/controls/group/"}},i={},c=[],d={toc:c},p="wrapper";function u(e){let{components:n,...a}=e;return(0,o.kt)(p,(0,r.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Values updated controls",src:t(14795).Z,width:"228",height:"140"})),(0,o.kt)("p",null,"In order to update control values for the properties changed from the code behind dynamically (e.g. on button click or when one property is changing another property), it is required to implement the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged?view=netframework-4.8"},"INotifyPropertyChanged")," in the data model. Raise the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged.propertychanged?view=netframework-4.8"},"PropertyChanged")," event for every property which needs to be watched to notify the environment that value has changed and control needs to be updated."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},"Imports System.ComponentModel\n\nPublic Class DynamicValuesDataModel\n    Implements INotifyPropertyChanged\n\n    Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\n\n    Private m_Val1 As Double\n    Private m_Val2 As Double\n\n    Public Property Val1 As Double\n        Get\n            Return m_Val1\n        End Get\n        Set(ByVal value As Double)\n            m_Val1 = value\n            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(Val1)))\n            Val2 = value * 2\n        End Set\n    End Property\n\n    Public Property Val2 As Double\n        Get\n            Return m_Val2\n        End Get\n        Set(ByVal value As Double)\n            m_Val2 = value\n            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(Val2)))\n        End Set\n    End Property\n\n    Public ReadOnly Property Reset As Action\n        Get\n            Return AddressOf OnResetClick\n        End Get\n    End Property\n\n    Private Sub OnResetClick()\n        Val1 = 10\n    End Sub\n\nEnd Class\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using System;\nusing System.ComponentModel;\n\npublic class DynamicValuesDataModel : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private double m_Val1;\n    private double m_Val2;\n\n    public double Val1\n    {\n        get\n        {\n            return m_Val1;\n        }\n        set\n        {\n            m_Val1 = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Val1)));\n\n            Val2 = value * 2;\n        }\n    }\n\n    public double Val2\n    {\n        get\n        {\n            return m_Val2;\n        }\n        set\n        {\n            m_Val2 = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Val2)));\n        }\n    }\n\n    public Action Reset => OnResetClick;\n\n    private void OnResetClick()\n    {\n        Val1 = 10;\n    }\n}\n")))}u.isMDXComponent=!0},14795:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/controls-dynamic-values-bc3f20f34a96c1e2ea0591e8b3de9436.gif"}}]);