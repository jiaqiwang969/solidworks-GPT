"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[58974],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,b=u["".concat(l,".").concat(m)]||u[m]||p[m]||s;return n?o.createElement(b,i(i({ref:t},d),{},{components:n})):o.createElement(b,i({ref:t},d))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:r,i[1]=a;for(var c=2;c<s;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93376:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const s={layout:"sw-tool",caption:"Rename Cut-List Bodies",title:"Macro to rename SOLIDWORKS bodies of cut-list items using the predefined template",description:"VBA macro to rename bodies within the SOLIDWORKS cut-list body folder (sheet metal or weldment) based on the predefined template (e.g. custom property value)",image:"renamed-cut-list-bodies.png",group:"Cut-List"},i=void 0,a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/cut-lists/rename-cut-list-bodies/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/cut-lists/rename-cut-list-bodies/index",title:"Macro to rename SOLIDWORKS bodies of cut-list items using the predefined template",description:"VBA macro to rename bodies within the SOLIDWORKS cut-list body folder (sheet metal or weldment) based on the predefined template (e.g. custom property value)",source:"@site/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/cut-lists/rename-cut-list-bodies/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/cut-lists/rename-cut-list-bodies",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/cut-lists/rename-cut-list-bodies/",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/cut-lists/rename-cut-list-bodies/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/cut-lists/rename-cut-list-bodies/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",caption:"Rename Cut-List Bodies",title:"Macro to rename SOLIDWORKS bodies of cut-list items using the predefined template",description:"VBA macro to rename bodies within the SOLIDWORKS cut-list body folder (sheet metal or weldment) based on the predefined template (e.g. custom property value)",image:"renamed-cut-list-bodies.png",group:"Cut-List"},sidebar:"tutorialSidebar",previous:{title:"SOLIDWORKS macro to exclude selected bodies from cut-lists",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/cut-lists/exclude-selected-bodies/"},next:{title:"Rename cut list features based on custom properties using SOLIDWORKS API",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/cut-lists/rename-cut-list-items/"}},l={},c=[{value:"Notes",id:"notes",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...s}=e;return(0,r.kt)(u,(0,o.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Sheet metal and weldment bodies renamed in the feature manager tree",src:n(73347).Z,width:"359",height:"306"})),(0,r.kt)("p",null,"This VBA macro allows to rename all bodies which belong to cut-list folder (e.g. Sheet Metal or Weldment) based on the predefined naming template. It is possible to use free text in combination with custom property placeholder which will allow to use custom property in the name."),(0,r.kt)("p",null,"Custom property must be enclosed within ",(0,r.kt)("inlineCode",{parentName:"p"},"<>")," symbols"),(0,r.kt)("p",null,"For example to rename all sheet metal bodies using ",(0,r.kt)("strong",{parentName:"p"},"SM_")," prefix followed by value of the thickness, ",(0,r.kt)("strong",{parentName:"p"},"NAME_TEMPLATE")," variable should be defined as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Const NAME_TEMPLATE As String = "SM_<Thickness>"\n')),(0,r.kt)("h2",{id:"notes"},"Notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Macro may require model rebuild after the run to refresh the names of the features"),(0,r.kt)("li",{parentName:"ul"},"If several bodies reside within one cut-list folder, index will be used to differentiate the names, e.g. -1, -2, -3"),(0,r.kt)("li",{parentName:"ul"},"Macro will perform the cut-list update before renaming")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Const NAME_TEMPLATE As String = "<PartNo>"\n\nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swPart As SldWorks.PartDoc\n    \n    Set swPart = swApp.ActiveDoc\n    \n    ProcessCutLists swPart\n    \nEnd Sub\n\nSub ProcessCutLists(model As SldWorks.ModelDoc2)\n\n    Dim swFeat As SldWorks.Feature\n    \n    Set swFeat = model.FirstFeature\n    \n    Do While Not swFeat Is Nothing\n        \n        Dim swBodyFolder As SldWorks.BodyFolder\n        \n        If swFeat.GetTypeName2() = "SolidBodyFolder" Then\n            Set swBodyFolder = swFeat.GetSpecificFeature2\n            swBodyFolder.UpdateCutList\n        ElseIf swFeat.GetTypeName2() = "CutListFolder" Then\n            Set swBodyFolder = swFeat.GetSpecificFeature2\n                        \n            Dim name As String\n            name = ComposeName(NAME_TEMPLATE, swFeat)\n            \n            RenameBodies swBodyFolder.GetBodies(), name\n            \n        End If\n        \n        Set swFeat = swFeat.GetNextFeature\n        \n    Loop\n    \nEnd Sub\n\nSub RenameBodies(bodies As Variant, bodyName As String)\n    \n    If Not IsEmpty(bodies) Then\n    \n        Dim i As Integer\n        \n        For i = 0 To UBound(bodies)\n            Dim swBody As SldWorks.Body2\n            Set swBody = bodies(i)\n            \n            swBody.name = bodyName & IIf(i > 0, "-" & CStr(i), "")\n        Next\n    \n    End If\n    \nEnd Sub\n\nFunction ComposeName(template As String, cutListFeat As SldWorks.Feature) As String\n\n    Dim regEx As Object\n    Set regEx = CreateObject("VBScript.RegExp")\n    \n    regEx.Global = True\n    regEx.IgnoreCase = True\n    regEx.Pattern = "<[^>]*>"\n    \n    Dim regExMatches As Object\n    Set regExMatches = regEx.Execute(template)\n    \n    Dim i As Integer\n    \n    Dim outName As String\n    outName = template\n    \n    For i = regExMatches.Count - 1 To 0 Step -1\n        \n        Dim regExMatch As Object\n        Set regExMatch = regExMatches.Item(i)\n                    \n        Dim prpName As String\n        prpName = Mid(regExMatch.Value, 2, Len(regExMatch.Value) - 2)\n        \n        outName = Left(outName, regExMatch.FirstIndex) & GetPropertyValue(cutListFeat.CustomPropertyManager, prpName) & Right(outName, Len(outName) - (regExMatch.FirstIndex + regExMatch.Length))\n\n    Next\n    \n    ComposeName = outName\n    \nEnd Function\n\nFunction GetPropertyValue(custPrpMgr As SldWorks.CustomPropertyManager, prpName As String) As String\n    Dim resVal As String\n    custPrpMgr.Get2 prpName, "", resVal\n    GetPropertyValue = resVal\nEnd Function\n')))}p.isMDXComponent=!0},73347:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/renamed-cut-list-bodies-e727ab4b64534a578c7e491b519283bd.png"}}]);