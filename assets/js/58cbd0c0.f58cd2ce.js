"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[82299],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>y});var s=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,s)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function a(t,e){if(null==t)return{};var n,s,i=function(t,e){if(null==t)return{};var n,s,i={},r=Object.keys(t);for(s=0;s<r.length;s++)n=r[s],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(s=0;s<r.length;s++)n=r[s],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var c=s.createContext({}),l=function(t){var e=s.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},d=function(t){var e=l(t.components);return s.createElement(c.Provider,{value:e},t.children)},p="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return s.createElement(s.Fragment,{},e)}},m=s.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,c=t.parentName,d=a(t,["components","mdxType","originalType","parentName"]),p=l(n),m=i,y=p["".concat(c,".").concat(m)]||p[m]||u[m]||r;return n?s.createElement(y,o(o({ref:e},d),{},{components:n})):s.createElement(y,o({ref:e},d))}));function y(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,o=new Array(r);o[0]=m;var a={};for(var c in e)hasOwnProperty.call(e,c)&&(a[c]=e[c]);a.originalType=t,a[p]="string"==typeof t?t:i,o[1]=a;for(var l=2;l<r;l++)o[l]=n[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},87517:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=n(87462),i=(n(67294),n(3905));const r={caption:"Ray Intersection",title:"Find intersection points and topology entities by ray intersection SOLIDWORKS model",description:"VBA macro to find intersection points and the corresponding topology entities using rays in SOLIDWORKS part documents",image:"ray-intersection-entities.png"},o=void 0,a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/ray-intersection/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/ray-intersection/index",title:"Find intersection points and topology entities by ray intersection SOLIDWORKS model",description:"VBA macro to find intersection points and the corresponding topology entities using rays in SOLIDWORKS part documents",source:"@site/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/ray-intersection/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/ray-intersection",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/ray-intersection/",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/ray-intersection/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/ray-intersection/index.md",tags:[],version:"current",frontMatter:{caption:"Ray Intersection",title:"Find intersection points and topology entities by ray intersection SOLIDWORKS model",description:"VBA macro to find intersection points and the corresponding topology entities using rays in SOLIDWORKS part documents",image:"ray-intersection-entities.png"},sidebar:"tutorialSidebar",previous:{title:"Purge components configurations (remove all unused configurations) from SOLIDWORKS assembly",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/purge-configurations/"},next:{title:"Read custom properties from file, configuration and cut-list elements using SOLIDWORKS API",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/read-all-properties/"}},c={},l=[{value:"How To Run The Macro",id:"how-to-run-the-macro",level:2}],d={toc:l},p="wrapper";function u(t){let{components:e,...r}=t;return(0,i.kt)(p,(0,s.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This VBA macro example demonstrates how to find the intersection points and the corresponding topology entities between all solid bodies of the active SOLIDWORKS part document and rays created from the sketch points of the selected sketch."),(0,i.kt)("h2",{id:"how-to-run-the-macro"},"How To Run The Macro"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Open or create a part document with visible solid bodies.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Create 2D sketch with sketch points. Sketch points will be used as the starting points of the ray. And the sketch normal will be used as the direction for the rays")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Select the sketch above")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Run the macro. Macro will find all the intersections and pause on every found result"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Macro will output the information about each ray into the ",(0,i.kt)("a",{parentName:"p",href:"/docs/codestack/visual-basic/vba/vba-editor/windows#immediate-window"},"VBA Immediate Window"),". Information includes the name of the body, ray information (starting point and direction), and intersection type as defined in ",(0,i.kt)("a",{parentName:"p",href:"https://help.solidworks.com/2020/english/api/swconst/SolidWorks.Interop.swconst~SolidWorks.Interop.swconst.swRayPtsResults_e.html"},"swRayPtsResults_e")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Ray intersection information",src:n(68538).Z,width:"610",height:"280"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Macro will select the corresponding entity (face or edge) which ray has hit. The selection point will indicate the point where the ray hit the entity")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Continue macro with F5 or ",(0,i.kt)("strong",{parentName:"p"},"Run")," button in VBA editor to iterate all results"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Ray intersection entities",src:n(38142).Z,width:"658",height:"462"})))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\nConst HIT_RADIUS As Double = 0.00000001\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    Dim swPart As SldWorks.PartDoc\n    \n    Set swModel = swApp.ActiveDoc\n    Set swPart = swModel\n    \n    Dim swSelMgr As SldWorks.SelectionMgr\n    Set swSelMgr = swModel.SelectionManager\n    \n    Dim swSketch As SldWorks.sketch\n    \n    If swSelMgr.GetSelectedObjectType3(1, -1) = swSelectType_e.swSelSKETCHES Then\n        Dim swFeat As SldWorks.Feature\n        Set swFeat = swSelMgr.GetSelectedObject6(1, -1)\n        Set swSketch = swFeat.GetSpecificFeature2\n    Else\n        Err.Raise vbError, "", "Sketch with sketch point rays is not selected"\n    End If\n    \n    Dim vRayStartPts As Variant\n    Dim vRayVecs As Variant\n    \n    GetRaysFromSketchPoints swSketch, vRayStartPts, vRayVecs\n    \n    Dim vBodies As Variant\n    vBodies = swPart.GetBodies2(swBodyType_e.swSolidBody, True)\n    \n    Dim interCount As Integer\n    interCount = swModel.Extension.RayIntersections(vBodies, vRayStartPts, vRayVecs, swRayPtsOpts_e.swRayPtsOptsENTRY_EXIT + swRayPtsOpts_e.swRayPtsOptsTOPOLS, HIT_RADIUS, 0, True)\n    \n    If interCount > 0 Then\n        \n        Dim vInterPoints As Variant\n        vInterPoints = swModel.GetRayIntersectionsPoints()\n        \n        Dim vInterTopol As Variant\n        vInterTopol = swModel.GetRayIntersectionsTopology\n        \n        Dim i As Integer\n        \n        For i = 0 To interCount - 1\n            \n            Dim bodyIndex As Integer\n            Dim rayIndex As Integer\n            Dim interType As Integer\n            Dim dHitPt(2) As Double\n            \n            bodyIndex = CInt(vInterPoints(i * 9))\n            rayIndex = CInt(vInterPoints(i * 9 + 1))\n            interType = CInt(vInterPoints(i * 9 + 2))\n            \n            dHitPt(0) = CDbl(vInterPoints(i * 9 + 3))\n            dHitPt(1) = CDbl(vInterPoints(i * 9 + 4))\n            dHitPt(2) = CDbl(vInterPoints(i * 9 + 5))\n            \n            Dim swEnt As SldWorks.Entity\n            Set swEnt = vInterTopol(i)\n            \n            Debug.Print "Intersecting body: " & vBodies(bodyIndex).Name\n            Debug.Print "Intersecting ray: [" & vRayStartPts(rayIndex * 3) & ";" & vRayStartPts(rayIndex * 3 + 1) & ";" & vRayStartPts(rayIndex * 3 + 2) & "] - [" & vRayVecs(rayIndex * 3) & ";" & vRayVecs(rayIndex * 3 + 1) & ";" & vRayVecs(rayIndex * 3 + 2) & "]"\n            Debug.Print "Intersection type: " & interType\n            \n            Dim swSelData As SldWorks.SelectData\n            Set swSelData = swSelMgr.CreateSelectData\n            \n            swSelData.X = dHitPt(0)\n            swSelData.Y = dHitPt(1)\n            swSelData.Z = dHitPt(2)\n            \n            swEnt.Select4 False, swSelData\n            \n            Stop\n            \n        Next\n        \n    Else\n        Err.Raise vbError, "", "No intersections found"\n    End If\n    \nEnd Sub\n\nSub GetRaysFromSketchPoints(sketch As SldWorks.sketch, rayStartPts As Variant, rayVecs As Variant)\n    \n    If False = sketch.Is3D() Then\n        \n        Dim dRayStartPts() As Double\n        Dim dRayVecs() As Double\n        \n        Dim vSkPoints As Variant\n        vSkPoints = sketch.GetSketchPoints2\n        \n        If Not IsEmpty(vSkPoints) Then\n            \n            Dim swTransform As SldWorks.MathTransform\n            Set swTransform = sketch.ModelToSketchTransform.Inverse\n            \n            Dim swMathUtils As SldWorks.MathUtility\n            Set swMathUtils = swApp.GetMathUtility\n            \n            Dim dVec(2) As Double\n            dVec(0) = 0: dVec(1) = 0: dVec(2) = 1\n            \n            Dim swMathVec As SldWorks.MathVector\n            Set swMathVec = swMathUtils.CreateVector(dVec)\n            Set swMathVec = swMathVec.MultiplyTransform(swTransform)\n            \n            ReDim dRayStartPts((UBound(vSkPoints) + 1) * 3 - 1)\n            ReDim dRayVecs((UBound(vSkPoints) + 1) * 3 - 1)\n            \n            Dim i As Integer\n            \n            For i = 0 To UBound(vSkPoints)\n                \n                Dim swMathPt As SldWorks.MathPoint\n                Dim dPt(2) As Double\n                \n                Dim swSkPt As SldWorks.SketchPoint\n                Set swSkPt = vSkPoints(i)\n                dPt(0) = swSkPt.X: dPt(1) = swSkPt.Y: dPt(2) = 0\n                \n                Set swMathPt = swMathUtils.CreatePoint(dPt)\n                Set swMathPt = swMathPt.MultiplyTransform(swTransform)\n                \n                Dim vData As Variant\n                vData = swMathPt.ArrayData\n                \n                dRayStartPts(i * 3) = vData(0)\n                dRayStartPts(i * 3 + 1) = vData(1)\n                dRayStartPts(i * 3 + 2) = vData(2)\n                \n                vData = swMathVec.ArrayData\n                \n                dRayVecs(i * 3) = vData(0)\n                dRayVecs(i * 3 + 1) = vData(1)\n                dRayVecs(i * 3 + 2) = vData(2)\n                \n            Next\n            \n            rayStartPts = dRayStartPts\n            rayVecs = dRayVecs\n            \n        Else\n            Err.Raise vbError, "", "No sketch points in the specified sketch"\n        End If\n        \n    Else\n        Err.Raise vbError, "", "Only 2D sketch can be used for rays"\n    End If\n    \nEnd Sub\n')))}u.isMDXComponent=!0},38142:(t,e,n)=>{n.d(e,{Z:()=>s});const s=n.p+"assets/images/ray-intersection-entities-536217f335b76fe3d4614aac7e5dc698.png"},68538:(t,e,n)=>{n.d(e,{Z:()=>s});const s=n.p+"assets/images/ray-intersection-result-d20f2ef176f49c8e046b3c747b24a85c.png"}}]);