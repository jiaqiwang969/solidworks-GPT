"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[5015],{3905:(e,s,r)=>{r.d(s,{Zo:()=>p,kt:()=>f});var n=r(67294);function t(e,s,r){return s in e?Object.defineProperty(e,s,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[s]=r,e}function o(e,s){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);s&&(n=n.filter((function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var s=1;s<arguments.length;s++){var r=null!=arguments[s]?arguments[s]:{};s%2?o(Object(r),!0).forEach((function(s){t(e,s,r[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(s){Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(r,s))}))}return e}function a(e,s){if(null==e)return{};var r,n,t=function(e,s){if(null==e)return{};var r,n,t={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],s.indexOf(r)>=0||(t[r]=e[r]);return t}(e,s);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],s.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=n.createContext({}),m=function(e){var s=n.useContext(l),r=s;return e&&(r="function"==typeof e?e(s):i(i({},s),e)),r},p=function(e){var s=m(e.components);return n.createElement(l.Provider,{value:s},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var s=e.children;return n.createElement(n.Fragment,{},s)}},u=n.forwardRef((function(e,s){var r=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=m(r),u=t,f=d["".concat(l,".").concat(u)]||d[u]||c[u]||o;return r?n.createElement(f,i(i({ref:s},p),{},{components:r})):n.createElement(f,i({ref:s},p))}));function f(e,s){var r=arguments,t=s&&s.mdxType;if("string"==typeof e||t){var o=r.length,i=new Array(o);i[0]=u;var a={};for(var l in s)hasOwnProperty.call(s,l)&&(a[l]=s[l]);a.originalType=e,a[d]="string"==typeof e?e:t,i[1]=a;for(var m=2;m<o;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},37176:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>m});var n=r(87462),t=(r(67294),r(3905));const o={title:"Power Shell script to set folder permissions using SOLIDWORKS PDM API",caption:"Set Folder Permissions",description:"Vb.NET Power Shell script to set permissions to specified folder for specified user using SOLIDWORKS PDM API",image:"folder-permissions.png",labels:["permissions","folder"]},i=void 0,a={unversionedId:"codestack/solidworks-pdm-api/permissions/set-folder-permissions/index",id:"codestack/solidworks-pdm-api/permissions/set-folder-permissions/index",title:"Power Shell script to set folder permissions using SOLIDWORKS PDM API",description:"Vb.NET Power Shell script to set permissions to specified folder for specified user using SOLIDWORKS PDM API",source:"@site/docs/codestack/solidworks-pdm-api/permissions/set-folder-permissions/index.md",sourceDirName:"codestack/solidworks-pdm-api/permissions/set-folder-permissions",slug:"/codestack/solidworks-pdm-api/permissions/set-folder-permissions/",permalink:"/solidworks-GPT/docs/codestack/solidworks-pdm-api/permissions/set-folder-permissions/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-pdm-api/permissions/set-folder-permissions/index.md",tags:[],version:"current",frontMatter:{title:"Power Shell script to set folder permissions using SOLIDWORKS PDM API",caption:"Set Folder Permissions",description:"Vb.NET Power Shell script to set permissions to specified folder for specified user using SOLIDWORKS PDM API",image:"folder-permissions.png",labels:["permissions","folder"]},sidebar:"tutorialSidebar",previous:{title:"Managing permissions in SOLIDWORKS Professional PDM API",permalink:"/solidworks-GPT/docs/codestack/solidworks-pdm-api/permissions/"},next:{title:"Troubleshooting SOLIDWORKS PDM Professional API and add-ins",permalink:"/solidworks-GPT/docs/codestack/solidworks-pdm-api/troubleshooting/"}},l={},m=[{value:"set-permissions.ps1",id:"set-permissionsps1",level:2},{value:"set-permissions.cmd",id:"set-permissionscmd",level:2}],p={toc:m},d="wrapper";function c(e){let{components:s,...o}=e;return(0,t.kt)(d,(0,n.Z)({},p,o,{components:s,mdxType:"MDXLayout"}),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"Folder permissions in SOLIDWORKS PDM Administration panel",src:r(38903).Z,width:"877",height:"827"}),"{ width=450 }"),(0,t.kt)("p",null,"This Power shell script allows to set the specified folder permissions for the specified user using SOLIDWORKS PDM API."),(0,t.kt)("p",null,"To use script create PowerShell file and command line file as shown below."),(0,t.kt)("p",null,"It is required to place the SOLIDWORKS PDM interop into the same folder as script files. Refer ",(0,t.kt)("a",{parentName:"p",href:"/docs/codestack/solidworks-pdm-api/getting-started#framework-20-or-older"},"Interops in .NET for Framework 2.0")," article for more information about generating the interop."),(0,t.kt)("p",null,"Scrip arguments:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("em",{parentName:"li"},"vaultName")," - name of the vault to perform the operation"),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("em",{parentName:"li"},"userName")," - user name who performs the operation (should have a permission to assign permissions)"),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("em",{parentName:"li"},"password")," - password for the user name above"),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("em",{parentName:"li"},"folderName")," - full path to folder to change permission for"),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("em",{parentName:"li"},"targetUserName")," - user name to change permissions for"),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("em",{parentName:"li"},"permissions")," - permissions to assign. Integer number which represents a single permissions or a group of permissions. Permissions numbers defined in ",(0,t.kt)("a",{parentName:"li",href:"https://help.solidworks.com/2018/english/api/epdmapi/EPDM.Interop.epdm~EPDM.Interop.epdm.EdmRightFlags.html"},"EdmRightFlags"),". Sum the values of required permissions to assign multiple values (e.g. set 1 for read files permission and 15 for read, check out, delete and add files ","[1 + 2 + 4 + 8]",")")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'> set-permissions.cmd MyVault admin pwd "D:\\My Vaults\\Vault1\\Folder1" user1 15\n')),(0,t.kt)("h2",{id:"set-permissionsps1"},"set-permissions.ps1"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ps1"},'$vaultName=$args[0]\n$userName=$args[1]\n$password=$args[2]\n$folderName=$args[3]\n$targetUserName=$args[4]\n$permissions=$args[5]\n\n$ScriptDir = Split-Path $script:MyInvocation.MyCommand.Path\n\n$Assem = ( \n    $ScriptDir + "\\Interop.EdmLib.dll"\n    ) \n    \n$Source = @"\nImports System\nImports System.IO\nImports EdmLib\n\nPublic Class SwPdmTools\n\n    Shared Sub New()\n        AddHandler AppDomain.CurrentDomain.AssemblyResolve, AddressOf OnAssemblyResolve\n    End Sub\n\n    Public Shared Sub LoadLibrary(ParamArray libs As Object())\n        For Each [lib] As String In libs\n            Console.WriteLine(String.Format("Loading library: {0}", [lib]))\n            Dim assm As System.Reflection.Assembly = System.Reflection.Assembly.LoadFrom([lib])\n            Console.WriteLine(assm.GetName().ToString())\n        Next\n    End Sub\n\n    Private Shared Function OnAssemblyResolve(ByVal sender As Object, ByVal args As ResolveEventArgs) As System.Reflection.Assembly\n        For Each assm As System.Reflection.Assembly In AppDomain.CurrentDomain.GetAssemblies()\n\n            If assm.GetName().ToString() = args.Name Then\n                Return assm\n            End If\n        Next\n\n        Return Nothing\n    End Function\n    \n    Public Shared Sub SetFolderPermissions(vaultName As String, userName As String, password As String, folderName As String, targetUserName As String, permissions As Integer)\n\n        Try\n            Dim vault As IEdmVault7 = New EdmVault5\n            vault.Login(userName, password, vaultName)\n\n            If vault.IsLoggedIn Then\n\n                Dim folder As IEdmFolder7 = vault.GetFolderFromPath(folderName)\n\n                If Not folder Is Nothing Then\n\n                    Dim userMgr As IEdmUserMgr7\n                    userMgr = vault.CreateUtility(EdmUtility.EdmUtil_UserMgr)\n\n                    Dim targetUser As IEdmUser5 = userMgr.GetUser(targetUserName)\n\n                    If Not targetUser Is Nothing Then\n\n                        Dim perm As EdmFolderPermission = New EdmFolderPermission()\n                        perm.meOwnerType = EdmObjectType.EdmObject_User\n                        perm.mlOwnerID = targetUser.ID\n                        perm.mlEdmRightFlag = permissions\n                        perm.mlFolderID = folder.ID\n                        userMgr.SetFolderPermissions(New EdmFolderPermission() {perm})\n\n                    Else\n                        Throw New NullReferenceException("Failed to find a user")\n                    End If\n\n                Else\n                    Throw New NullReferenceException("Failed to find a folder")\n                End If\n            Else\n                Throw New NullReferenceException("Failed to login to vault")\n            End If\n\n        Catch ex As Exception\n            Console.ForegroundColor = ConsoleColor.DarkRed\n            Console.WriteLine(ex.Message)\n            Console.ResetColor()\n        End Try\n\n    End Sub\n\nEnd Class\n"@\n\nAdd-Type -TypeDefinition $Source -ReferencedAssemblies $Assem -Language VisualBasic\n\n[SwPdmTools]::LoadLibrary($Assem)\n[SwPdmTools]::SetFolderPermissions($vaultName, $userName, $password, $folderName, $targetUserName, $permissions)\n')),(0,t.kt)("h2",{id:"set-permissionscmd"},"set-permissions.cmd"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-cmd"},'SET vaultName=%1\nSET userName=%2\nSET password=%3\nSET folderName=%4\nSET targetUserName=%5\nSET permissions=%6\n\nPowerShell -NoProfile -ExecutionPolicy Bypass -File "%~dp0set-permissions.ps1" %vaultName% %userName% %password% %folderName% %targetUserName% %permissions%\n')))}c.isMDXComponent=!0},38903:(e,s,r)=>{r.d(s,{Z:()=>n});const n=r.p+"assets/images/folder-permissions-cac42c3e8332348938bbd54416b6e8c9.png"}}]);