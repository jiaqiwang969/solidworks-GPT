"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[14488],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=a,f=p["".concat(c,".").concat(u)]||p[u]||m[u]||r;return n?o.createElement(f,i(i({ref:t},l),{},{components:n})):o.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},49367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var o=n(87462),a=(n(67294),n(3905));const r={title:"Add move-copy body feature with coincident mate using SOLIDWORKS API",caption:"Add Move-Copy Body Feature With Mate",description:"C# VSTA macro example to create move-copy body feature and add coincident mate between the largest face of the body and front plane using SOLIDWORKS API",image:"move-copy-body-mate-pmp.png",labels:["move-copy body","mates"]},i=void 0,s={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/features-manager/move-copy-body-mate/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/features-manager/move-copy-body-mate/index",title:"Add move-copy body feature with coincident mate using SOLIDWORKS API",description:"C# VSTA macro example to create move-copy body feature and add coincident mate between the largest face of the body and front plane using SOLIDWORKS API",source:"@site/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/features-manager/move-copy-body-mate/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/features-manager/move-copy-body-mate",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/features-manager/move-copy-body-mate/",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/features-manager/move-copy-body-mate/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/features-manager/move-copy-body-mate/index.md",tags:[],version:"current",frontMatter:{title:"Add move-copy body feature with coincident mate using SOLIDWORKS API",caption:"Add Move-Copy Body Feature With Mate",description:"C# VSTA macro example to create move-copy body feature and add coincident mate between the largest face of the body and front plane using SOLIDWORKS API",image:"move-copy-body-mate-pmp.png",labels:["move-copy body","mates"]},sidebar:"tutorialSidebar",previous:{title:"Edit feature in the context of the assembly using SOLIDWORKS API",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/features-manager/modify-feature-definition-in-context/"},next:{title:"VBA macro to rename features based on type names using SOLIDWORKS API",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/features-manager/rename-features-by-type-name/"}},c={},d=[],l={toc:d},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Move-Copy Body Property Manager Page with mates added",src:n(67485).Z,width:"249",height:"764"}),"{ width=150 }"),(0,a.kt)("p",null,"C# VSTA macro example which finds the largest planar face of the selected body and inserts move-copy body feature in part and adds coincident mate with Front Plane using SOLIDWORKS API."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Open part document"),(0,a.kt)("li",{parentName:"ul"},"Select any body which contains the planar face"),(0,a.kt)("li",{parentName:"ul"},"Run the macro. As the result move-copy body feature is inserted via ",(0,a.kt)("a",{parentName:"li",href:"https://help.solidworks.com/2016/english/api/sldworksapi/solidworks.interop.sldworks~solidworks.interop.sldworks.ifeaturemanager~insertmovecopybody2.html"},"IFeatureManager::InsertMoveCopyBody2")," SOLIDWORKS API method. Then coincident mate is added between the largest face of the body and front plane using ",(0,a.kt)("a",{parentName:"li",href:"https://help.solidworks.com/2016/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.IMoveCopyBodyFeatureData~AddMate.html"},"IMoveCopyBodyFeatureData::AddMate")," SOLIDWORKS API method.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'using SolidWorks.Interop.sldworks;\nusing SolidWorks.Interop.swconst;\nusing System;\nusing System.Linq;\nusing System.Runtime.InteropServices;\n\nnamespace MoveBodyMate\n{\n    public partial class SolidWorksMacro\n    {\n        public void Main()\n        {\n            try\n            {\n                var model = swApp.IActiveDoc2;\n                var body = model.ISelectionManager.GetSelectedObject6(1, -1) as IBody2;\n\n                if (body == null)\n                {\n                    throw new NullReferenceException("Select body to move");\n                }\n\n                var plane = FindFrontPlane(model);\n                var face = FindLargestPlanarFace(body);\n\n                AddCoincidentMate(model, body, plane as IEntity, face as IEntity);\n            }\n            catch(Exception ex)\n            {\n                swApp.SendMsgToUser2(ex.Message, (int)swMessageBoxIcon_e.swMbStop, (int)swMessageBoxBtn_e.swMbOk);\n            }\n        }\n\n        private static void AddCoincidentMate(ModelDoc2 model, IBody2 body, IEntity mateEnt, IEntity mateEntOnBody)\n        {\n            var selData = model.ISelectionManager.CreateSelectData();\n            selData.Mark = 1;\n\n            if (!body.Select2(false, selData))\n            {\n                throw new InvalidOperationException("Failed to select body");\n            }\n\n            var moveCopyBodyFeat = model.FeatureManager.InsertMoveCopyBody2(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, 1);\n\n            var featData = moveCopyBodyFeat.GetDefinition() as IMoveCopyBodyFeatureData;\n\n            if (featData.AccessSelections(model, null))\n            {\n                int err;\n\n                var mate = featData.AddMate(new DispatchWrapper[]\n                {\n                    new DispatchWrapper(mateEnt),\n                    new DispatchWrapper(mateEntOnBody)\n                }, (int)swMateType_e.swMateCOINCIDENT, (int)swMateAlign_e.swMateAlignCLOSEST, 0, 0, out err);\n\n                if (mate == null)\n                {\n                    throw new NullReferenceException(string.Format("Failed to add mate: {0}", (swAddMateError_e)err));\n                }\n\n                if (!moveCopyBodyFeat.ModifyDefinition(featData, model, null))\n                {\n                    throw new InvalidOperationException("Failed to apply feature changes");\n                }\n            }\n            else\n            {\n                throw new InvalidOperationException("Failed to access the definition");\n            }\n        }\n\n        private IFeature FindFrontPlane(IModelDoc2 model)\n        {\n            var feat = model.IFirstFeature();\n\n            while (feat != null && feat.GetTypeName2() != "RefPlane")\n            {\n                feat = feat.IGetNextFeature();\n            }\n\n            if (feat == null)\n            {\n                throw new NullReferenceException("Failed to find the front plane");\n            }\n\n            return feat;\n        }\n\n        private IFace2 FindLargestPlanarFace(IBody2 body)\n        {\n            var faces = body.GetFaces() as object[];\n\n            if (faces == null)\n            {\n                throw new NullReferenceException("Body doesn\'t contain faces");\n            }\n\n            var face = faces.Cast<IFace2>()\n                .Where(f => f.IGetSurface().IsPlane())\n                .OrderBy(f => f.GetArea()).LastOrDefault();\n\n            if (face == null)\n            {\n                throw new NullReferenceException("There are no planar faces in this body");\n            }\n\n            return face;\n        }\n\n        public SldWorks swApp;\n    }\n}\n\n\n')))}m.isMDXComponent=!0},67485:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/move-copy-body-mate-pmp-ad29fa4152244c41ef21e2d538d7f15c.png"}}]);