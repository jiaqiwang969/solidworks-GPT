"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[25269],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=l(t),p=o,g=m["".concat(c,".").concat(p)]||m[p]||d[p]||i;return t?r.createElement(g,s(s({ref:n},u),{},{components:t})):r.createElement(g,s({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[m]="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4758:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const i={layout:"sw-tool",title:"Macro feature to increment the numeric value in the note via SOLIDWORKS API",caption:"Increment The Numeric Value In The Note",description:"This macro increments the numeric value of the notes by matching regular expression (e.g. incrementing the revision) using SOLIDWORKS API",image:"drawing-revision-incremented.png",labels:["note","revision","increment","regular expression","regex","tag"],group:"Drawing"},s=void 0,a={unversionedId:"codestack/solidworks-api/document/notes/increment-revision/index",id:"codestack/solidworks-api/document/notes/increment-revision/index",title:"Macro feature to increment the numeric value in the note via SOLIDWORKS API",description:"This macro increments the numeric value of the notes by matching regular expression (e.g. incrementing the revision) using SOLIDWORKS API",source:"@site/docs/codestack/solidworks-api/document/notes/increment-revision/index.md",sourceDirName:"codestack/solidworks-api/document/notes/increment-revision",slug:"/codestack/solidworks-api/document/notes/increment-revision/",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/document/notes/increment-revision/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/document/notes/increment-revision/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"Macro feature to increment the numeric value in the note via SOLIDWORKS API",caption:"Increment The Numeric Value In The Note",description:"This macro increments the numeric value of the notes by matching regular expression (e.g. incrementing the revision) using SOLIDWORKS API",image:"drawing-revision-incremented.png",labels:["note","revision","increment","regular expression","regex","tag"],group:"Drawing"},sidebar:"tutorialSidebar",previous:{title:"Example to format portions of the note text with different formats",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/document/notes/format-note-text/"},next:{title:"Macro to print all notes to the text file from SOLIDWORKS drawing",permalink:"/solidworks-GPT/docs/codestack/solidworks-api/document/notes/print-to-file/"}},c={},l=[],u={toc:l},m="wrapper";function d(e){let{components:n,...i}=e;return(0,o.kt)(m,(0,r.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Revision number in the title block is incremented",src:t(15158).Z,width:"928",height:"380"}),"{ width=300 }"),(0,o.kt)("p",null,"This macro increments the numeric value of the notes using SOLIDWORKS API. This can be useful if it required to increment the revision for note or notes without the need of manually selecting and changing the note. This macro can be also used in the batch processing software."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Revision in title block is incremented by running macro from the macro button",src:t(76742).Z,width:"400",height:"279"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Numeric value is matched by specified ",(0,o.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Regular_expression"},"regular expression"),". It is possible to modify the regular expression to match specific numeric values. Note can contain free text (in this case only numeric part will be updated as per specified regular expression)"),(0,o.kt)("li",{parentName:"ul"},"It is required to add the text tag to the note in order to increment its value. Follow ",(0,o.kt)("a",{parentName:"li",href:"/docs/codestack/solidworks-api/document/notes/tag-selected-note"},"Add Tag To Selected Note")," example of instructions for adding the tag to the note."),(0,o.kt)("li",{parentName:"ul"},"By default the numeric value is incremented by 1, but this can be changed by modifying the value of ",(0,o.kt)("em",{parentName:"li"},"increment")," parameter of the ",(0,o.kt)("em",{parentName:"li"},"IncrementNoteValue")," function.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\nDim swModel As SldWorks.ModelDoc2\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Set swModel = swApp.ActiveDoc\n    \n    IncrementNoteValue "_CodeStackNote_", "\\d+", 1\n    \nEnd Sub\n\nSub IncrementNoteValue(noteTag As String, pattern As String, increment As Double)\n    \n    Dim swNote As SldWorks.Note\n    Set swNote = FindNodeByTag(swModel, noteTag)\n    \n    If Not swNote Is Nothing Then\n        Dim newText As String\n        newText = IncrementNumericMatches(swNote.GetText(), pattern, increment)\n        swNote.SetText newText\n    End If\n    \nEnd Sub\n\nFunction IncrementNumericMatches(text As String, pattern As String, increment As Double) As String\n    \n    Dim resultText As String\n    resultText = text\n    \n    Dim regEx As Object\n    Set regEx = CreateObject("VBScript.RegExp")\n    \n    regEx.Global = True\n    regEx.IgnoreCase = True\n    regEx.pattern = pattern\n    \n    Dim regExMatches As Object\n    Set regExMatches = regEx.Execute(text)\n    \n    If regExMatches.Count > 0 Then\n        \n        Dim i As Integer\n        \n        Dim offset As Integer\n        \n        For i = 0 To regExMatches.Count - 1\n            \n            Dim regExMatch As Object\n            Set regExMatch = regExMatches(i)\n            \n            Dim newValue As Double\n            newValue = CDbl(regExMatch.Value) + increment\n            \n            resultText = Left(resultText, regExMatch.FirstIndex + offset) & newValue & Right(resultText, Len(resultText) - regExMatch.FirstIndex - regExMatch.Length - offset)\n            \n            offset = offset + Len(CStr(newValue)) - regExMatch.Length\n        \n        Next\n        \n    End If\n    \n    IncrementNumericMatches = resultText\n\nEnd Function\n\nFunction FindNodeByTag(model As SldWorks.ModelDoc2, tag As String) As SldWorks.Note\n    \n    If tag <> "" Then\n        \n        Dim vAnnots As Variant\n        vAnnots = model.Extension.GetAnnotations\n        \n        Dim swNote As SldWorks.Note\n        Dim i As Integer\n        \n        If Not IsEmpty(vAnnots) Then\n            \n            For i = 0 To UBound(vAnnots)\n                \n                Dim swAnn As SldWorks.Annotation\n                Set swAnn = vAnnots(i)\n                \n                If swAnn.GetType() = swAnnotationType_e.swNote Then\n                    Set swNote = swAnn.GetSpecificAnnotation\n                    If swNote.TagName = tag Then\n                        Set FindNodeByTag = swNote\n                        Exit Function\n                    End If\n                End If\n                \n            Next\n        End If\n        \n        If model.GetType() = swDocumentTypes_e.swDocDRAWING Then\n        \n            Dim swDraw As SldWorks.DrawingDoc\n            Set swDraw = model\n        \n            Dim vSheets As Variant\n            vSheets = swDraw.GetViews()\n            \n            For i = 0 To UBound(vSheets)\n                \n                Dim vViews As Variant\n                vViews = vSheets(i)\n                \n                Dim j As Integer\n                \n                For j = 0 To UBound(vViews)\n                \n                    Dim swView As SldWorks.View\n                    Set swView = vViews(j)\n                \n                    Dim vNotes As Variant\n                    \n                    vNotes = swView.GetNotes()\n                    \n                    Dim k As Integer\n                    \n                    For k = 0 To UBound(vNotes)\n                        \n                        Set swNote = vNotes(k)\n                        \n                        If swNote.TagName = tag Then\n                            Set FindNodeByTag = swNote\n                            Exit Function\n                        End If\n                    \n                    Next\n                \n                Next\n                \n            Next\n            \n        End If\n        \n    End If\n    \nEnd Function\n')))}d.isMDXComponent=!0},15158:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/drawing-revision-incremented-b735e4e2073e03755c44f2aba429c3f5.png"},76742:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/increment-revision-macro-65d58d3196a9f9427a5486cdf7ae4bc5.gif"}}]);