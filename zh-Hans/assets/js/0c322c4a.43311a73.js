"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[68723],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var s=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,s,o=function(e,t){if(null==e)return{};var n,s,o={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=p(n),u=o,m=c["".concat(l,".").concat(u)]||c[u]||h[u]||i;return n?s.createElement(m,a(a({ref:t},d),{},{components:n})):s.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[c]="string"==typeof e?e:o,a[1]=r;for(var p=2;p<i;p++)a[p]=n[p];return s.createElement.apply(null,a)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},20717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var s=n(87462),o=(n(67294),n(3905));const i={layout:"sw-tool",title:"Macro to import STEP files and save as SOLIDWORKS files using a sub-folder with the same name",caption:"Import STEP files",description:"VBA macro to import STEP files and save as SOLIDWORKS files using a sub-folder with the same name.",image:"import-step-icon.svg",labels:["STEP","Import","Batch+"],group:"Import/Export"},a=void 0,r={unversionedId:"codestack/solidworks-api/import-export/import-step/index",id:"codestack/solidworks-api/import-export/import-step/index",title:"Macro to import STEP files and save as SOLIDWORKS files using a sub-folder with the same name",description:"VBA macro to import STEP files and save as SOLIDWORKS files using a sub-folder with the same name.",source:"@site/docs/codestack/solidworks-api/import-export/import-step/index.md",sourceDirName:"codestack/solidworks-api/import-export/import-step",slug:"/codestack/solidworks-api/import-export/import-step/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/import-export/import-step/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/import-export/import-step/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"Macro to import STEP files and save as SOLIDWORKS files using a sub-folder with the same name",caption:"Import STEP files",description:"VBA macro to import STEP files and save as SOLIDWORKS files using a sub-folder with the same name.",image:"import-step-icon.svg",labels:["STEP","Import","Batch+"],group:"Import/Export"},sidebar:"tutorialSidebar",previous:{title:"Export part or selected component to STL using SOLIDWORKS API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/import-export/export-stl/"},next:{title:"Macro to import foreign file into active part using SOLIDWORKS API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/import-export/import-to-active-part/"}},l={},p=[{value:"Context situation:",id:"context-situation",level:2},{value:"SOLIDWORKS has a tool for this: Task scheduler",id:"solidworks-has-a-tool-for-this-task-scheduler",level:2},{value:"Batch+ with simple macro",id:"batch-with-simple-macro",level:2},{value:"PREREQUISITES",id:"prerequisites",level:2}],d={toc:p},c="wrapper";function h(e){let{components:t,...i}=e;return(0,o.kt)(c,(0,s.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Author: ",(0,o.kt)("a",{parentName:"p",href:"https://www.linkedin.com/in/eddyalleman/"},"Eddy Alleman")," (",(0,o.kt)("a",{parentName:"p",href:"https://www.edalsolutions.be/index.php/en/"},"EDAL Solutions"),")"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Options used to import STEP files",src:n(74446).Z,width:"298",height:"594"}),"{ width=400 }"),(0,o.kt)("h2",{id:"context-situation"},"Context situation:"),(0,o.kt)("p",null,"Suppose we have hundreds of STEP files, all in the same folder from our supplier.\nWe want to build a library out of them to reuse again and again in our designs.\nTo keep the files well separated one from another, we want each STEP file exported in a separate folder per type."),(0,o.kt)("h2",{id:"solidworks-has-a-tool-for-this-task-scheduler"},"SOLIDWORKS has a tool for this: Task scheduler"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Task scheduler import",src:n(69828).Z,width:"196",height:"236"}),"{ width=350 }"),(0,o.kt)("p",null,"But all step files will end up in the same folder, unless we put the STEP files in separate folders first and then the exported Solidworks files to those subfolders.\nThis is a lot of manual work."),(0,o.kt)("p",null,"Also we don't know for sure if there are duplicate files and if those files have different level of detail.\nWe want to be able to choose the best ones after importing and not just overwrite already processed ones."),(0,o.kt)("p",null,"So how can we automate this and avoid making all those subfolders manually?"),(0,o.kt)("h2",{id:"batch-with-simple-macro"},"Batch+ with simple macro"),(0,o.kt)("p",null,"Batch+ is a free tool, that is part of CAD+ and it handles a lot of the peculiarities when batch processing files.\nWe will choose this option because of the easy setup and full control over the process."),(0,o.kt)("p",null,"The following macro determines if the step is an assembly or a part file.\nIf it is an assembly then the components will be saved as separate part files (depending on system options, see image above)."),(0,o.kt)("p",null,"The macro creates a subfolder in the same location as and with the same name as the step file.\nThis helps in separating the files that belong together from other imports.\nIf you don't put them in a new folder every time, you could get the same file twice\nand the last save overwrites the previous ones. Be sure that they are the same in that case."),(0,o.kt)("h2",{id:"prerequisites"},"PREREQUISITES"),(0,o.kt)("p",null,'(1) make sure you don\'t have system option set to:\nPrompt user to select document template\nUse instead : "Always use these default document templates"\nOtherwise SolidWorks keeps asking to select a document template.'),(0,o.kt)("p",null,"(2) Set system options > import > Enable 3D interconnect OFF\nDocumentation about 3D interconnect :\nInsert proprietary CAD data directly into a SOLIDWORKS assembly without converting it to a SOLIDWORKS file.\nAnd converting is exactly what we want. 3D interconnect just makes a link to the STEP file and updates if needed."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Settings to use in Batch+",src:n(35054).Z,width:"1109",height:"95"}),"{ width=800 }"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Option Explicit\n\n\'Overwrites if solidworks files already exist in case they have been processed before.\nConst OVERWRITE As Boolean = False\n\n\'set the path you want to save to\nConst DESTINATION_PATH As String = "C:\\temp"\n\n\nSub main()\n\ntry_:\n\n    \'Uncomment the following line if you want to debug into this code during running Batch+\n    \'Debug.Assert False\n    \n    On Error GoTo catch_\n    \n    \'test if DESTINATION PATH exists\n    If FolderExists(DESTINATION_PATH) Then\n\n        Dim swApp As SldWorks.SldWorks\n        Set swApp = Application.SldWorks\n        \n        \'You have to open a step file first, without saving it if you want to test without Batch+\n        Dim swModel As SldWorks.ModelDoc2\n        Set swModel = swApp.ActiveDoc\n        \n        If Not swModel Is Nothing Then\n                    \n             \'--- Get file name without extension and path\n             \'only get the document name (which is displayed\xa0in the title bar of SolidWorks)\n             Dim swxFilenaam As String\n             swxFilenaam = swModel.GetTitle\n             \n             \'--- Get file extension\n             \'Determine if the step file was an assembly or a part file to set the file extension correctly\n             Dim Extension As String\n             Select Case swModel.GetType\n                \n                Case swDocPART:\n                    Extension = ".SLDPRT"\n                \n                Case swDocASSEMBLY:\n                    Extension = ".SLDASM"\n                    \n             End Select\n            \n            \'--- Get path\n             Dim newPath As String\n             newPath = DESTINATION_PATH\n          \n             \n            \'Add the name of the subfolder\n             Dim subfoldername As String            \n             subfoldername = "\\" + swxFilenaam + "\\"\n             newPath = DESTINATION_PATH + subfoldername    \n            \n            \'--- if folder doesn\'t exist already create it\n             CreateFolderIfNotExisting (newPath)\n            \n            \'--- Create the name of the file to save to\n            swxFilenaam = newPath + swxFilenaam + Extension\n            \n            \'--- if swxFilenaam exists already and OVERWRITE = False\n            If FileExists(swxFilenaam) And OVERWRITE = False Then\n                \'do nothing\n            Else\n        \n                \' make sure nothing is selected, otherwise only selected entities are saved\n                swModel.ClearSelection2 False\n        \n        \'--- save the step file\n                Dim lErrors As Long\n                Dim lWarnings As Long\n                Dim boolstatus As Boolean\n                boolstatus = swModel.Extension.SaveAs(swxFilenaam, 0, swSaveAsOptions_e.swSaveAsOptions_Silent, Nothing, lErrors, lWarnings)\n                Debug.Assert boolstatus\n                                      \n                \'swApp.CloseDoc (swxFilenaam)\'don\'t use it , let Batch+ handle it\n             \n             End If \'File exists already\n             \n        Else\n            \n            MsgBox "No document open"\n            \n        End If \'swModel Nothing\n    \n    Else\n    \n        MsgBox DESTINATION_PATH + "doesn\'t exist"\n        \n    End If \'DESTINATION_PATH exists\n    \ncatch_:\n\n    Debug.Print "Error: " & Err.Number & ":" & Err.source & ":" & Err.Description\n    GoTo finally_\n    \nfinally_:\n    Debug.Print "FINISHED MACRO ImportStep"\n    \nEnd Sub\n\nFunction CreateFolderIfNotExisting(newPath As String)\n\n    If FolderExists(newPath) Then\n         \'do nothing\n    Else\n        MkDir (newPath)\n        Debug.Print "Path created : " + newPath\n    End If\n\nEnd Function\n\nFunction FolderExists(newPath As String) As Boolean\n\n    If Dir(newPath, vbDirectory) = "" Then\n        Debug.Print "Path doesn\'t exist : " + newPath\n        FolderExists = False\n    Else\n        Debug.Print "Path exists : " + newPath\n        FolderExists = True\n    End If\n\nEnd Function\n\nFunction FileExists(newPath As String) As Boolean\n\n    If Dir(newPath) = "" Then\n        Debug.Print "File doesn\'t exist : " + newPath\n        FileExists = False\n    Else\n        Debug.Print "File exists : " + newPath\n        FileExists = True\n    End If\n\nEnd Function\n\n')))}h.isMDXComponent=!0},35054:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/batch-plus-settings-2cdda1b06cc4571175aa64732d369cb0.png"},74446:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/import-step-options-cde265d03bd00300426c79e6d450ddea.png"},69828:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/task-scheduler-import-96026560b6c470585dbe006cfd72c75c.png"}}]);