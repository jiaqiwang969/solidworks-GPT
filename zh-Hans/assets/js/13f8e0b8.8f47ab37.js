"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[97138],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>h});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=r.createContext({}),d=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},c=function(n){var e=d(n.components);return r.createElement(l.Provider,{value:e},n.children)},p="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},w=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,l=n.parentName,c=a(n,["components","mdxType","originalType","parentName"]),p=d(t),w=o,h=p["".concat(l,".").concat(w)]||p[w]||u[w]||i;return t?r.createElement(h,s(s({ref:e},c),{},{components:t})):r.createElement(h,s({ref:e},c))}));function h(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,s=new Array(i);s[0]=w;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=n,a[p]="string"==typeof n?n:o,s[1]=a;for(var d=2;d<i;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}w.displayName="MDXCreateElement"},11973:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=t(87462),o=(t(67294),t(3905));const i={layout:"sw-tool",title:"\u6253\u5f00\u6d3b\u52a8\u6587\u6863\u6216\u9009\u5b9a\u7ec4\u4ef6\u7684\u5173\u8054\u56fe\u7eb8",caption:"\u6253\u5f00\u5173\u8054\u56fe\u7eb8"},s=void 0,a={unversionedId:"codestack/solidworks-api/document/drawing/open-associated-drawing/index",id:"codestack/solidworks-api/document/drawing/open-associated-drawing/index",title:"\u6253\u5f00\u6d3b\u52a8\u6587\u6863\u6216\u9009\u5b9a\u7ec4\u4ef6\u7684\u5173\u8054\u56fe\u7eb8",description:"VBA\u5b8f\uff0c\u7528\u4e8e\u6253\u5f00\u7ec4\u4ef6\u7684\u5173\u8054\u56fe\u7eb8\uff0c\u65e0\u8bba\u547d\u540d\u5982\u4f55\uff08\u53ef\u4ee5\u9009\u62e9\u4ee5\u8be6\u56fe\u6a21\u5f0f\u6253\u5f00\u56fe\u7eb8\uff09",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/document/drawing/open-associated-drawing/index.md",sourceDirName:"codestack/solidworks-api/document/drawing/open-associated-drawing",slug:"/codestack/solidworks-api/document/drawing/open-associated-drawing/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/drawing/open-associated-drawing/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/document/drawing/open-associated-drawing/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"\u6253\u5f00\u6d3b\u52a8\u6587\u6863\u6216\u9009\u5b9a\u7ec4\u4ef6\u7684\u5173\u8054\u56fe\u7eb8",caption:"\u6253\u5f00\u5173\u8054\u56fe\u7eb8"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u9501\u5b9a\u5de5\u4f5c\u8868\u683c\u5f0f\u7684\u5b8f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/drawing/lock-sheet-format/"},next:{title:"\u6253\u5f00\u7ed8\u56fe\u89c6\u56fe\u5f15\u7528\u6587\u6863\u7684VBA\u5b8f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/drawing/open-referenced-model/"}},l={},d=[{value:"group: \u56fe\u7eb8",id:"group-\u56fe\u7eb8",level:2}],c={toc:d},p="wrapper";function u(n){let{components:e,...t}=n;return(0,o.kt)(p,(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"VBA\u5b8f\uff0c\u7528\u4e8e\u6253\u5f00\u7ec4\u4ef6\u7684\u5173\u8054\u56fe\u7eb8\uff0c\u65e0\u8bba\u547d\u540d\u5982\u4f55\uff08\u53ef\u4ee5\u9009\u62e9\u4ee5\u8be6\u56fe\u6a21\u5f0f\u6253\u5f00\u56fe\u7eb8\uff09\nimage: open-associated-drawing.svg\nlabels: ","[\u56fe\u7eb8, \u6253\u5f00, \u8be6\u56fe]"),(0,o.kt)("h2",{id:"group-\u56fe\u7eb8"},"group: \u56fe\u7eb8"),(0,o.kt)("p",null,"\u8fd9\u4e2aVBA\u5b8f\u5141\u8bb8\u6253\u5f00\u88c5\u914d\u4f53\u4e2d\u9009\u5b9a\u7ec4\u4ef6\u7684\u5173\u8054\u56fe\u7eb8\uff0c\u6216\u8005\u5982\u679c\u6ca1\u6709\u9009\u5b9a\u4efb\u4f55\u5185\u5bb9\uff0c\u5219\u6253\u5f00\u6d3b\u52a8\u6587\u6863\u3002"),(0,o.kt)("p",null,"\u4e0e\u5f00\u7bb1\u5373\u7528\u7684\u529f\u80fd\u4e0d\u540c\uff0c\u6b64\u5b8f\u6ca1\u6709\u4e0e\u7ec4\u4ef6\u540c\u540d\u5e76\u4f4d\u4e8e\u540c\u4e00\u6587\u4ef6\u5939\u4e2d\u7684\u56fe\u7eb8\u7684\u9650\u5236\u3002\u6b64\u5b8f\u5c06\u5728\u5f53\u524d\u6587\u4ef6\u5939\uff08\u6d3b\u52a8\u6587\u6863\u7684\u6587\u4ef6\u5939\uff09\u7684\u6240\u6709\u5b50\u6587\u4ef6\u5939\u4e2d\u67e5\u627e\u6240\u6709\u56fe\u7eb8\uff0c\u65e0\u8bba\u8fd9\u4e9b\u56fe\u7eb8\u662f\u5426\u4ee5\u7ec4\u4ef6\u547d\u540d\u3002"),(0,o.kt)("p",null,"\u6b64\u5b8f\u6709\u4e00\u4e2a\u9009\u9879\uff0c\u53ef\u4ee5\u4ee5\u89e3\u6790\u6216\u8be6\u56fe\u6a21\u5f0f\u6253\u5f00\u56fe\u7eb8\u3002\u4fee\u6539 ",(0,o.kt)("strong",{parentName:"p"},"OPEN_DRAWING_DETAILING")," \u7684\u503c\u4ee5\u66f4\u6539\u884c\u4e3a\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},"Const OPEN_DRAWING_DETAILING As Boolean = True '\u4ee5\u8be6\u56fe\u6a21\u5f0f\u6253\u5f00\u56fe\u7eb8\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Const OPEN_DRAWING_DETAILING As Boolean = False\nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \ntry_:\n    On Error GoTo catch_\n    \n    If Not swModel Is Nothing Then\n    \n        If swModel.GetType() <> swDocumentTypes_e.swDocASSEMBLY And _\n            swModel.GetType() <> swDocumentTypes_e.swDocPART Then\n            Err.Raise vbError, "", "\u6d3b\u52a8\u6587\u6863\u4e0d\u662f\u96f6\u4ef6\u6216\u88c5\u914d\u4f53"\n        End If\n                \n        Dim vDrawings As Variant\n        \n        vDrawings = FindDrawings(swModel)\n                \n        OpenDrawings vDrawings\n        \n        GoTo finally_\n        \n    Else\n        Err.Raise vbError, "", "\u8bf7\u6253\u5f00\u88c5\u914d\u4f53\u6216\u56fe\u7eb8\u6587\u6863"\n    End If\n\ncatch_:\n    swApp.SendMsgToUser2 Err.Description, swMessageBoxIcon_e.swMbStop, swMessageBoxBtn_e.swMbOk\nfinally_:\n \nEnd Sub\n\nSub OpenDrawings(vPaths As Variant)\n    \n    If Not IsEmpty(vPaths) Then\n            \n        Dim i As Integer\n        \n        For i = 0 To UBound(vPaths)\n            \n            Dim drwFilePath As String\n            drwFilePath = vPaths(i)\n        \n            Dim swDocSpec As SldWorks.DocumentSpecification\n            Set swDocSpec = swApp.GetOpenDocSpec(drwFilePath)\n            \n            If OPEN_DRAWING_DETAILING Then\n                swDocSpec.DetailingMode = True\n            End If\n            \n            Dim swDraw As SldWorks.ModelDoc2\n            Set swDraw = swApp.OpenDoc7(swDocSpec)\n            \n            If swDraw Is Nothing Then\n                Err.Raise vbError, "", "\u65e0\u6cd5\u6253\u5f00\u56fe\u7eb8\u3002\u9519\u8bef\u4ee3\u7801\uff1a" & swDocSpec.Error\n            End If\n            \n        Next\n        \n    Else\n        Err.Raise vbError, "", "\u672a\u9009\u62e9\u7ec4\u4ef6"\n    End If\n    \nEnd Sub\n\nFunction FindDrawings(model As SldWorks.ModelDoc2) As Variant\n    \n    Dim drwFilePaths() As String\n        \n    Dim vDrws As Variant\n    Dim i As Integer\n    Dim j As Integer\n    \n    Dim swSelMgr As SldWorks.SelectionMgr\n    Set swSelMgr = model.SelectionManager\n    \n    Dim rootDir As String\n    rootDir = Left(model.GetPathName(), InStrRev(model.GetPathName(), "\\"))\n    \n    If swSelMgr.GetSelectedObjectCount2(-1) = 0 Then\n        \n        vDrws = FindAssociatedDrawings(rootDir, model.GetPathName())\n        ReDim drwFilePaths(UBound(vDrws))\n        \n        For j = 0 To UBound(vDrws)\n            drwFilePaths(j) = vDrws(j)\n        Next\n        \n    Else\n        \n        For i = 1 To swSelMgr.GetSelectedObjectCount2(-1)\n        \n            Dim path As String\n            Dim confName As String\n            \n            Dim swComp As SldWorks.Component2\n            Set swComp = swSelMgr.GetSelectedObjectsComponent4(i, -1)\n            \n            If Not swComp Is Nothing Then\n                \n                path = swComp.GetPathName()\n                \n                If model.IsOpenedViewOnly() Then\n                    path = ResolveReferencePath(model.GetPathName(), path)\n                End If\n                \n                vDrws = FindAssociatedDrawings(rootDir, path)\n                        \n                For j = 0 To UBound(vDrws)\n                           \n                    Dim drwFilePath As String\n                    drwFilePath = vDrws(j)\n                    \n                    Dim unique As Boolean\n                    unique = False\n                                    \n                    If (Not drwFilePaths) = -1 Then\n                        ReDim drwFilePaths(0)\n                        unique = True\n                    Else\n                        unique = Not ContainsFilePath(drwFilePaths, drwFilePath)\n                        If True = unique Then\n                            ReDim Preserve drwFilePaths(UBound(drwFilePaths) + 1)\n                        End If\n                    End If\n                        \n                    If True = unique Then\n                        drwFilePaths(UBound(drwFilePaths)) = drwFilePath\n                    End If\n                \n                Next\n                \n            End If\n            \n        Next\n    \n    End If\n    \n    If (Not drwFilePaths) <> -1 Then\n        FindDrawings = drwFilePaths\n    Else\n        FindDrawings = Empty\n    End If\n    \nEnd Function\n\nFunction FindAssociatedDrawings(rootDir As String, filePath As String) As Variant\n    \n    Dim paths() As String\n    \n    Dim fso As Object\n    Set fso = CreateObject("Scripting.FileSystemObject")\n    \n    Dim folder As Object\n    Set folder = fso.GetFolder(rootDir)\n    \n    CollectDrawingFilesFromFolder folder, filePath, paths\n    \n    If (Not paths) <> -1 Then\n        FindAssociatedDrawings = paths\n    Else\n        Err.Raise vbError, "", "\u65e0\u6cd5\u627e\u5230 " & filePath & " \u7684\u5173\u8054\u56fe\u7eb8"\n    End If\n    \nEnd Function\n\nSub CollectDrawingFilesFromFolder(folder As Object, targetFilePath As String, ByRef paths() As String)\n    \n    For Each file In folder.files\n        \n        Dim fileExt As String\n        fileExt = Right(file.path, Len(file.path) - InStrRev(file.path, "."))\n        \n        If LCase(fileExt) = LCase("slddrw") Then\n            \n            If IsReferencingDrawing(file.path, targetFilePath) Then\n                If (Not paths) = -1 Then\n                    ReDim paths(0)\n                Else\n                    ReDim Preserve paths(UBound(paths) + 1)\n                End If\n                paths(UBound(paths)) = file.path\n            End If\n        End If\n    Next\n    \n    Dim subFolder As Object\n    For Each subFolder In folder.SubFolders\n        CollectDrawingFilesFromFolder subFolder, targetFilePath, paths\n    Next\n    \nEnd Sub\n\nFunction IsReferencingDrawing(drwFilePath As String, destFilePath As String) As Boolean\n\n    Dim vDepends As Variant\n    vDepends = swApp.GetDocumentDependencies2(drwFilePath, False, True, False)\n    \n    Dim i As Integer\n    \n    If Not IsEmpty(vDepends) Then\n        \n        For i = 1 To UBound(vDepends) Step 2\n            \n            If LCase(CStr(vDepends(i))) = LCase(destFilePath) Then\n                IsReferencingDrawing = True\n                Exit Function\n            End If\n        Next\n    End If\n\n    IsReferencingDrawing = False\n    \nEnd Function\n\nFunction ContainsFilePath(vPaths As Variant, path As String) As Boolean\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(vPaths)\n        If LCase(path) = LCase(vPaths(i)) Then\n            ContainsFilePath = True\n            Exit Function\n        End If\n    Next\n    \n    ContainsFilePath = False\n    \nEnd Function\n\nFunction ResolveReferencePath(rootDocPath As String, refPath As String) As String\n    \n    Dim pathParts As Variant\n    pathParts = Split(refPath, "\\")\n    \n    Dim rootFolder As String\n    rootFolder = rootDocPath\n    rootFolder = Left(rootFolder, InStrRev(rootFolder, "\\") - 1)\n\n    Dim i As Integer\n    \n    Dim curRelPath As String\n    \n    For i = UBound(pathParts) To 1 Step -1\n        \n        curRelPath = pathParts(i) & IIf(curRelPath <> "", "\\", "") & curRelPath\n        Dim path As String\n        path = rootFolder & "\\" & curRelPath\n        \n        If Dir(path) <> "" Then\n            ResolveReferencePath = path\n            Exit Function\n        End If\n        \n    Next\n    \n    ResolveReferencePath = refPath\n    \nEnd Function\n')))}u.isMDXComponent=!0}}]);