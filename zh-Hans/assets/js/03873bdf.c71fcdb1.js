"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[98916],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,m=u["".concat(d,".").concat(f)]||u[f]||p[f]||s;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=f;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},17240:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const s={title:"Defeature Part (convert to dumb solid) using SOLIDWORKS API",image:"part-feature-tree-defeatured.png",labels:["defeature","parasolid"]},a=void 0,i={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/features-manager/defeature-part/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/features-manager/defeature-part/index",title:"Defeature Part (convert to dumb solid) using SOLIDWORKS API",description:"This macro emulates the functionality of Defeature for Part but not using it directly.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/features-manager/defeature-part/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/features-manager/defeature-part",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/features-manager/defeature-part/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/features-manager/defeature-part/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/features-manager/defeature-part/index.md",tags:[],version:"current",frontMatter:{title:"Defeature Part (convert to dumb solid) using SOLIDWORKS API",image:"part-feature-tree-defeatured.png",labels:["defeature","parasolid"]},sidebar:"tutorialSidebar",previous:{title:"index",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/features-manager/create-loft/"},next:{title:"Macro to delete all empty feature folders in SOLIDWORKS files",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/features-manager/delete-empty-folders/"}},d={},l=[],c={toc:l},u="wrapper";function p(e){let{components:t,...s}=e;return(0,o.kt)(u,(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This macro emulates the functionality of ",(0,o.kt)("a",{parentName:"p",href:"https://help.solidworks.com/2018/english/solidworks/sldworks/c_defeature_for_parts.htm"},"Defeature for Part")," but not using it directly."),(0,o.kt)("p",null,"Macro copies all visible solid and surface bodies, deletes all user features and imports the copied bodies using SOLIDWORKS API."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Before:")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Part with feature tree",src:n(36810).Z,width:"821",height:"608"}),"{ width=350 }"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"After:"),"\n",(0,o.kt)("img",{alt:"Part with defeatured tree",src:n(85374).Z,width:"810",height:"561"}),"{ width=350 }"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swPart As SldWorks.PartDoc\n    \n    Set swPart = swApp.ActiveDoc\n    \n    If Not swPart Is Nothing Then\n        \n        Dim vBodies As Variant\n        vBodies = GetBodyCopies(swPart)\n        \n        DeleteAllUserFeatures swPart\n        \n        CreateFeaturesForBodies swPart, vBodies\n        \n    Else\n        MsgBox "Please open part document"\n    End If\n    \nEnd Sub\n\nFunction GetBodyCopies(part As SldWorks.PartDoc) As Variant\n    \n    Dim vBodies As Variant\n        \n    vBodies = part.GetBodies2(swBodyType_e.swAllBodies, True)\n    Dim i As Integer\n    \n    For i = 0 To UBound(vBodies)\n        \n        Dim swBody As SldWorks.Body2\n        Set swBody = vBodies(i)\n        Set swBody = swBody.Copy()\n        Set vBodies(i) = swBody\n        \n    Next\n    \n    GetBodyCopies = vBodies\n    \nEnd Function\n\nSub CreateFeaturesForBodies(part As SldWorks.PartDoc, vBodies As Variant)\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(vBodies)\n        Dim swBody As SldWorks.Body2\n        Set swBody = vBodies(i)\n        part.CreateFeatureFromBody3 swBody, False, swCreateFeatureBodyOpts_e.swCreateFeatureBodySimplify\n    Next\n    \nEnd Sub\n\nSub DeleteAllUserFeatures(model As SldWorks.ModelDoc2)\n    \n    SelectAllTopLevelUserFeatures model\n            \n    model.Extension.DeleteSelection2 swDeleteSelectionOptions_e.swDelete_Children + swDeleteSelectionOptions_e.swDelete_Absorbed\n            \nEnd Sub\n\nSub SelectAllTopLevelUserFeatures(model As SldWorks.ModelDoc2)\n    \n    model.ClearSelection2 True\n    \n    Dim swFeat As SldWorks.Feature\n    \n    Set swFeat = model.FirstFeature\n    \n    Dim selectFeat As Boolean\n    selectFeat = False\n    \n    While Not swFeat Is Nothing\n        \n        If selectFeat Then\n            swFeat.Select2 True, -1\n        Else\n            If swFeat.GetTypeName2() = "OriginProfileFeature" Then\n                selectFeat = True\n            End If\n        End If\n        \n        Set swFeat = swFeat.GetNextFeature\n        \n    Wend\n    \nEnd Sub\n')))}p.isMDXComponent=!0},85374:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/part-feature-tree-defeatured-115dd74747ade0b48293fdd93867f3cc.png"},36810:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/part-feature-tree-b1db2d05aa6e7652600e4d2cce888a13.png"}}]);