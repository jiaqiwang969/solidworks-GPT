"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[11234],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=d(t),f=r,p=m["".concat(l,".").concat(f)]||m[f]||u[f]||s;return t?o.createElement(p,i(i({ref:n},c),{},{components:t})):o.createElement(p,i({ref:n},c))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[m]="string"==typeof e?e:r,i[1]=a;for(var d=2;d<s;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},758:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var o=t(87462),r=(t(67294),t(3905));const s={title:"\u4f7f\u7528SOLIDWORKS API\u8bfb\u53d6\u548c\u663e\u793a\u6587\u4ef6\u4e2d\u7684\u5b9e\u4f53",caption:"\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5b9e\u4f53"},i=void 0,a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/read-body-from-file/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/read-body-from-file/index",title:"\u4f7f\u7528SOLIDWORKS API\u8bfb\u53d6\u548c\u663e\u793a\u6587\u4ef6\u4e2d\u7684\u5b9e\u4f53",description:"VBA\u793a\u4f8b\uff0c\u4f7f\u7528SOLIDWORKS API\u5c06\u5916\u90e8\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u7684\u5b9e\u4f53\u51e0\u4f55\u6570\u636e\u53cd\u5e8f\u5217\u5316\u4e3a\u4e34\u65f6\u5b9e\u4f53\u5e76\u663e\u793a\u51fa\u6765",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/read-body-from-file/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/read-body-from-file",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/read-body-from-file/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/read-body-from-file/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/read-body-from-file/index.md",tags:[],version:"current",frontMatter:{title:"\u4f7f\u7528SOLIDWORKS API\u8bfb\u53d6\u548c\u663e\u793a\u6587\u4ef6\u4e2d\u7684\u5b9e\u4f53",caption:"\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5b9e\u4f53"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u4ece\u6587\u4ef6\u3001\u914d\u7f6e\u548c\u5207\u5272\u5217\u8868\u5143\u7d20\u4e2d\u8bfb\u53d6\u81ea\u5b9a\u4e49\u5c5e\u6027",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/read-all-properties/"},next:{title:"\u4f7f\u7528SOLIDWORKS API\u4ece\u6240\u9009\u7ec4\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u7279\u5b9a\u7684\u5207\u5272\u5217\u8868\u5c5e\u6027",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/read-component-cutlist/"}},l={},d=[{value:"labels: \u53cd\u5e8f\u5217\u5316, COM\u6d41, \u4e34\u65f6\u5b9e\u4f53",id:"labels-\u53cd\u5e8f\u5217\u5316-com\u6d41-\u4e34\u65f6\u5b9e\u4f53",level:2}],c={toc:d},m="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"VBA\u793a\u4f8b\uff0c\u4f7f\u7528SOLIDWORKS API\u5c06\u5916\u90e8\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u7684\u5b9e\u4f53\u51e0\u4f55\u6570\u636e\u53cd\u5e8f\u5217\u5316\u4e3a\u4e34\u65f6\u5b9e\u4f53\u5e76\u663e\u793a\u51fa\u6765"),(0,r.kt)("h2",{id:"labels-\u53cd\u5e8f\u5217\u5316-com\u6d41-\u4e34\u65f6\u5b9e\u4f53"},"labels: ","[\u53cd\u5e8f\u5217\u5316, COM\u6d41, \u4e34\u65f6\u5b9e\u4f53]"),(0,r.kt)("p",null,"\u8fd9\u4e2aVBA\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4ece\u5916\u90e8\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5b9e\u4f53\u51e0\u4f55\u6570\u636e\u3002\u5c06\u8fd9\u4e9b\u6570\u636e\u52a0\u8f7d\u5230COM\u6d41\u4e2d\uff0c\u5e76\u4f7f\u7528SOLIDWORKS API\u5c06\u5176\u6062\u590d\u4e3a\u4e34\u65f6\u5b9e\u4f53\u3002"),(0,r.kt)("p",null,"\u5b9e\u4f53\u5c06\u663e\u793a\u7ed9\u7528\u6237\uff0c\u5e76\u505c\u6b62\u5b8f\u6267\u884c\u3002\u5b9e\u4f53\u4e0d\u4f1a\u51fa\u73b0\u5728\u7279\u5f81\u7ba1\u7406\u5668\u6811\u4e2d\uff0c\u53ea\u4f1a\u5728\u56fe\u5f62\u533a\u57df\u4e2d\u53ef\u89c1\u3002"),(0,r.kt)("p",null,"\u7ee7\u7eed\u6267\u884c\u5b8f\u4ee5\u9500\u6bc1\u5b9e\u4f53\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Imports SolidWorks.Interop.sldworks\nImports SolidWorks.Interop.swconst\nImports System.IO\nImports System.Runtime.InteropServices\nImports System.Runtime.InteropServices.ComTypes\n\nModule Module1\n\n    Declare Function CreateStreamOnHGlobal Lib "ole32" (ByVal hGlobal As IntPtr, ByVal fDeleteOnRelease As Boolean, ByRef ppstm As IStream) As Long\n\n    Const FILE_PATH As String = "D:\\body.dat"\n\n    Sub Main()\n\n        Dim app As ISldWorks = CreateObject("SldWorks.Application")\n        app.Visible = True\n\n        Dim model As IModelDoc2\n        model = app.ActiveDoc\n\n        If Not model Is Nothing Then\n\n            Dim body As IBody2 = LoadBodyFromFile(app, FILE_PATH)\n\n            If Not body Is Nothing Then\n                body.Display3(model, RGB(255, 255, 0), swTempBodySelectOptions_e.swTempBodySelectOptionNone)\n                Console.ReadLine()\n            Else\n                Throw New Exception("\u6062\u590d\u5b9e\u4f53\u5931\u8d25")\n            End If\n\n        Else\n            Throw New Exception("\u8bf7\u6253\u5f00\u6a21\u578b")\n        End If\n\n    End Sub\n\n    Function LoadBodyFromFile(app As ISldWorks, filePath As String) As IBody2\n\n        Dim stream As IStream = Nothing\n\n        CreateStreamOnHGlobal(IntPtr.Zero, True, stream)\n\n        Dim comStream = New ComStream(stream, True, True)\n\n        Using fileStream = File.OpenRead(filePath)\n            fileStream.CopyTo(comStream)\n            comStream.Seek(0, SeekOrigin.Begin)\n        End Using\n\n        Dim modeler As IModeler = app.IGetModeler()\n\n        Return modeler.Restore(stream)\n\n    End Function\n\nEnd Module\n\nPublic Class ComStream\n    Inherits Stream\n\n    Private ReadOnly m_ComStream As IStream\n    Private ReadOnly m_Commit As Boolean\n    Private m_IsWritable As Boolean\n\n    Public Sub New(ByRef comStream As IStream, writable As Boolean, Optional commit As Boolean = True)\n\n        If comStream Is Nothing Then\n            Throw New ArgumentNullException(NameOf(comStream))\n        End If\n\n        m_ComStream = comStream\n        m_IsWritable = writable\n        m_Commit = commit\n\n    End Sub\n\n    Public Overrides ReadOnly Property CanRead() As Boolean\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public Overrides ReadOnly Property CanSeek() As Boolean\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public Overrides ReadOnly Property CanWrite() As Boolean\n        Get\n            Return m_IsWritable\n        End Get\n    End Property\n\n    Public Overrides ReadOnly Property Length As Long\n        Get\n            Const STATSFLAG_NONAME As Integer = 1\n\n            Dim stats As ComTypes.STATSTG = Nothing\n            m_ComStream.Stat(stats, STATSFLAG_NONAME)\n\n            Return stats.cbSize\n        End Get\n    End Property\n\n    Public Overrides Property Position() As Long\n        Get\n            Return Seek(0, SeekOrigin.Current)\n        End Get\n        Set(ByVal Value As Long)\n            Seek(Value, SeekOrigin.Begin)\n        End Set\n    End Property\n\n    Public Overrides Sub Flush()\n        If m_Commit Then\n            Const STGC_DEFAULT As Integer = 0\n            m_ComStream.Commit(STGC_DEFAULT)\n        End If\n    End Sub\n\n    Public Overrides Sub SetLength(ByVal Value As Long)\n        m_ComStream.SetSize(Value)\n    End Sub\n\n    Public Overrides Sub Write(buffer() As Byte, offset As Integer, count As Integer)\n        If offset <> 0 Then\n            Dim bufferSize As Integer\n            bufferSize = buffer.Length - offset\n            Dim tmpBuffer(bufferSize) As Byte\n            Array.Copy(buffer, offset, tmpBuffer, 0, bufferSize)\n            m_ComStream.Write(tmpBuffer, bufferSize, Nothing)\n        Else\n            m_ComStream.Write(buffer, count, Nothing)\n        End If\n    End Sub\n\n    Public Overrides Function Read(buffer() As Byte, offset As Integer, count As Integer) As Integer\n\n        Dim bytesRead As Integer = 0\n        Dim boxBytesRead As Object = bytesRead\n        Dim hObject As GCHandle\n\n        Try\n            hObject = GCHandle.Alloc(boxBytesRead, GCHandleType.Pinned)\n            Dim pBytesRead As IntPtr = hObject.AddrOfPinnedObject()\n\n            If offset <> 0 Then\n                Dim tmpBuffer(count - 1) As Byte\n                m_ComStream.Read(tmpBuffer, count, pBytesRead)\n                bytesRead = CInt(boxBytesRead)\n                Array.Copy(tmpBuffer, 0, buffer, offset, bytesRead)\n            Else\n                m_ComStream.Read(buffer, count, pBytesRead)\n                bytesRead = CInt(boxBytesRead)\n            End If\n\n        Finally\n            If hObject.IsAllocated Then\n                hObject.Free()\n            End If\n        End Try\n\n        Return bytesRead\n\n    End Function\n\n    Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long\n\n        Dim curPosition As Long = 0\n        Dim boxCurPosition As Object = curPosition\n        Dim hObject As GCHandle\n\n        Try\n            hObject = GCHandle.Alloc(boxCurPosition, GCHandleType.Pinned)\n            Dim pCurPosition As IntPtr = hObject.AddrOfPinnedObject()\n\n            m_ComStream.Seek(offset, origin, pCurPosition)\n            curPosition = CLng(boxCurPosition)\n        Finally\n            If hObject.IsAllocated Then\n                hObject.Free()\n            End If\n        End Try\n\n        Return curPosition\n    End Function\n\n    Protected Overrides Sub Dispose(ByVal disposing As Boolean)\n        Try\n            If disposing Then\n                m_IsWritable = False\n            End If\n        Finally\n            MyBase.Dispose(disposing)\n        End Try\n    End Sub\n\n    Protected Overrides Sub Finalize()\n        Dispose(False)\n    End Sub\n\nEnd Class\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vba"},'Const FILE_PATH As String = "D:\\body.dat"\n\nPrivate Declare PtrSafe Function CreateStreamOnHGlobal Lib "ole32" (ByVal hGlobal As LongPtr, ByVal fDeleteOnRelease As Long, ByRef ppstm As Any) As Long\n\nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    Set swModel = swApp.ActiveDoc\n    \n    If Not swModel Is Nothing Then\n    \n        Dim swBody As SldWorks.Body2\n        Set swBody = LoadBodyFromFile(FILE_PATH)\n        swBody.Display3 swModel, RGB(255, 255, 0), swTempBodySelectOptions_e.swTempBodySelectOptionNone\n        \n        Stop \' \u7ee7\u7eed\u9690\u85cf\u5b9e\u4f53\n        \n    Else\n        MsgBox "\u8bf7\u6253\u5f00\u6a21\u578b"\n    End If\n    \nEnd Sub\n\nFunction LoadBodyFromFile(filePath As String) As SldWorks.Body2\n\n    Dim buff() As Byte\n    buff = ReadByteArrFromFile(filePath)\n    \n    Dim comStream As IUnknown\n    Set comStream = BytesArrToComStream(buff)\n    \n    Dim swModeler As SldWorks.Modeler\n    Set swModeler = swApp.GetModeler\n    \n    Dim swBody As SldWorks.Body2\n    Set swBody = swModeler.Restore(comStream)\n    \n    Set LoadBodyFromFile = swBody\n        \nEnd Function\n\nFunction ReadByteArrFromFile(filePath) As Byte()\n\n    Dim buff() As Byte\n    \n    Dim fileNumb As Integer\n    fileNumb = FreeFile\n    \n    Open filePath For Binary Access Read As fileNumb\n    \n    ReDim buff(0 To LOF(fileNumb) - 1)\n    \n    Get fileNumb, , buff\n    \n    Close fileNumb\n    \n    ReadByteArrFromFile = buff\n    \nEnd Function\n\nPrivate Function BytesArrToComStream(ByRef buff() As Byte) As IUnknown\n    \n    Dim comStream As IUnknown\n    \n    If CreateStreamOnHGlobal(VarPtr(buff(LBound(buff))), 0, comStream) Then\n        Err.Raise vbError, "", "\u4ece\u5b57\u8282\u6570\u7ec4\u521b\u5efa\u6d41\u5931\u8d25"\n    End If\n    \n    Set BytesArrToComStream = comStream\n    \nEnd Function\n')))}u.isMDXComponent=!0}}]);