"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[29038],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>y});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,y=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return t?r.createElement(y,a(a({ref:n},d),{},{components:t})):r.createElement(y,a({ref:n},d))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},53245:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const i={title:"\u4f7f\u7528SOLIDWORKS API\u67e5\u627e\u4f53\u7684\u8fb9\u754c\u5706\u67f1\u4f53",caption:"\u83b7\u53d6\u4f53\u7684\u8fb9\u754c\u5706\u67f1\u4f53"},a=void 0,l={unversionedId:"codestack/solidworks-api/geometry/get-bounding-cylinder/index",id:"codestack/solidworks-api/geometry/get-bounding-cylinder/index",title:"\u4f7f\u7528SOLIDWORKS API\u67e5\u627e\u4f53\u7684\u8fb9\u754c\u5706\u67f1\u4f53",description:"\u672c\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u83b7\u53d6\u5b9e\u4f53\u4f53\u7684\u8fb9\u754c\u5706\u67f1\u4f53\u3002",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/geometry/get-bounding-cylinder/index.md",sourceDirName:"codestack/solidworks-api/geometry/get-bounding-cylinder",slug:"/codestack/solidworks-api/geometry/get-bounding-cylinder/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/geometry/get-bounding-cylinder/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/geometry/get-bounding-cylinder/index.md",tags:[],version:"current",frontMatter:{title:"\u4f7f\u7528SOLIDWORKS API\u67e5\u627e\u4f53\u7684\u8fb9\u754c\u5706\u67f1\u4f53",caption:"\u83b7\u53d6\u4f53\u7684\u8fb9\u754c\u5706\u67f1\u4f53"},sidebar:"tutorialSidebar",previous:{title:"index",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/geometry/fill-hole/"},next:{title:"Get B-Spline Parameters from Selected Edge using SOLIDWORKS API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/geometry/get-bspline-parameters/"}},s={},c=[{value:"image: cylindrical-bounding-box.png",id:"image-cylindrical-bounding-boxpng",level:2},{value:"SolidWorksMacro.cs",id:"solidworksmacrocs",level:3},{value:"CylinderParams.cs",id:"cylinderparamscs",level:3},{value:"BodyHelper.cs",id:"bodyhelpercs",level:3},{value:"BodyHelper.cs",id:"bodyhelpercs-1",level:3}],d={toc:c},u="wrapper";function p(e){let{components:n,...i}=e;return(0,o.kt)(u,(0,r.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u672c\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u83b7\u53d6\u5b9e\u4f53\u4f53\u7684\u8fb9\u754c\u5706\u67f1\u4f53\u3002"),(0,o.kt)("h2",{id:"image-cylindrical-bounding-boxpng"},"image: cylindrical-bounding-box.png"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"\u5728\u4f53\u5468\u56f4\u521b\u5efa\u5706\u67f1\u4f53\u8fb9\u754c\u6846",src:t(70334).Z,width:"503",height:"565"}),"{ width=400 }"),(0,o.kt)("p",null,"\u672c\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u67e5\u627e\u5b9e\u4f53\u4f53\u7684\u8fb9\u754c\u5706\u67f1\u4f53\u3002"),(0,o.kt)("p",null,"\u5b8f\u8981\u6c42\u7528\u6237\u9009\u62e9\u8f93\u5165\u53c2\u6570\u4ee5\u786e\u5b9a\u5706\u67f1\u4f53\u7684\u65b9\u5411\u3002\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u5706\u5f62\u9762\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8f74\u5c06\u7528\u4f5c\u53c2\u8003\uff09\u6216\u5e73\u9762\u7279\u5f81\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6cd5\u7ebf\u5c06\u7528\u4f5c\u53c2\u8003\uff09\u3002"),(0,o.kt)("p",null,"\u7ed3\u679c\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7279\u5f81\uff0c\u8868\u793a\u4f53\u7684\u5706\u67f1\u8fb9\u754c\u3002"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8be5\u5b8f\u5c06\u4e3a\u4efb\u610f\u65b9\u5411\u7684\u5b9e\u4f53\u521b\u5efa\u6700\u4f73\u62df\u5408\u8fb9\u754c\u5706\u67f1\u4f53\u3002\u4f53\u4e0d\u4e00\u5b9a\u9700\u8981\u4e0eXYZ\u8f74\u5bf9\u9f50\u3002")),(0,o.kt)("p",null,"\u53ef\u4ee5\u5728",(0,o.kt)("a",{target:"_blank",href:t(97683).Z},"\u6b64\u94fe\u63a5"),"\u4e0b\u8f7d\u5b8f\u3002\u89e3\u538b\u7f29\u5b8f\u5e76\u4ece\u201c\u5de5\u5177\u201d->\u201c\u5b8f\u201d->\u201c\u8fd0\u884c\u201d\u83dc\u5355\u547d\u4ee4\u4e2d\u8fd0\u884c\u5b83\u3002\u6309\u7167\u4e0b\u9762\u7684\u8bf4\u660e\u6307\u5b9a\u6b63\u786e\u7684\u8fc7\u6ee4\u5668\uff1a"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"\u4eceSOLIDWORKS\u8fd0\u884cVSTA\u5b8f",src:t(60798).Z,width:"1027",height:"565"}),"{ width=500 }"),(0,o.kt)("h3",{id:"solidworksmacrocs"},"SolidWorksMacro.cs"),(0,o.kt)("p",null,"\u8fd9\u662fVSTA\u5b8f\u7684\u5165\u53e3\u70b9\u3002\u5728\u6b64\u6a21\u5757\u4e2d\u5904\u7406\u8f93\u5165\u53c2\u6570\u5e76\u521b\u5efa\u8f93\u51fa\u4f53\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'using SolidWorks.Interop.sldworks;\nusing SolidWorks.Interop.swconst;\nusing System.Runtime.InteropServices;\nusing System;\nusing CodeStack;\n\nnamespace CodeStack\n{\n    public partial class SolidWorksMacro\n    {\n        public void Main()\n        {\n            try\n            {\n                IModelDoc2 model = swApp.IActiveDoc2;\n\n                if (model is IPartDoc)\n                {\n                    BodyHelper proc = new BodyHelper(swApp.IGetMathUtility());\n\n                    object selObj = model.ISelectionManager.GetSelectedObject6(1, -1);\n\n                    CylinderParams cylParams = proc.GetBoundingCylinder(\n                        GetBodyToProcess(model as IPartDoc, selObj),\n                        GetDirection(model, selObj));\n\n                    CreateCylindricalBody(model as IPartDoc, cylParams);\n\n                }\n                else\n                {\n                    throw new NullReferenceException("\u672a\u6253\u5f00\u96f6\u4ef6\u6587\u6863");\n                }\n            }\n            catch (Exception ex)\n            {\n                swApp.SendMsgToUser2("\u9519\u8bef\uff1a" + ex.Message, \n                    (int)swMessageBoxIcon_e.swMbStop, (int)swMessageBoxBtn_e.swMbOk);\n            }\n        }\n\n        private void CreateCylindricalBody(IPartDoc part, CylinderParams cylParams)\n        {\n            IBody2 cylTempBody = swApp.IGetModeler().CreateBodyFromCyl(new double[]\n                    {\n                        cylParams.Origin[0], cylParams.Origin[1], cylParams.Origin[2],\n                        cylParams.Direction[0], cylParams.Direction[1], cylParams.Direction[2],\n                        cylParams.Radius, cylParams.Height\n                    }) as IBody2;\n\n            IFeature feat = part.CreateFeatureFromBody3(cylTempBody, false,\n                (int)swCreateFeatureBodyOpts_e.swCreateFeatureBodySimplify) as IFeature;\n\n            IBody2 body = feat.GetBody() as IBody2;\n\n            body.MaterialPropertyValues2 = new double[] { 1, 1, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5 };\n\n        }\n\n        private IBody2 GetBodyToProcess(IPartDoc part, object inputObj)\n        {\n            if (inputObj is IFace2)\n            {\n                return (inputObj as IFace2).GetBody() as IBody2;\n            }\n            else\n            {\n                object[] solidBodies = part.GetBodies2((int)swBodyType_e.swSolidBody, true) as object[];\n\n                if (solidBodies != null && solidBodies.Length == 1)\n                {\n                    return solidBodies[0] as IBody2;\n                }\n            }\n\n            throw new NullReferenceException("\u65e0\u6cd5\u627e\u5230\u8f93\u5165\u4f53\u3002\u8bf7\u9009\u62e9\u5706\u67f1\u9762\u6216\u4f7f\u7528\u5355\u4e2a\u5b9e\u4f53\u96f6\u4ef6");\n        }\n\n        private double[] GetDirection(IModelDoc2 model, object inputObj)\n        {\n            if (inputObj is IFace2)\n            {\n                ISurface surf = (inputObj as IFace2).GetSurface() as ISurface;\n\n                if (surf.IsCylinder())\n                {\n                    double[] cylParams = surf.CylinderParams as double[];\n\n                    return new double[] { cylParams[3], cylParams[4], cylParams[5] };\n                }\n            }\n            else if (inputObj is IFeature)\n            {\n                IRefPlane refPlane = (inputObj as IFeature).GetSpecificFeature2() as IRefPlane;\n\n                if (refPlane != null)\n                {\n                    IMathUtility mathUtils = swApp.GetMathUtility() as IMathUtility;\n                    IMathVector vec = mathUtils.CreateVector(new double[] { 0, 0, 1 }) as IMathVector;\n                    vec = vec.MultiplyTransform(refPlane.Transform) as IMathVector;\n                    return vec.ArrayData as double[];\n                }\n            }\n\n            throw new NullReferenceException("\u65e0\u6cd5\u627e\u5230\u65b9\u5411\u3002\u8bf7\u9009\u62e9\u5706\u67f1\u9762\u6216\u5e73\u9762");\n        }\n\n        public SldWorks swApp;\n    }\n}\n\n\n\n')),(0,o.kt)("h3",{id:"cylinderparamscs"},"CylinderParams.cs"),(0,o.kt)("p",null,"\u6b64\u7ed3\u6784\u8868\u793a\u8fb9\u754c\u5706\u67f1\u4f53\u7684\u8be6\u7ec6\u4fe1\u606f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace CodeStack\n{\n    public class CylinderParams\n    {\n        public double Height;\n        public double[] Origin;\n        public double[] Direction;\n        public double Radius;\n\n        public CylinderParams(double height, double[] origin, double[] dir, double rad)\n        {\n            Height = height;\n            Origin = origin;\n            Radius = rad;\n            Direction = dir;\n        }\n    }\n}\n\n")),(0,o.kt)("h3",{id:"bodyhelpercs"},"BodyHelper.cs"),(0,o.kt)("p",null,"\u6b64\u5b9e\u7528\u7a0b\u5e8f\u7c7b\u5141\u8bb8\u67e5\u627e\u4f53\u7684\u65b9\u5411\u5e76\u5c06\u5176\u9002\u914d\u5230\u5706\u67f1\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing SolidWorks.Interop.sldworks;\nusing SolidWorks.Interop.swconst;\n\nnamespace CodeStack\n{\n    public class BodyHelper\n    {\n        private IMathUtility m_MathUtils;\n        private MathHelper m_MathHelper;\n\n        public BodyHelper(IMathUtility mathUtils) \n        {\n            m_MathUtils = mathUtils;\n            m_MathHelper = new MathHelper(mathUtils);\n        }\n\n        public CylinderParams GetBoundingCylinder(IBody2 body, double[] dir)\n        {\n            double[] xAxis = new double[] { 1, 0, 0 };\n            double[] yAxis = new double[] { 0, 1, 0 };\n            double[] zAxis = new double[] { 0, 0, 1 };\n\n            bool isAligned = m_MathHelper.ArrayEqual(dir, yAxis);\n            IMathTransform alignTransform = null;\n\n            if (!isAligned)\n            {\n                alignTransform = m_MathHelper.GetTransformBetweenVectorsAroundPoint(\n                    dir, yAxis, new double[] { 0, 0, 0 });\n\n                IBody2 bodyCopy = body.ICopy();\n\n                bodyCopy.ApplyTransform(alignTransform as MathTransform);\n\n                body = bodyCopy;\n            }\n\n            double[] rootPt;\n            double[] endPt;\n            GetExtremePoints(body, yAxis, out rootPt, out endPt);\n\n            double height = Math.Abs(endPt[1] - rootPt[1]);\n\n            dir = new double[] { 0, endPt[1] - rootPt[1], 0 };\n\n            List<double[]> perPoints = GetPerimeterPoints(body, xAxis, zAxis);\n            List<Point> points = new List<Point>();\n\n            foreach (double[] pt in perPoints)\n            {\n                points.Add(new Point(pt[0], pt[2]));\n            }\n\n            Circle cir = SmallestEnclosingCircle.MakeCircle(points);\n\n            double[] circCenter = new double[] { cir.c.x, rootPt[1], cir.c.y };\n\n            if (!isAligned)\n            {\n                circCenter = m_MathHelper.TransformPoint(circCenter, alignTransform.IInverse());\n                dir = m_MathHelper.TransformVector(dir, alignTransform.IInverse());\n            }\n\n            double radius = cir.r;\n\n            return new CylinderParams(height, circCenter, dir, radius);\n        }\n\n        private List<double[]> GetPerimeterPoints(IBody2 body, params double[][] directions) \n        {\n            List<double[]> perPoints = new List<double[]>();\n            double[] pt1;\n            double[] pt2;\n\n            foreach (double[] dir in directions)\n            {\n                GetExtremePoints(body, dir, out pt1, out pt2);\n\n                perPoints.Add(pt1);\n                perPoints.Add(pt2);\n            }\n\n            return perPoints;\n        }\n\n        private void GetExtremePoints(IBody2 body, double[] dir, out double[] pt1, out double[] pt2) \n        {\n            double x;\n            double y;\n            double z;\n\n            body.GetExtremePoint(dir[0], dir[1], dir[2], out x, out y, out z);\n            pt1 = new double[] { x, y, z };\n\n            body.GetExtremePoint(-dir[0], -dir[1], -dir[2], out x, out y, out z);\n            pt2 = new double[] { x, y, z };\n        }\n    }\n}\n\n")),(0,o.kt)("h3",{id:"bodyhelpercs-1"},"BodyHelper.cs"),(0,o.kt)("p",null,"\u6b64\u6a21\u5757\u63d0\u4f9b\u4e86\u7528\u4e8e\u5904\u7406\u5411\u91cf\u3001\u53d8\u6362\u548c\u70b9\u7684\u5b9e\u7528\u51fd\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing SolidWorks.Interop.sldworks;\n\nnamespace CodeStack\n{\n    public class MathHelper\n    {\n        private IMathUtility m_MathUtils;\n\n        public MathHelper(IMathUtility mathUtils)\n        {\n            m_MathUtils = mathUtils;\n        }\n\n        public double[] TransformVector(double[] dir, IMathTransform transform)\n        {\n            IMathVector vec = m_MathUtils.CreateVector(dir) as IMathVector;\n            vec = vec.MultiplyTransform(transform) as IMathVector;\n            return vec.ArrayData as double[];\n        }\n\n        public double[] TransformPoint(double[] pt, IMathTransform transform)\n        {\n            IMathPoint point = m_MathUtils.CreatePoint(pt) as IMathPoint;\n            point = point.MultiplyTransform(transform) as IMathPoint;\n            return point.ArrayData as double[];\n        }\n\n        public IMathTransform GetTransformBetweenVectorsAroundPoint(\n            double[] vec1, double[] vec2, double[] pt)\n        {\n            IMathVector mathVec1 = m_MathUtils.CreateVector(vec1) as IMathVector;\n            IMathVector mathVec2 = m_MathUtils.CreateVector(vec2) as IMathVector;\n            IMathVector crossVec = mathVec1.Cross(mathVec2) as IMathVector;\n\n            double dot = mathVec1.Dot(mathVec2);\n            double vec1Len = mathVec1.GetLength();\n            double vec2Len = mathVec2.GetLength();\n\n            double angle = Math.Acos(dot / vec1Len * vec2Len);\n\n            IMathPoint mathPt = m_MathUtils.CreatePoint(pt) as IMathPoint;\n\n            return m_MathUtils.CreateTransformRotateAxis(mathPt, crossVec, angle) as IMathTransform;\n        }\n\n        public bool ArrayEqual(double[] arr1, double[] arr2)\n        {\n            if (arr1 != null && arr2 != null)\n            {\n                if (arr1.Length == arr2.Length)\n                {\n                    for (int i = 0; i < arr1.Length; i++)\n                    {\n                        if (arr1[i] != arr2[i])\n                        {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n    }\n}\n\n")),(0,o.kt)("p",null,"\u6b64\u5b8f\u9700\u8981\u5f15\u7528",(0,o.kt)("a",{parentName:"p",href:"https://www.nayuki.io/page/smallest-enclosing-circle"},"Smallest enclosing circle - Library (C#)")," by Project Nayuki\u3002"))}p.isMDXComponent=!0},97683:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/files/GetBoundingCylinderBin-001fb11cb0b11f42d8673d291405f005.zip"},70334:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/cylindrical-bounding-box-aa002911054517c12e01a3781f37ba05.png"},60798:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/run-vsta-macro-2051dece0d85a48825253f418135cb8c.png"}}]);