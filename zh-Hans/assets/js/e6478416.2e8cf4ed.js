"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[49862],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>S});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),u=o,S=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return t?r.createElement(S,s(s({ref:n},p),{},{components:t})):r.createElement(S,s({ref:n},p))}));function S(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},60428:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={layout:"sw-tool",title:"\u901a\u8fc7\u6587\u6863\u7ba1\u7406\u5668 API\uff08\u65e0\u9700 SOLIDWORKS\uff09\u5c06\u96f6\u4ef6\u5bfc\u51fa\u4e3a Parasolid",image:"export-parasolid.svg",labels:["export","parasolid"],group:"Import/Export"},s=void 0,i={unversionedId:"codestack/solidworks-document-manager-api/document/export-parasolid/index",id:"codestack/solidworks-document-manager-api/document/export-parasolid/index",title:"\u901a\u8fc7\u6587\u6863\u7ba1\u7406\u5668 API\uff08\u65e0\u9700 SOLIDWORKS\uff09\u5c06\u96f6\u4ef6\u5bfc\u51fa\u4e3a Parasolid",description:"\u6b64 PowerShell \u811a\u672c\u5141\u8bb8\u4f7f\u7528 SOLIDWORKS \u6587\u6863\u7ba1\u7406\u5668 API \u4ece\u547d\u4ee4\u884c\u5c06 SOLIDWORKS \u96f6\u4ef6\u6587\u4ef6\u5bfc\u51fa\u4e3a Parasolid \u683c\u5f0f\uff08.xmp_bin\uff09\u3002",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-document-manager-api/document/export-parasolid/index.md",sourceDirName:"codestack/solidworks-document-manager-api/document/export-parasolid",slug:"/codestack/solidworks-document-manager-api/document/export-parasolid/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-document-manager-api/document/export-parasolid/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-document-manager-api/document/export-parasolid/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"\u901a\u8fc7\u6587\u6863\u7ba1\u7406\u5668 API\uff08\u65e0\u9700 SOLIDWORKS\uff09\u5c06\u96f6\u4ef6\u5bfc\u51fa\u4e3a Parasolid",image:"export-parasolid.svg",labels:["export","parasolid"],group:"Import/Export"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u5c06\u6c34\u5370\u6dfb\u52a0\u5230\u6a21\u578b\u7684\u7b2c\u4e09\u65b9\u5b58\u50a8",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-document-manager-api/document/data-storage/third-party/add-watermark/"},next:{title:"\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u83b7\u53d6\u6587\u6863\u7684\u6240\u6709\u5916\u90e8\u5f15\u7528",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-document-manager-api/document/get-external-references/"}},l={},c=[{value:"\u914d\u7f6e\u548c\u4f7f\u7528\u8bf4\u660e",id:"\u914d\u7f6e\u548c\u4f7f\u7528\u8bf4\u660e",level:2},{value:"export-parasolid.ps1",id:"export-parasolidps1",level:3},{value:"export-parasolid.cmd",id:"export-parasolidcmd",level:3}],p={toc:c},d="wrapper";function m(e){let{components:n,...a}=e;return(0,o.kt)(d,(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u6b64 PowerShell \u811a\u672c\u5141\u8bb8\u4f7f\u7528 SOLIDWORKS \u6587\u6863\u7ba1\u7406\u5668 API \u4ece\u547d\u4ee4\u884c\u5c06 SOLIDWORKS \u96f6\u4ef6\u6587\u4ef6\u5bfc\u51fa\u4e3a Parasolid \u683c\u5f0f\uff08.xmp_bin\uff09\u3002"),(0,o.kt)("p",null,"\u8be5\u6587\u4ef6\u53ef\u4ee5\u5728\u4efb\u4f55\u517c\u5bb9\u7684 CAD \u5e94\u7528\u7a0b\u5e8f\uff08\u5982 SOLIDWORKS\u3001Solid Edge \u7b49\uff09\u4e2d\u6253\u5f00\u3002"),(0,o.kt)("p",null,"\u6b64\u811a\u672c\u4e0d\u9700\u8981\u5b89\u88c5 SOLIDWORKS\uff0c\u4e5f\u4e0d\u4f1a\u6d88\u8017 SOLIDWORKS \u8bb8\u53ef\u8bc1\u3002"),(0,o.kt)("h2",{id:"\u914d\u7f6e\u548c\u4f7f\u7528\u8bf4\u660e"},"\u914d\u7f6e\u548c\u4f7f\u7528\u8bf4\u660e"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6\uff0c\u5e76\u5c06\u4e0b\u9762\u7247\u6bb5\u4e2d\u7684\u4ee3\u7801\u7c98\u8d34\u5230\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4e2d\u3002")),(0,o.kt)("h3",{id:"export-parasolidps1"},"export-parasolid.ps1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ps1"},'$inputFilePath=$args[0]\n$outDirPath=$args[1]\n\n$ScriptDir = Split-Path $script:MyInvocation.MyCommand.Path\n\n$Assem = ( \n    $ScriptDir + "\\SolidWorks.Interop.swdocumentmgr.dll"\n    ) \n    \n$Source = @"\nImports System\nImports System.IO\nImports SolidWorks.Interop.swdocumentmgr\n\nPublic Class Exporter\n\n    Const LICENSE_KEY As String = "Your license key"\n\n    Shared Sub New()\n        AddHandler AppDomain.CurrentDomain.AssemblyResolve, AddressOf OnAssemblyResolve\n    End Sub\n\n    Public Shared Sub LoadLibrary(ParamArray libs As Object())\n        For Each [lib] As String In libs\n            Console.WriteLine(String.Format("Loading library: {0}", [lib]))\n            Dim assm As System.Reflection.Assembly = System.Reflection.Assembly.LoadFrom([lib])\n            Console.WriteLine(assm.GetName().ToString())\n        Next\n    End Sub\n\n    Private Shared Function OnAssemblyResolve(ByVal sender As Object, ByVal args As ResolveEventArgs) As System.Reflection.Assembly\n        For Each assm As System.Reflection.Assembly In AppDomain.CurrentDomain.GetAssemblies()\n\n            If assm.GetName().ToString() = args.Name Then\n                Return assm\n            End If\n        Next\n\n        Return Nothing\n    End Function\n    \n    Public Shared Sub ExportParasolid(filePath As String, outDirPath As String)\n\n        Try\n        \n            Dim classFact As SwDMClassFactory = New SwDMClassFactory()\n            Dim app As ISwDMApplication = classFact.GetApplication(LICENSE_KEY)\n\n            Dim docType As SwDmDocumentType\n            Dim doc As ISwDMDocument = OpenDocument(app, filePath, True, docType)\n\n            If docType <> SwDmDocumentType.swDmDocumentPart Then\n                Throw New InvalidCastException("Only part documents are supported")\n            End If\n\n            Dim confNames As String() = CType(doc.ConfigurationManager.GetConfigurationNames(), String())\n\n            If confNames Is Nothing OrElse confNames.Length = 0 Then\n                Throw New NullReferenceException("No configurations found")\n            End If\n\n            If Not Directory.Exists(outDirPath) Then\n                Directory.CreateDirectory(outDirPath)\n            End If\n\n            For Each confName As String In confNames\n\n                Console.WriteLine(String.Format("Extracting parasolid bodies from the \'{0}\'", confName))\n                Dim conf As ISwDMConfiguration2 = doc.ConfigurationManager.GetConfigurationByName(confName)\n\n                Dim outFilePath As String = Path.Combine(outDirPath, String.Format("{0}_{1}.xmp_bin", Path.GetFileNameWithoutExtension(filePath), confName))\n                Dim err As SwDmBodyError = conf.GetPartitionStream(outFilePath)\n                If err <> SwDmBodyError.swDmBodyErrorNone Then\n                    PrintError(String.Format("Failed to export parasolid body of \'{1}\' in \'{2}\'", confName, filePath), True)\n                End If\n\n            Next\n        \n        Catch ex As Exception\n            PrintError(ex.Message, False)\n        End Try\n\n    End Sub\n\n    Private Shared Function OpenDocument(app As ISwDMApplication, filePath As String, [readOnly] As Boolean, Optional ByRef docType As SwDmDocumentType = SwDmDocumentType.swDmDocumentUnknown) As ISwDMDocument\n\n        docType = SwDmDocumentType.swDmDocumentUnknown\n\n        Select Case Path.GetExtension(filePath).ToLower()\n            Case ".sldprt"\n                docType = SwDmDocumentType.swDmDocumentPart\n            Case ".sldasm"\n                docType = SwDmDocumentType.swDmDocumentAssembly\n            Case ".slddrw"\n                docType = SwDmDocumentType.swDmDocumentDrawing\n        End Select\n\n        Dim err As SwDmDocumentOpenError\n        Dim doc As ISwDMDocument = app.GetDocument(filePath, SwDmDocumentType.swDmDocumentPart, [readOnly], err)\n\n        If doc Is Nothing Then\n            Throw New NullReferenceException(String.Format("Failed to open document: {0}", err))\n        End If\n\n        Return doc\n\n    End Function\n    \n    Private Shared Sub PrintError(msg As String, isWarning As Boolean)\n        \n        Dim color As ConsoleColor\n        \n        If isWarning Then\n            color = ConsoleColor.DarkYellow\n        Else\n            color = ConsoleColor.DarkRed\n        End If\n        \n        Console.WriteLine(msg)\n        Console.ResetColor()\n        \n    End Sub\n\nEnd Class\n"@\n\nAdd-Type -TypeDefinition $Source -ReferencedAssemblies $Assem -Language VisualBasic\n\n[Exporter]::LoadLibrary($Assem)\n[Exporter]::ExportParasolid($inputFilePath, $outDirPath)\n')),(0,o.kt)("h3",{id:"export-parasolidcmd"},"export-parasolid.cmd"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cmd"},'SET inputFilePath=%1\nSET outDirPath=%2\n\nPowerShell -NoProfile -ExecutionPolicy Bypass -File "%~dp0export-parasolid.ps1" %inputFilePath% %outDirPath%\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5c06 ",(0,o.kt)("em",{parentName:"li"},"SolidWorks.Interop.swdocumentmgr.dll")," \u590d\u5236\u5230\u521b\u5efa\u4e0a\u8ff0\u811a\u672c\u7684\u6587\u4ef6\u5939\u4e2d\u3002PowerShell \u811a\u672c\u57fa\u4e8e .NET Framework 2.0\uff0c\u56e0\u6b64 SOLIDWORKS \u6587\u6863\u7ba1\u7406\u5668\u4e92\u64cd\u4f5c\u5fc5\u987b\u9488\u5bf9\u6b64\u6846\u67b6\u3002\u8be5 dll \u53ef\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u627e\u5230\uff1a",(0,o.kt)("strong",{parentName:"li"},"SOLIDWORKS \u5b89\u88c5\u6587\u4ef6\u5939"),"\\api\\redist\\CLR2\\SolidWorks.Interop.swdocumentmgr.dll")),(0,o.kt)("p",null,"\u6216\u8005\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e92\u64cd\u4f5c\u7684\u5b8c\u6574\u8def\u5f84\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0d\u9700\u8981\u5c06\u6b64 dll \u590d\u5236\u5230\u811a\u672c\u6587\u4ef6\u5939\u4e2d\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ps1"},'$Assem = ( \n   "SolidWorks.Interop.swdocumentmgr.dll \u7684\u5b8c\u6574\u8def\u5f84"\n    ) \n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u542f\u52a8\u547d\u4ee4\u884c\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bat"},"> [export-parasolid.cmd \u7684\u5b8c\u6574\u8def\u5f84] [\u8f93\u5165 SOLIDWORKS \u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84] [\u8f93\u51fa\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84]\n")),(0,o.kt)("p",null,"\u7ed3\u679c\u662f\u5c06\u6587\u4ef6\u7684\u6240\u6709\u914d\u7f6e\u7684\u6240\u6709\u5b9e\u4f53\u5bfc\u51fa\u5230\u6307\u5b9a\u76ee\u5f55\uff08\u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u81ea\u52a8\u521b\u5efa\uff09\u3002\u8f93\u51fa\u6587\u4ef6\u7684\u547d\u540d\u65b9\u5f0f\u5982\u4e0b\uff1a",(0,o.kt)("em",{parentName:"p"},"[\u539f\u59cb\u6587\u4ef6\u540d]","_","[\u914d\u7f6e\u540d]",".xmp_bin"),"\u3002\u8fdb\u7a0b\u65e5\u5fd7\u76f4\u63a5\u663e\u793a\u5728\u63a7\u5236\u53f0\u4e2d\uff1a"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Parasolid \u5bfc\u51fa\u63a7\u5236\u53f0\u8f93\u51fa",src:t(2672).Z,width:"843",height:"449"})))}m.isMDXComponent=!0},2672:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/export-parasolid-console-output-1c62765a995997f6dfc125970827ce27.png"}}]);