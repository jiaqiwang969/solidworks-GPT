"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[33880],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>w});var s=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=s.createContext({}),c=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return s.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},h=s.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(t),h=o,w=p["".concat(l,".").concat(h)]||p[h]||u[h]||a;return t?s.createElement(w,r(r({ref:n},d),{},{components:t})):s.createElement(w,r({ref:n},d))}));function w(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=h;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:o,r[1]=i;for(var c=2;c<a;c++)r[c]=t[c];return s.createElement.apply(null,r)}return s.createElement.apply(null,t)}h.displayName="MDXCreateElement"},4979:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=t(87462),o=(t(67294),t(3905));const a={caption:"Assign Random Colors to Sketches",title:"Macro to Assign Random Colors to Sketches in a Document"},r=void 0,i={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/sketch/assign-random-color/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/sketch/assign-random-color/index",title:"Macro to Assign Random Colors to Sketches in a Document",description:"This VBA macro assigns random colors to all sketches in a SOLIDWORKS part or assembly, with options to skip sketches that already have assigned colors and to select only unabsorbed sketches.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/sketch/assign-random-color/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/sketch/assign-random-color",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/sketch/assign-random-color/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/sketch/assign-random-color/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/sketch/assign-random-color/index.md",tags:[],version:"current",frontMatter:{caption:"Assign Random Colors to Sketches",title:"Macro to Assign Random Colors to Sketches in a Document"},sidebar:"tutorialSidebar",previous:{title:"index",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/sketch/align-line-along-axis/"},next:{title:"index",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/sketch/convert-arc-to-circle/"}},l={},c=[{value:"This VBA macro assigns random colors to all sketches in a SOLIDWORKS part or assembly, with options to skip sketches that already have assigned colors and to select only unabsorbed sketches.",id:"this-vba-macro-assigns-random-colors-to-all-sketches-in-a-solidworks-part-or-assembly-with-options-to-skip-sketches-that-already-have-assigned-colors-and-to-select-only-unabsorbed-sketches",level:2},{value:"Line Colors",id:"line-colors",level:2}],d={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,s.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"this-vba-macro-assigns-random-colors-to-all-sketches-in-a-solidworks-part-or-assembly-with-options-to-skip-sketches-that-already-have-assigned-colors-and-to-select-only-unabsorbed-sketches"},"This VBA macro assigns random colors to all sketches in a SOLIDWORKS part or assembly, with options to skip sketches that already have assigned colors and to select only unabsorbed sketches."),(0,o.kt)("p",null,"This VBA macro assigns random colors to all sketches in the active part or assembly."),(0,o.kt)("p",null,"The macro can be configured to skip sketches that already have assigned colors and to select only unabsorbed sketches (i.e., sketches that are not used in other features)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},"Const SKIP_ASSIGNED As Boolean = False 'Process all sketches (including sketches with assigned colors)\nConst UNABSORBED_ONLY As Boolean = False 'Process all sketches (absorbed and unabsorbed)\n")),(0,o.kt)("p",null,"The colors are assigned at the feature appearance level."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Const SKIP_ASSIGNED As Boolean = True\nConst UNABSORBED_ONLY As Boolean = True\n\nDim swApp As SldWorks.SldWorks\nDim swModel As SldWorks.ModelDoc2\n\nSub main()\n\n    Set swApp = Application.SldWorks\n\n    Set swModel = swApp.ActiveDoc\n    \n    Dim vFeats As Variant\n    vFeats = CollectAllSketchFeatures(swModel.FirstFeature)\n    \n    If Not IsEmpty(vFeats) Then\n        \n        Dim i As Integer\n        \n        For i = 0 To UBound(vFeats)\n            \n            Dim swFeat As SldWorks.Feature\n            Set swFeat = vFeats(i)\n            \n            If Not SKIP_ASSIGNED Or Not HasAppearence(swFeat) Then\n                \n                If Not UNABSORBED_ONLY Or Not IsAbsorbed(swFeat) Then\n                    \n                    Dim dMatPrps(8) As Double\n                    dMatPrps(0) = Rnd(): dMatPrps(1) = Rnd(): dMatPrps(2) = Rnd()\n                    dMatPrps(3) = 1: dMatPrps(4) = 1: dMatPrps(5) = 0.5\n                    dMatPrps(6) = 0.4: dMatPrps(7) = 0: dMatPrps(8) = 0\n                    \n                    Debug.Print "Assigning color " & dMatPrps(0) * 255 & ";" & dMatPrps(1) * 255 & ";" & dMatPrps(2) * 255 & " to " & swFeat.Name\n                    \n                    swFeat.SetMaterialPropertyValues2 dMatPrps, swInConfigurationOpts_e.swThisConfiguration, Empty\n                    \n                End If\n                \n            End If\n            \n        Next\n        \n    End If\n\nEnd Sub\n\nFunction IsAbsorbed(feat As SldWorks.Feature) As Boolean\n    \n    Dim vFeatChildren As Variant\n    vFeatChildren = feat.GetChildren()\n    \n    IsAbsorbed = Not IsEmpty(vFeatChildren)\n    \nEnd Function\n\nFunction HasAppearence(feat As SldWorks.Feature) As Boolean\n    \n    Dim vMatPrpVals As Variant\n    vMatPrpVals = feat.GetMaterialPropertyValues2(swInConfigurationOpts_e.swThisConfiguration, Empty)\n            \n    HasAppearence = vMatPrpVals(0) <> -1 And vMatPrpVals(1) <> -1 And vMatPrpVals(2) <> -1\n    \nEnd Function\n\nFunction CollectAllSketchFeatures(firstFeat As SldWorks.Feature) As Variant\n    \n    Const SKETCH_FEAT_TYPE_NAME As String = "ProfileFeature"\n    Const SKETCH_3D_FEAT_TYPE_NAME As String = "3DProfileFeature"\n\n    Dim swFeats() As SldWorks.Feature\n\n    Dim swFeat As SldWorks.Feature\n    Set swFeat = firstFeat\n    \n    While Not swFeat Is Nothing\n    \n        If swFeat.GetTypeName2 = SKETCH_FEAT_TYPE_NAME Or _\n            swFeat.GetTypeName2 = SKETCH_3D_FEAT_TYPE_NAME Then\n            \n            If (Not swFeats) = -1 Then\n                ReDim swFeats(0)\n            Else\n                ReDim Preserve swFeats(UBound(swFeats) + 1)\n            End If\n            \n            Set swFeats(UBound(swFeats)) = swFeat\n            \n        End If\n        \n        Set swFeat = swFeat.GetNextFeature\n        \n    Wend\n    \n    If (Not swFeats) = -1 Then\n        CollectAllSketchFeatures = Empty\n    Else\n        CollectAllSketchFeatures = swFeats\n    End If\n    \nEnd Function\n')),(0,o.kt)("h2",{id:"line-colors"},"Line Colors"),(0,o.kt)("p",null,"Here is another version of the macro that assigns colors as line colors instead of feature appearances."),(0,o.kt)("p",null,"This macro assigns random colors to all selected sketches or, if no sketches are selected, to all sketches. The ",(0,o.kt)("strong",{parentName:"p"},"UNABSORBED_ONLY")," option is considered only when no sketches are selected."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Const UNUBSORBED_ONLY As Boolean = True\n\nDim swApp As SldWorks.SldWorks\nDim swModel As SldWorks.ModelDoc2\nDim swPart As SldWorks.PartDoc\n\nSub main()\n\n    Set swApp = Application.SldWorks\n\n    Set swModel = swApp.ActiveDoc\n        \n    Set swPart = swModel\n        \n    Dim vFeats As Variant\n    \n    vFeats = CollectSelectedSketches(swModel)\n    \n    If IsEmpty(vFeats) Then\n        vFeats = CollectAllSketchFeatures(swModel.FirstFeature)\n    End If\n    \n    If Not IsEmpty(vFeats) Then\n        \n        Dim i As Integer\n        \n        For i = 0 To UBound(vFeats)\n            \n            Dim swFeat As SldWorks.Feature\n            Set swFeat = vFeats(i)\n                        \n            If False <> swFeat.Select2(False, -1) Then\n                swPart.SetLineColor RGB(CInt(255 * Rnd()), CInt(255 * Rnd()), CInt(255 * Rnd()))\n            Else\n                Err.Raise vbError, "", "Failed to select " & swFeat.Name\n            End If\n            \n        Next\n        \n    End If\n    \n    swModel.ClearSelection2 True\n\nEnd Sub\n\nFunction IsAbsorbed(feat As SldWorks.Feature) As Boolean\n    \n    Dim vFeatChildren As Variant\n    vFeatChildren = feat.GetChildren()\n    \n    IsAbsorbed = Not IsEmpty(vFeatChildren)\n    \nEnd Function\n\nFunction CollectSelectedSketches(model As SldWorks.ModelDoc2) As Variant\n    \n    Dim swFeats() As SldWorks.Feature\n\n    Dim swSelMgr As SldWorks.SelectionMgr\n    \n    Set swSelMgr = model.SelectionManager\n    \n    Dim i As Integer\n    \n    For i = 1 To swSelMgr.GetSelectedObjectCount2(-1)\n        \n        If swSelMgr.GetSelectedObjectType3(i, -1) = swSelectType_e.swSelSKETCHES Then\n            \n            If (Not swFeats) = -1 Then\n                ReDim swFeats(0)\n            Else\n                ReDim Preserve swFeats(UBound(swFeats) + 1)\n            End If\n            \n            Set swFeats(UBound(swFeats)) = swSelMgr.GetSelectedObject6(i, -1)\n            \n        End If\n        \n    Next\n    \n    If (Not swFeats) = -1 Then\n        CollectSelectedSketches = Empty\n    Else\n        CollectSelectedSketches = swFeats\n    End If\n\nEnd Function\n\nFunction CollectAllSketchFeatures(firstFeat As SldWorks.Feature) As Variant\n    \n    Const SKETCH_FEAT_TYPE_NAME As String = "ProfileFeature"\n    Const SKETCH_3D_FEAT_TYPE_NAME As String = "3DProfileFeature"\n\n    Dim swFeats() As SldWorks.Feature\n\n    Dim swFeat As SldWorks.Feature\n    Set swFeat = firstFeat\n    \n    While Not swFeat Is Nothing\n    \n        If swFeat.GetTypeName2 = SKETCH_FEAT_TYPE_NAME Or _\n            swFeat.GetTypeName2 = SKETCH_3D_FEAT_TYPE_NAME Then\n            \n            If Not UNUBSORBED_ONLY Or Not IsAbsorbed(swFeat) Then\n            \n                If (Not swFeats) = -1 Then\n                    ReDim swFeats(0)\n                Else\n                    ReDim Preserve swFeats(UBound(swFeats) + 1)\n                End If\n                \n                Set swFeats(UBound(swFeats)) = swFeat\n            \n            End If\n            \n        End If\n        \n        Set swFeat = swFeat.GetNextFeature\n        \n    Wend\n    \n    If (Not swFeats) = -1 Then\n        CollectAllSketchFeatures = Empty\n    Else\n        CollectAllSketchFeatures = swFeats\n    End If\n    \nEnd Function\n')))}u.isMDXComponent=!0}}]);