"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[63413],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>D});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),w=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=w(e.components);return n.createElement(l.Provider,{value:t},e.children)},M="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),M=w(a),d=s,D=M["".concat(l,".").concat(d)]||M[d]||m[d]||r;return a?n.createElement(D,i(i({ref:t},c),{},{components:a})):n.createElement(D,i({ref:t},c))}));function D(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,i=new Array(r);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[M]="string"==typeof e?e:s,i[1]=o;for(var w=2;w<r;w++)i[w]=a[w];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},16789:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>w});var n=a(87462),s=(a(67294),a(3905));const r={caption:"\u7ffb\u8f6c\u6700\u540e\u4e00\u4e2a\u88c5\u914d\u4f53\u4e2d\u63d2\u5165\u7684\u5bf9\u9f50\u5173\u7cfb",title:"\u5728SOLIDWORKS\u88c5\u914d\u4f53\u4e2d\u7ffb\u8f6c\u6700\u540e\u4e00\u4e2a\u63d2\u5165\u7684\u5bf9\u9f50\u5173\u7cfb\u7684\u5b8f"},i=void 0,o={unversionedId:"codestack/solidworks-api/document/assembly/mates/flip-last/index",id:"codestack/solidworks-api/document/assembly/mates/flip-last/index",title:"\u5728SOLIDWORKS\u88c5\u914d\u4f53\u4e2d\u7ffb\u8f6c\u6700\u540e\u4e00\u4e2a\u63d2\u5165\u7684\u5bf9\u9f50\u5173\u7cfb\u7684\u5b8f",description:"\u8fd9\u662f\u4e00\u4e2aVBA\u5b8f\uff0c\u7528\u4e8e\u5728SOLIDWORKS\u88c5\u914d\u4f53\u7279\u5f81\u7ba1\u7406\u5668\u6811\u4e2d\u67e5\u627e\u6700\u540e\u4e00\u4e2a\u5bf9\u9f50\u5173\u7cfb\uff0c\u5e76\u5c06\u5176\u5bf9\u9f50\u65b9\u5f0f\u4ece\u53cd\u5bf9\u9f50\u7ffb\u8f6c\u4e3a\u5bf9\u9f50\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/document/assembly/mates/flip-last/index.md",sourceDirName:"codestack/solidworks-api/document/assembly/mates/flip-last",slug:"/codestack/solidworks-api/document/assembly/mates/flip-last/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/assembly/mates/flip-last/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/document/assembly/mates/flip-last/index.md",tags:[],version:"current",frontMatter:{caption:"\u7ffb\u8f6c\u6700\u540e\u4e00\u4e2a\u88c5\u914d\u4f53\u4e2d\u63d2\u5165\u7684\u5bf9\u9f50\u5173\u7cfb",title:"\u5728SOLIDWORKS\u88c5\u914d\u4f53\u4e2d\u7ffb\u8f6c\u6700\u540e\u4e00\u4e2a\u63d2\u5165\u7684\u5bf9\u9f50\u5173\u7cfb\u7684\u5b8f"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u5728\u5750\u6807\u7cfb\u4e4b\u95f4\u6dfb\u52a0\u914d\u5408\u5173\u7cfb",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/assembly/mates/add-mate-between-coordinate-systems/"},next:{title:"\u4f7f\u7528SOLIDWORKS\u548cWindows API\u8fd0\u884c\u529b\u5b66\u914d\u5bf9\u547d\u4ee4",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/assembly/mates/force-mate/"}},l={},w=[{value:"\u8fd9\u662f\u4e00\u4e2aVBA\u5b8f\uff0c\u7528\u4e8e\u5728SOLIDWORKS\u88c5\u914d\u4f53\u7279\u5f81\u7ba1\u7406\u5668\u6811\u4e2d\u67e5\u627e\u6700\u540e\u4e00\u4e2a\u5bf9\u9f50\u5173\u7cfb\uff0c\u5e76\u5c06\u5176\u5bf9\u9f50\u65b9\u5f0f\u4ece\u53cd\u5bf9\u9f50\u7ffb\u8f6c\u4e3a\u5bf9\u9f50\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002",id:"\u8fd9\u662f\u4e00\u4e2avba\u5b8f\u7528\u4e8e\u5728solidworks\u88c5\u914d\u4f53\u7279\u5f81\u7ba1\u7406\u5668\u6811\u4e2d\u67e5\u627e\u6700\u540e\u4e00\u4e2a\u5bf9\u9f50\u5173\u7cfb\u5e76\u5c06\u5176\u5bf9\u9f50\u65b9\u5f0f\u4ece\u53cd\u5bf9\u9f50\u7ffb\u8f6c\u4e3a\u5bf9\u9f50\u53cd\u4e4b\u4ea6\u7136",level:2}],c={toc:w},M="wrapper";function m(e){let{components:t,...a}=e;return(0,s.kt)(M,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"\u8fd9\u662f\u4e00\u4e2avba\u5b8f\u7528\u4e8e\u5728solidworks\u88c5\u914d\u4f53\u7279\u5f81\u7ba1\u7406\u5668\u6811\u4e2d\u67e5\u627e\u6700\u540e\u4e00\u4e2a\u5bf9\u9f50\u5173\u7cfb\u5e76\u5c06\u5176\u5bf9\u9f50\u65b9\u5f0f\u4ece\u53cd\u5bf9\u9f50\u7ffb\u8f6c\u4e3a\u5bf9\u9f50\u53cd\u4e4b\u4ea6\u7136"},"\u8fd9\u662f\u4e00\u4e2aVBA\u5b8f\uff0c\u7528\u4e8e\u5728SOLIDWORKS\u88c5\u914d\u4f53\u7279\u5f81\u7ba1\u7406\u5668\u6811\u4e2d\u67e5\u627e\u6700\u540e\u4e00\u4e2a\u5bf9\u9f50\u5173\u7cfb\uff0c\u5e76\u5c06\u5176\u5bf9\u9f50\u65b9\u5f0f\u4ece\u53cd\u5bf9\u9f50\u7ffb\u8f6c\u4e3a\u5bf9\u9f50\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002"),(0,s.kt)("p",null,"\u8fd9\u4e2aVBA\u5b8f\u4f1a\u5728\u6d3b\u52a8\u7684SOLIDWORKS\u88c5\u914d\u4f53\u7684\u7279\u5f81\u7ba1\u7406\u5668\u6811\u4e2d\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5bf9\u9f50\u5173\u7cfb\u3002"),(0,s.kt)("p",null,"\u5bf9\u4e8e\u8fd9\u4e2a\u5bf9\u9f50\u5173\u7cfb\uff0c\u5c06\u5176\u5bf9\u9f50\u65b9\u5f0f\u4ece\u53cd\u5bf9\u9f50\u7ffb\u8f6c\u4e3a\u5bf9\u9f50\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swAssy As SldWorks.AssemblyDoc\n    \n    Set swAssy = swApp.ActiveDoc\n    \n    Dim swLastMate As SldWorks.Mate2\n    \n    Set swLastMate = GetLastMate(swAssy)\n    \n    Dim curAlignment As swMateAlign_e\n    curAlignment = swLastMate.Alignment\n    \n    Dim destAlignment As swMateAlign_e\n    \n    If curAlignment = swMateAlignALIGNED Then\n        destAlignment = swMateAlignANTI_ALIGNED\n    ElseIf curAlignment = swMateAlignANTI_ALIGNED Then\n        destAlignment = swMateAlignALIGNED\n    Else\n        Exit Sub\n    End If\n    \n    Dim swMateFeat As SldWorks.Feature\n    Set swMateFeat = swLastMate\n    \n    Dim swMateFeatData As SldWorks.MateFeatureData\n    \n    Set swMateFeatData = swMateFeat.GetDefinition\n    \n    Select Case swMateFeatData.TypeName\n        Case swMateType_e.swMateANGLE\n            Dim swAngleMateFeatData As SldWorks.AngleMateFeatureData\n            Set swAngleMateFeatData = swMateFeatData\n            swAngleMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateCAMFOLLOWER\n            Dim swCamFollowerMateFeatData As SldWorks.CamFollowerMateFeatureData\n            Set swCamFollowerMateFeatData = swMateFeatData\n            swCamFollowerMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateCOINCIDENT\n            Dim swCoincidentMateFeatData As SldWorks.CoincidentMateFeatureData\n            Set swCoincidentMateFeatData = swMateFeatData\n            swCoincidentMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateCONCENTRIC\n            Dim swConcentricMateFeatData As SldWorks.ConcentricMateFeatureData\n            Set swConcentricMateFeatData = swMateFeatData\n            swConcentricMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateDISTANCE\n            Dim swDistanceMateFeatData As SldWorks.DistanceMateFeatureData\n            Set swDistanceMateFeatData = swMateFeatData\n            swDistanceMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateHINGE\n            Dim swHingeMateFeatData As SldWorks.HingeMateFeatureData\n            Set swHingeMateFeatData = swMateFeatData\n            swHingeMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMatePARALLEL\n            Dim swParallelMateFeatData As SldWorks.ParallelMateFeatureData\n            Set swParallelMateFeatData = swMateFeatData\n            swParallelMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMatePROFILECENTER\n            Dim swProfileCenterMateFeatData As SldWorks.ProfileCenterMateFeatureData\n            Set swProfileCenterMateFeatData = swMateFeatData\n            swProfileCenterMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateSCREW\n            Dim swScrewMateFeatData As SldWorks.ScrewMateFeatureData\n            Set swScrewMateFeatData = swMateFeatData\n            swScrewMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateSLOT\n            Dim swSlotMateFeatData As SldWorks.SlotMateFeatureData\n            Set swSlotMateFeatData = swMateFeatData\n            swSlotMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateSYMMETRIC\n            Dim swSymmetricMateFeatData As SldWorks.SymmetricMateFeatureData\n            Set swSymmetricMateFeatData = swMateFeatData\n            swSymmetricMateFeatData.MateAlignment = destAlignment\n        Case swMateType_e.swMateTANGENT\n            Dim swTangentMateFeatData As SldWorks.TangentMateFeatureData\n            Set swTangentMateFeatData = swMateFeatData\n            swTangentMateFeatData.MateAlignment = destAlignment\n        Case Else\n            Err.Raise vbError, "", "\u4e0d\u652f\u6301\u7684\u5bf9\u9f50\u5173\u7cfb\u7c7b\u578b"\n    End Select\n        \n    swMateFeat.ModifyDefinition swMateFeatData, swAssy, Nothing\n    \nEnd Sub\n\nFunction GetLastMate(assm As SldWorks.AssemblyDoc) As SldWorks.Mate2\n    \n    Dim swMates() As SldWorks.Feature\n    Dim isInit As Boolean\n    isInit = False\n    \n    Dim swModel As SldWorks.ModelDoc2\n    Set swModel = assm\n    \n    Dim swMateGroupFeat As SldWorks.Feature\n    \n    Dim featIndex As Integer\n    featIndex = 0\n        \n    Do\n        Set swMateGroupFeat = swModel.FeatureByPositionReverse(featIndex)\n        \n        featIndex = featIndex + 1\n    Loop While swMateGroupFeat.GetTypeName2() <> "MateGroup"\n    \n    Dim swLastMateFeat As SldWorks.Feature\n    \n    Dim swMateFeat As SldWorks.Feature\n    \n    Set swMateFeat = swMateGroupFeat.GetFirstSubFeature\n    \n    While Not swMateFeat Is Nothing\n        \n        If TypeOf swMateFeat.GetSpecificFeature2() Is SldWorks.Mate2 Then\n            Set swLastMateFeat = swMateFeat\n        End If\n        \n        Set swMateFeat = swMateFeat.GetNextSubFeature\n    Wend\n    \n    Debug.Print swLastMateFeat.Name\n    \n    Set GetLastMate = swLastMateFeat.GetSpecificFeature2\n    \nEnd Function\n')))}m.isMDXComponent=!0}}]);