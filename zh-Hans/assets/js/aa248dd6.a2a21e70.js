"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[76803],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||a;return n?o.createElement(f,i(i({ref:t},m),{},{components:n})):o.createElement(f,i({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},43501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const a={layout:"sw-tool",title:"Macro to export SOLIDWORKS file to multiple formats",caption:"Export To Multiple Formats",description:"VBA macro to export file (or optionally all configuration or drawing sheets) to multiple formats",image:"batch-export.svg",labels:["export"],group:"Import/Export"},i=void 0,s={unversionedId:"codestack-clone/solidworks-api/import-export/export-multi-formats/index",id:"codestack-clone/solidworks-api/import-export/export-multi-formats/index",title:"Macro to export SOLIDWORKS file to multiple formats",description:"VBA macro to export file (or optionally all configuration or drawing sheets) to multiple formats",source:"@site/docs/codestack-clone/solidworks-api/import-export/export-multi-formats/index.md",sourceDirName:"codestack-clone/solidworks-api/import-export/export-multi-formats",slug:"/codestack-clone/solidworks-api/import-export/export-multi-formats/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-api/import-export/export-multi-formats/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/solidworks-api/import-export/export-multi-formats/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"Macro to export SOLIDWORKS file to multiple formats",caption:"Export To Multiple Formats",description:"VBA macro to export file (or optionally all configuration or drawing sheets) to multiple formats",image:"batch-export.svg",labels:["export"],group:"Import/Export"},sidebar:"tutorialSidebar",previous:{title:"Export assembly or part to IFC 2x3 or 4 using SOLIDWORKS API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-api/import-export/export-ifc/"},next:{title:"Macro to save active drawing as PDF file into selected output folder and close drawing",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-api/import-export/export-pdf-browse-folder/"}},l={},p=[{value:"Configuration",id:"configuration",level:2},{value:"Output Name Template",id:"output-name-template",level:3},{value:"Export Options",id:"export-options",level:3},{value:"Include Component Quantity Into File Name",id:"include-component-quantity-into-file-name",level:3},{value:"Process All Configuration",id:"process-all-configuration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}],m={toc:p},u="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,o.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Save File dialog with the list of supported formats",src:n(71703).Z,width:"952",height:"631"}),"{ width=500 }"),(0,r.kt)("p",null,"This VBA macro allows exporting active SOLIDWORKS document to multiple formats supported by SOLIDWORKS. Macro supports flexible options for specifying file path and allows to export to multiple formats at the same time."),(0,r.kt)("p",null,"Macro will automatically create directories if not exist."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"Macro can be configured by modifying the ",(0,r.kt)("strong",{parentName:"p"},"OUT_NAME_TEMPLATES"),", ",(0,r.kt)("strong",{parentName:"p"},"OUT_FOLDER")," and ",(0,r.kt)("strong",{parentName:"p"},"ALL_CONFIGS")," constants"),(0,r.kt)("h3",{id:"output-name-template"},"Output Name Template"),(0,r.kt)("p",null,"This constant allows to specify template for the output path of the export files. It should contain extension which defines the export format."),(0,r.kt)("p",null,"This can be either absolute or relative path. If later, result will be saved relative to the file directory or to the directory specified in ",(0,r.kt)("strong",{parentName:"p"},"OUT_FOLDER")," constant if not empty."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"OUT_FOLDER")," can be passed as the ",(0,r.kt)("a",{parentName:"p",href:"https://cadplus.xarial.com/macro-arguments/"},"parameter to the macro"))),(0,r.kt)("p",null,"The following placeholders are supported"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"<","_","FileName","_","> - name of the document file (without extension)"),(0,r.kt)("li",{parentName:"ul"},"<","_","ConfName","_","> - name of the active configuration of this file. This changes if ",(0,r.kt)("strong",{parentName:"li"},"ALL_CONFIGS")," option is set to ",(0,r.kt)("strong",{parentName:"li"},"True")),(0,r.kt)("li",{parentName:"ul"},"<","[PropertyName]","> - any name of the custom property to read value from, e.g. \\<PartNo",">"," is replaced with the value of custom property ",(0,r.kt)("em",{parentName:"li"},"PartNo"),". Property will attempt to be read from configuration and if not available, generic property is used.")),(0,r.kt)("p",null,"Placeholders will be resolved for at runtime."),(0,r.kt)("p",null,"Configure the values in the beginning of the macro, by filling the constant with ",(0,r.kt)("strong",{parentName:"p"},"Array")," function. Specify as many array elements as required."),(0,r.kt)("p",null,"Following example exports active document to PDF, DXF and JPG and names the output file after the ",(0,r.kt)("strong",{parentName:"p"},"PartNo")," custom property. Files will be saved to the same folder as original file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Sub main()\n        \n    OUT_NAME_TEMPLATES = Array("<PartNo>.pdf", "<PartNo>.dxf", "<PartNo>.jpg")\n')),(0,r.kt)("p",null,"Following example exports active file to parasolid format into the ",(0,r.kt)("strong",{parentName:"p"},"D:\\Exports")," folder. File is named with the name of the original file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Sub main()\n        \n    OUT_NAME_TEMPLATES = Array("D:\\Exports\\<_FileName_>.x_t")\n')),(0,r.kt)("h3",{id:"export-options"},"Export Options"),(0,r.kt)("p",null,"Export options for STEP format can be configured by changing the value of the ",(0,r.kt)("strong",{parentName:"p"},"STEP_VERSION")," constant. Set it to ",(0,r.kt)("strong",{parentName:"p"},"214")," for ",(0,r.kt)("strong",{parentName:"p"},"AP214")," format or to ",(0,r.kt)("strong",{parentName:"p"},"203")," to ",(0,r.kt)("strong",{parentName:"p"},"AP203")," format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},"Const STEP_VERSION As Long = 214 '203 or 214\n")),(0,r.kt)("p",null,"To export 3D PDF set the ",(0,r.kt)("strong",{parentName:"p"},"PDF_3D")," constant to ",(0,r.kt)("strong",{parentName:"p"},"True")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},"Const PDF_3D As Boolean = True\n")),(0,r.kt)("h3",{id:"include-component-quantity-into-file-name"},"Include Component Quantity Into File Name"),(0,r.kt)("p",null,"If this macro is run for all components of the assembly, it might be required to include the BOM quantity into the file name. Use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/codestack/solidworks-api/document/assembly/components/write-quantities/"},"Write component quantity in the SOLIDWORKS assembly to custom property\n")," macro. Run this macro for the assembly before exporting to create custom property with the quantity value and then use ",(0,r.kt)("strong",{parentName:"p"},"\\<Qty",">")," placeholder in order to include this into the output file name."),(0,r.kt)("h3",{id:"process-all-configuration"},"Process All Configuration"),(0,r.kt)("p",null,"If ",(0,r.kt)("strong",{parentName:"p"},"ALL_CONFIGS")," constant is set to ",(0,r.kt)("strong",{parentName:"p"},"True")," macro will activate all configuration (for assembly and part) or all sheets (for drawing) one-by-one and run export command."),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("p",null,"If macro reports an error, in some cases it might not be immediately evident what is causing an error as the error details are 'swallowed' by exception handler. In order to disable errors handling and reveal the exact line causing the error comment all ",(0,r.kt)("em",{parentName:"p"},"On Error GoTo catch_")," lines in the code by placing the apostrophe ' symbol at the beginning of the line as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb",metastring:"jagged",jagged:!0},"Sub main()\n        \n    Set swApp = Application.SldWorks\n    \ntry_:\n    'On Error GoTo catch_\n")),(0,r.kt)("p",null,"Please submit the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/xarial/codestack/issues/new?labels=bug"},"bug report")," and attach snapshot of this error and model used to reproduce (if possible)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Const ALL_CONFIGS As Boolean = False\nConst OUT_FOLDER As String = ""\nConst STEP_VERSION As Long = 214 \'203 or 214\nConst PDF_3D As Boolean = False \'True to export 3D PDF\n\nDim OUT_NAME_TEMPLATES As Variant\n\nDim swApp As SldWorks.SldWorks\n\nSub main()\n        \n    Dim origStepVersion As Long\n        \n    OUT_NAME_TEMPLATES = Array("PDFs\\<_FileName_>_<_ConfName_>_<PartNo>.pdf", "IMGs\\<_FileName_>_<_ConfName_>_<PartNo>.jpg")\n    \n    Set swApp = Application.SldWorks\n    \ntry_:\n    On Error GoTo catch_\n    \n    Dim swModel As SldWorks.ModelDoc2\n    Set swModel = swApp.ActiveDoc\n    \n    If swModel Is Nothing Then\n        Err.Raise vbError, "", "Please open document"\n    End If\n    \n    If swModel.GetPathName() = "" Then\n        Err.Raise vbError, "", "Please save the model"\n    End If\n    \n    Dim outFolder As String\n    \n    If Not TryGetOutDirFromArguments(outFolder) Then\n        outFolder = OUT_FOLDER\n    End If\n    \n    ReadOptions origStepVersion\n    SetupOptions STEP_VERSION\n    \n    ExportFile swModel, OUT_NAME_TEMPLATES, ALL_CONFIGS, outFolder\n    \n    GoTo finally_\n    \ncatch_:\n    swApp.SendMsgToUser2 Err.Description, swMessageBoxIcon_e.swMbStop, swMessageBoxBtn_e.swMbOk\nfinally_:\n\n    SetupOptions origStepVersion\n\nEnd Sub\n\nSub ReadOptions(ByRef stepVersion As Long)\n\n    stepVersion = swApp.GetUserPreferenceIntegerValue(swUserPreferenceIntegerValue_e.swStepAP)\n    \nEnd Sub\n\nSub SetupOptions(stepVersion As Long)\n    \n    If False = swApp.SetUserPreferenceIntegerValue(swUserPreferenceIntegerValue_e.swStepAP, stepVersion) Then\n        Err.Raise vbError, "", "Failed to set Step Export version to " & stepVersion\n    End If\n    \nEnd Sub\n\nSub ExportFile(model As SldWorks.ModelDoc2, vOutNameTemplates As Variant, allConfigs As Boolean, outFolder As String)\n    \n    Dim i As Integer\n    Dim j As Integer\n    \n    Dim curConf As String\n    \n    If model.GetType() = swDocumentTypes_e.swDocDRAWING Then\n        Dim swDraw As SldWorks.DrawingDoc\n        Set swDraw = model\n        curConf = swDraw.GetCurrentSheet().GetName\n    Else\n        curConf = model.ConfigurationManager.ActiveConfiguration.Name\n    End If\n    \n    Dim vConfs As Variant\n    \n    If allConfigs Then\n        If model.GetType() = swDocumentTypes_e.swDocDRAWING Then\n            vConfs = model.GetSheetNames()\n        Else\n            vConfs = model.GetConfigurationNames()\n        End If\n    Else\n        Dim sConfs(0) As String\n        sConfs(0) = curConf\n        vConfs = sConfs\n    End If\n    \n    For i = 0 To UBound(vConfs)\n    \n        If model.GetType() = swDocumentTypes_e.swDocDRAWING Then\n            curConf = swDraw.ActivateSheet(CStr(vConfs(i)))\n        Else\n            model.ShowConfiguration2 CStr(vConfs(i))\n        End If\n                \n        For j = 0 To UBound(vOutNameTemplates)\n            \n            Dim errs As Long\n            Dim warns As Long\n        \n            Dim outNameTemplate As String\n            outNameTemplate = vOutNameTemplates(j)\n            \n            Dim outFilePath As String\n            outFilePath = ComposeOutFileName(outNameTemplate, model, outFolder)\n\n            Dim outDir As String\n            outDir = Left(outFilePath, InStrRev(outFilePath, "\\"))\n    \n            CreateDirectories outDir\n            \n            Dim swExportData As Object\n            \n            If LCase(GetExtension(outFilePath)) = LCase("pdf") Then\n                Dim swExportPdfData As SldWorks.ExportPdfData\n                Set swExportPdfData = swApp.GetExportFileData(swExportDataFileType_e.swExportPdfData)\n                swExportPdfData.ViewPdfAfterSaving = False\n                swExportPdfData.ExportAs3D = PDF_3D\n                Set swExportData = swExportPdfData\n            Else\n                Set swExportData = Nothing\n            End If\n            \n            If False = model.Extension.SaveAs(outFilePath, swSaveAsVersion_e.swSaveAsCurrentVersion, swSaveAsOptions_e.swSaveAsOptions_Silent, swExportData, errs, warns) Then\n                Err.Raise vberrror, "", "Failed to export to " & outFilePath\n            End If\n            \n        Next\n        \n    Next\n    \n    If model.GetType() = swDocumentTypes_e.swDocDRAWING Then\n        curConf = swDraw.ActivateSheet(curConf)\n    Else\n        model.ShowConfiguration2 curConf\n    End If\n    \nEnd Sub\n\nFunction ComposeOutFileName(template As String, model As SldWorks.ModelDoc2, outFolder As String) As String\n\n    Dim regEx As Object\n    Set regEx = CreateObject("VBScript.RegExp")\n    \n    regEx.Global = True\n    regEx.IgnoreCase = True\n    regEx.Pattern = "<[^>]*>"\n    \n    Dim regExMatches As Object\n    Set regExMatches = regEx.Execute(template)\n    \n    Dim i As Integer\n    \n    Dim outFileName As String\n    outFileName = template\n    \n    For i = regExMatches.Count - 1 To 0 Step -1\n        \n        Dim regExMatch As Object\n        Set regExMatch = regExMatches.Item(i)\n                    \n        Dim tokenName As String\n        tokenName = Mid(regExMatch.Value, 2, Len(regExMatch.Value) - 2)\n        \n        outFileName = Left(outFileName, regExMatch.FirstIndex) & ResolveToken(tokenName, model) & Right(outFileName, Len(outFileName) - (regExMatch.FirstIndex + regExMatch.Length))\n    Next\n    \n    ComposeOutFileName = ReplaceInvalidPathSymbols(GetFullPath(model, outFileName, outFolder))\n    \nEnd Function\n\nFunction ReplaceInvalidPathSymbols(path As String) As String\n    \n    Const REPLACE_SYMB As String = "_"\n    \n    Dim res As String\n    res = Right(path, Len(path) - Len("X:\\"))\n    \n    Dim drive As String\n    drive = Left(path, Len("X:\\"))\n    \n    Dim invalidSymbols As Variant\n    invalidSymbols = Array("/", ":", "*", "?", """", "<", ">", "|")\n    \n    Dim i As Integer\n    For i = 0 To UBound(invalidSymbols)\n        Dim invalidSymb As String\n        invalidSymb = CStr(invalidSymbols(i))\n        res = Replace(res, invalidSymb, REPLACE_SYMB)\n    Next\n    \n    ReplaceInvalidPathSymbols = drive + res\n    \nEnd Function\n\nFunction ResolveToken(token As String, model As SldWorks.ModelDoc2) As String\n    \n    Const FILE_NAME_TOKEN As String = "_FileName_"\n    Const CONF_NAME_TOKEN As String = "_ConfName_"\n    \n    Select Case LCase(token)\n        Case LCase(FILE_NAME_TOKEN)\n            ResolveToken = GetFileNameWithoutExtension(model.GetPathName)\n        Case LCase(CONF_NAME_TOKEN)\n            If model.GetType() = swDocumentTypes_e.swDocDRAWING Then\n                Dim swDraw As SldWorks.DrawingDoc\n                Set swDraw = model\n                ResolveToken = swDraw.GetCurrentSheet().GetName\n            Else\n                ResolveToken = model.ConfigurationManager.ActiveConfiguration.Name\n            End If\n        Case Else\n            \n            Dim swCustPrpMgr As SldWorks.CustomPropertyManager\n            Dim resVal As String\n            resVal = ""\n            \n            If model.GetType() <> swDocumentTypes_e.swDocDRAWING Then\n                Set swCustPrpMgr = model.Extension.CustomPropertyManager(model.ConfigurationManager.ActiveConfiguration.Name)\n                swCustPrpMgr.Get2 token, "", resVal\n            End If\n            \n            If resVal = "" Then\n                Set swCustPrpMgr = model.Extension.CustomPropertyManager("")\n                swCustPrpMgr.Get2 token, "", resVal\n            End If\n            \n            ResolveToken = resVal\n    End Select\n    \nEnd Function\n\nFunction GetFileNameWithoutExtension(path As String) As String\n    GetFileNameWithoutExtension = Mid(path, InStrRev(path, "\\") + 1, InStrRev(path, ".") - InStrRev(path, "\\") - 1)\nEnd Function\n\nFunction GetExtension(path As String) As String\n    GetExtension = Right(path, Len(path) - InStrRev(path, "."))\nEnd Function\n\nFunction FileExists(filePath As String) As Boolean\n    FileExists = Dir(filePath) <> ""\nEnd Function\n\nSub CreateDirectories(path As String)\n\n    Dim fso As Object\n    Set fso = CreateObject("Scripting.FileSystemObject")\n\n    If fso.FolderExists(path) Then\n        Exit Sub\n    End If\n\n    CreateDirectories fso.GetParentFolderName(path)\n    \n    fso.CreateFolder path\n    \nEnd Sub\n\nFunction GetFullPath(model As SldWorks.ModelDoc2, path As String, outFolder As String)\n    \n    GetFullPath = path\n        \n    If IsPathRelative(path) Then\n        \n        If Left(path, 1) <> "\\" Then\n            path = "\\" & path\n        End If\n        \n        If outFolder = "" Then\n        \n            Dim modelPath As String\n            Dim modelDir As String\n            \n            modelPath = model.GetPathName\n            \n            modelDir = Left(modelPath, InStrRev(modelPath, "\\") - 1)\n            \n            outFolder = modelDir\n        Else\n            If Right(outFolder, 1) = "\\" Then\n                outFolder = Left(outFolder, Len(outFolder) - 1)\n            End If\n        End If\n        \n        GetFullPath = outFolder & path\n        \n    End If\n    \nEnd Function\n\nFunction IsPathRelative(path As String)\n    IsPathRelative = Mid(path, 2, 1) <> ":" And Not IsPathUnc(path)\nEnd Function\n\nFunction IsPathUnc(path As String)\n    IsPathUnc = Left(path, 2) = "\\\\"\nEnd Function\n\nFunction TryGetOutDirFromArguments(ByRef outDir As String) As Boolean\n\ntry_:\n\n    On Error GoTo catch_\n\n    Dim macroRunner As Object\n    Set macroRunner = CreateObject("CadPlus.MacroRunner.Sw")\n    \n    Dim param As Object\n    Set param = macroRunner.PopParameter(swApp)\n    \n    Dim vArgs As Variant\n    vArgs = param.Get("Args")\n    \n    outDir = CStr(vArgs(0))\n    TryGetOutDirFromArguments = True\n    GoTo finally_\n    \ncatch_:\n    TryGetOutDirFromArguments = False\nfinally_:\n\nEnd Function\n')))}c.isMDXComponent=!0},71703:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/file-save-dialog-8cf78925b229897a40d523f5bba89c28.png"}}]);