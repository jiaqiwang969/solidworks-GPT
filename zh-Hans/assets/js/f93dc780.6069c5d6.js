"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[18886],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>w});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),m=c(t),u=o,w=m["".concat(l,".").concat(u)]||m[u]||p[u]||s;return t?i.createElement(w,r(r({ref:n},d),{},{components:t})):i.createElement(w,r({ref:n},d))}));function w(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,r=new Array(s);r[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[m]="string"==typeof e?e:o,r[1]=a;for(var c=2;c<s;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},45989:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=t(87462),o=(t(67294),t(3905));const s={layout:"sw-tool",title:"SOLIDWORKS\u4f7f\u7528\u5b8f\u521b\u5efa\u914d\u7f6e\uff0c\u5176\u5c3a\u5bf8\u503c\u4e3a\u516c\u5dee\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u7684\u5e73\u5747\u503c",image:"sw-dimension-tolerance.png",labels:["\u5e73\u5747\u503c","\u914d\u7f6e","\u5c3a\u5bf8","solidworks api","\u516c\u5dee","\u5b9e\u7528\u5de5\u5177"],group:"\u6a21\u578b","redirect-from":["/2018/03/solidworks-api-dimensions-average-dims.html"]},r=void 0,a={unversionedId:"codestack/solidworks-api/document/dimensions/create-average-dimension-values-configuration/index",id:"codestack/solidworks-api/document/dimensions/create-average-dimension-values-configuration/index",title:"SOLIDWORKS\u4f7f\u7528\u5b8f\u521b\u5efa\u914d\u7f6e\uff0c\u5176\u5c3a\u5bf8\u503c\u4e3a\u516c\u5dee\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u7684\u5e73\u5747\u503c",description:"\u8be5\u5b8f\u5c06\u4f7f\u7528SOLIDWORKS API\u521b\u5efa\u5b50\u914d\u7f6e\uff0c\u5176\u4e2d\u6240\u6709\u5c3a\u5bf8\u503c\u5c06\u8bbe\u7f6e\u4e3a\u57fa\u4e8e\u516c\u5dee\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u7684\u5e73\u5747\u503c\u3002",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/document/dimensions/create-average-dimension-values-configuration/index.md",sourceDirName:"codestack/solidworks-api/document/dimensions/create-average-dimension-values-configuration",slug:"/codestack/solidworks-api/document/dimensions/create-average-dimension-values-configuration/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/dimensions/create-average-dimension-values-configuration/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/document/dimensions/create-average-dimension-values-configuration/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"SOLIDWORKS\u4f7f\u7528\u5b8f\u521b\u5efa\u914d\u7f6e\uff0c\u5176\u5c3a\u5bf8\u503c\u4e3a\u516c\u5dee\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u7684\u5e73\u5747\u503c",image:"sw-dimension-tolerance.png",labels:["\u5e73\u5747\u503c","\u914d\u7f6e","\u5c3a\u5bf8","solidworks api","\u516c\u5dee","\u5b9e\u7528\u5de5\u5177"],group:"\u6a21\u578b","redirect-from":["/2018/03/solidworks-api-dimensions-average-dims.html"]},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u5728\u4e24\u4e2a\u7ebf\u6bb5\u4e4b\u95f4\u6dfb\u52a0\u667a\u80fd\u5c3a\u5bf8",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/dimensions/add-smart-dimension-between-two-segments/"},next:{title:"\u4f7f\u7528SOLIDWORKS API\u5728\u5c3a\u5bf8\u540d\u79f0\u4e2d\u67e5\u627e\u548c\u66ff\u6362\u6587\u672c",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/dimensions/names-find-replace-text/"}},l={},c=[],d={toc:c},m="wrapper";function p(e){let{components:n,...s}=e;return(0,o.kt)(m,(0,i.Z)({},d,s,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u8be5\u5b8f\u5c06\u4f7f\u7528SOLIDWORKS API\u521b\u5efa\u5b50\u914d\u7f6e\uff0c\u5176\u4e2d\u6240\u6709\u5c3a\u5bf8\u503c\u5c06\u8bbe\u7f6e\u4e3a\u57fa\u4e8e\u516c\u5dee\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u7684\u5e73\u5747\u503c\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"\u5c5e\u6027\u7ba1\u7406\u5668\u9875\u9762\u4e2d\u7684\u5c3a\u5bf8\u516c\u5dee/\u7cbe\u5ea6\u7ec4",src:t(55878).Z,width:"400",height:"223"}),"{ width=400 }"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\nDim swModel As SldWorks.ModelDoc2\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Set swModel = swApp.ActiveDoc\n    \n    If Not swModel Is Nothing Then\n        \n        Dim swFeat As SldWorks.Feature\n        \n        Dim activeConfName As String\n        activeConfName = swModel.ConfigurationManager.ActiveConfiguration.Name\n        \n        swModel.ConfigurationManager.AddConfiguration "Average", "", "", 0, activeConfName, ""\n        \n        Set swFeat = swModel.FirstFeature\n        \n        While Not swFeat Is Nothing\n        \n            Dim swDispDim As SldWorks.DisplayDimension\n            Dim swDim As SldWorks.Dimension\n            Dim swDimTol As SldWorks.DimensionTolerance\n        \n            Set swDispDim = swFeat.GetFirstDisplayDimension\n            \n            While Not swDispDim Is Nothing\n            \n                Set swDim = swDispDim.GetDimension2(0)\n                Set swDimTol = swDim.Tolerance\n                \n                If swDimTol.Type <> swTolType_e.swTolNONE Then\n                    \n                    Dim averageVal As Double\n                    \n                    averageVal = swDim.GetSystemValue3(swInConfigurationOpts_e.swThisConfiguration, "")(0) + (swDimTol.GetMinValue + swDimTol.GetMaxValue) / 2\n                    \n                    swDimTol.Type = swTolType_e.swTolNONE\n                    \n                    swDim.SetSystemValue3 averageVal, swInConfigurationOpts_e.swThisConfiguration, ""\n                    \n                End If\n                        \n                Set swDispDim = swFeat.GetNextDisplayDimension(swDispDim)\n                \n            Wend\n            \n            Set swFeat = swFeat.GetNextFeature\n            \n        Wend\n        \n        swModel.EditRebuild3\n    \n    Else\n        MsgBox "\u8bf7\u6253\u5f00\u6a21\u578b"\n    End If\n    \nEnd Sub\n\n\n')))}p.isMDXComponent=!0},55878:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/sw-dimension-tolerance-19007c76555e1ce774b3f12b2659635d.png"}}]);