"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[30694],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>P});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),g=l(t),u=i,P=g["".concat(p,".").concat(u)]||g[u]||d[u]||a;return t?r.createElement(P,s(s({ref:n},c),{},{components:t})):r.createElement(P,s({ref:n},c))}));function P(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[g]="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},10786:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=t(87462),i=(t(67294),t(3905));const a={layout:"sw-tool",caption:"Print",title:"Macro to print SOLIDWORKS documents",description:"VBA macro to print SOLIDWORKS documents using the specified settings (printer name, printer range, orientation, paper size and scale)",image:"printer.svg",group:"Model"},s=void 0,o={unversionedId:"codestack/solidworks-api/document/print/index",id:"codestack/solidworks-api/document/print/index",title:"Macro to print SOLIDWORKS documents",description:"VBA macro to print SOLIDWORKS documents using the specified settings (printer name, printer range, orientation, paper size and scale)",source:"@site/docs/codestack/solidworks-api/document/print/index.md",sourceDirName:"codestack/solidworks-api/document/print",slug:"/codestack/solidworks-api/document/print/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/print/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/document/print/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",caption:"Print",title:"Macro to print SOLIDWORKS documents",description:"VBA macro to print SOLIDWORKS documents using the specified settings (printer name, printer range, orientation, paper size and scale)",image:"printer.svg",group:"Model"},sidebar:"tutorialSidebar",previous:{title:"Add Tag to selected note using SOLIDWORKS API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/notes/tag-selected-note/"},next:{title:"Macro to force rebuild SOLIDWORKS document",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/rebuild/"}},p={},l=[{value:"Settings",id:"settings",level:2}],c={toc:l},g="wrapper";function d(e){let{components:n,...a}=e;return(0,i.kt)(g,(0,r.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Printer and page setup",src:t(86019).Z,width:"871",height:"481"}),"{ width=500 }"),(0,i.kt)("p",null,"This VBA macro allows to print active SOLIDWORKS document. It is possible to specify the settings for printing: printer name, printer range, orientation, paper size and scale"),(0,i.kt)("h2",{id:"settings"},"Settings"),(0,i.kt)("p",null,"To configure settings change the values of constants at the top of the macro as described below"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vb"},'Const PRINTER_NAME As String = "Microsoft Print To PDF" \'full name of the printer\nConst PRINT_RANGE As String = "1-3,5" \'range to print. Specify * to print all pages or a range\nConst PRINT_ORIENTATION As Integer = swPageSetupOrientation_e.swPageSetupOrient_Landscape \'orientation landscape or portrait\nConst PRINTER_PAPER_SIZE As String = "A3" \'Paper size to print to\nConst PRINT_SCALE As String = "*" \'Scale of print. Use * to scale to fit or a value of scale % (from 1 to 1000)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vb"},'Private Declare PtrSafe Function DeviceCapabilities Lib "winspool.drv" Alias "DeviceCapabilitiesA" (ByVal lpDeviceName As String, ByVal lpPort As String, ByVal iIndex As Long, ByRef lpOutput As Any, ByRef lpDevMode As Any) As Long\n\nDim swApp As SldWorks.SldWorks\n\nConst PRINTER_NAME As String = "Microsoft Print To PDF"\nConst PRINT_RANGE As String = "1-3,5"\nConst PRINT_ORIENTATION As Integer = swPageSetupOrientation_e.swPageSetupOrient_Landscape\nConst PRINTER_PAPER_SIZE As String = "A3"\nConst PRINT_SCALE As String = "*"\n\nSub main()\n    \n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    If swModel Is Nothing Then\n        Err.Raise vbError, "", "Please open the document"\n    End If\n    \n    Dim swPageSetup As SldWorks.PageSetup\n    \n    Set swPageSetup = swModel.PageSetup\n    \n    Dim origPrinter As String\n    Dim origPrinterPaperSize As Integer\n    Dim origScaleToFit As Boolean\n    Dim origScale As Double\n    Dim origOrientation As Integer\n    Dim origUsePageSetup As Integer\n    \n    origPrinter = swModel.Printer\n    origPrinterPaperSize = swPageSetup.PrinterPaperSize\n    origScaleToFit = swPageSetup.ScaleToFit\n    origScale = swPageSetup.Scale2\n    origOrientation = swPageSetup.Orientation\n    origUsePageSetup = swModel.Extension.UsePageSetup\n    \n    swModel.Printer = PRINTER_NAME\n    swPageSetup.PrinterPaperSize = GetPaper(PRINTER_NAME, PRINTER_PAPER_SIZE)\n    \n    If PRINT_SCALE = "*" Then\n        swPageSetup.ScaleToFit = True\n    Else\n        swPageSetup.ScaleToFit = False\n        swPageSetup.Scale2 = CDbl(PRINT_SCALE)\n    End If\n    \n    swPageSetup.Orientation = PRINT_ORIENTATION\n    \n    swModel.Extension.UsePageSetup = swPageSetupInUse_e.swPageSetupInUse_Document\n    \n    Dim swPrintSpec As SldWorks.PrintSpecification\n    Set swPrintSpec = swModel.Extension.GetPrintSpecification\n    \n    swPrintSpec.printRange = GetPrintRange(PRINT_RANGE)\n        \n    swModel.Extension.PrintOut4 PRINTER_NAME, "", swPrintSpec\n    \n    swModel.Printer = origPrinter\n    swPageSetup.PrinterPaperSize = origPrinterPaperSize\n    swPageSetup.ScaleToFit = origScaleToFit\n    swPageSetup.Scale2 = origScale\n    swPageSetup.Orientation = origOrientation\n    swModel.Extension.UsePageSetup = origUsePageSetup\n    \nEnd Sub\n\nFunction GetPrintRange(range As String) As Variant\n    \n    Dim printRange() As Long\n    \n    If range = "*" Then\n        ReDim printRange(1)\n        printRange(0) = -1\n        printRange(1) = -1\n    Else\n        \n        Dim vPageRanges As Variant\n        vPageRanges = Split(range, ",")\n        \n        ReDim printRange((UBound(vPageRanges) + 1) * 2 - 1)\n        \n        Dim i As Integer\n        \n        For i = 0 To UBound(vPageRanges)\n            \n            Dim vStartEndPages As Variant\n            vStartEndPages = Split(Trim(CStr(vPageRanges(i))), "-")\n            \n            Dim startPage As Long\n            Dim endPage As Long\n            startPage = CLng(vStartEndPages(0))\n            \n            If UBound(vStartEndPages) = 0 Then\n                endPage = startPage\n            ElseIf UBound(vStartEndPages) = 1 Then\n                endPage = CLng(vStartEndPages(1))\n            Else\n                Err.Raise vbError, "", "Invalid page range: " & CStr(vPageRanges(i))\n            End If\n            \n            printRange(i * 2) = startPage\n            printRange(i * 2 + 1) = endPage\n            \n        Next\n        \n    End If\n        \n    GetPrintRange = printRange\n    \nEnd Function\n\nFunction GetPaper(printerName As String, paperName As String) As Integer\n    \n    Const DC_PAPERNAMES As Integer = &H10\n    Const DC_PAPERS As Integer = &H2\n    \n    Dim papersCount As Integer\n    papersCount = DeviceCapabilities(printerName, "", DC_PAPERS, ByVal vbNullString, 0)\n    \n    If papersCount > 0 Then\n    \n        Dim papersCodes() As Integer\n        ReDim papersCodes(papersCount - 1)\n        \n        DeviceCapabilities printerName, "", DC_PAPERS, papersCodes(0), 0\n        \n        Dim papersNames As String\n        papersNames = String$(64 * papersCount, 0)\n        DeviceCapabilities printerName, "", DC_PAPERNAMES, ByVal papersNames, 0\n      \n        Dim i As Integer\n        \n        For i = 0 To papersCount\n            If LCase(ParsePaperName(papersNames, 64 * i + 1)) = LCase(paperName) Then\n                GetPaper = papersCodes(i)\n            End If\n        Next\n    Else\n        Err.Raise vbError, "", "No sizes available for the specified printer"\n    End If\n    \nEnd Function\n\nFunction ParsePaperName(papersNames As String, offset As Integer) As String\n\n    Dim paperName As String\n    \n    paperName = Mid(papersNames, offset, 64)\n    \n    Dim nullCharIndex As Integer\n    nullCharIndex = InStr(paperName, vbNullChar)\n    \n    If nullCharIndex <> 0 Then\n        paperName = Left$(paperName, nullCharIndex - 1)\n    End If\n     \n    ParsePaperName = paperName\n    \nEnd Function\n')))}d.isMDXComponent=!0},86019:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/page-setup-ce87176b7d3d2af95bb792a6010f0cb8.png"}}]);