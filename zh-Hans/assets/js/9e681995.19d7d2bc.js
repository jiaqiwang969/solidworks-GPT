"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[85294],{3905:(n,e,t)=>{t.d(e,{Zo:()=>f,kt:()=>m});var s=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,s)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,s,o=function(n,e){if(null==n)return{};var t,s,o={},r=Object.keys(n);for(s=0;s<r.length;s++)t=r[s],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(s=0;s<r.length;s++)t=r[s],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var w=s.createContext({}),l=function(n){var e=s.useContext(w),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},f=function(n){var e=l(n.components);return s.createElement(w.Provider,{value:e},n.children)},d="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return s.createElement(s.Fragment,{},e)}},u=s.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,w=n.parentName,f=a(n,["components","mdxType","originalType","parentName"]),d=l(t),u=o,m=d["".concat(w,".").concat(u)]||d[u]||c[u]||r;return t?s.createElement(m,i(i({ref:e},f),{},{components:t})):s.createElement(m,i({ref:e},f))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,i=new Array(r);i[0]=u;var a={};for(var w in e)hasOwnProperty.call(e,w)&&(a[w]=e[w]);a.originalType=n,a[d]="string"==typeof n?n:o,i[1]=a;for(var l=2;l<r;l++)i[l]=t[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}u.displayName="MDXCreateElement"},97089:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>w,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=t(87462),o=(t(67294),t(3905));const r={title:"\u5c06\u914d\u7f6e\u4f20\u64ad\u5230\u56fe\u7eb8"},i=void 0,a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/drawing/propagate-configurations-sheets/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/drawing/propagate-configurations-sheets/index",title:"\u5c06\u914d\u7f6e\u4f20\u64ad\u5230\u56fe\u7eb8",description:"VBA\u5b8f\u5c06\u53c2\u8003\u6587\u6863\u7684\u914d\u7f6e\u590d\u5236\u5230\u6bcf\u4e2a\u526f\u672c\u7684\u56fe\u7eb8\u4e2d",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/drawing/propagate-configurations-sheets/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/drawing/propagate-configurations-sheets",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/drawing/propagate-configurations-sheets/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/drawing/propagate-configurations-sheets/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/drawing/propagate-configurations-sheets/index.md",tags:[],version:"current",frontMatter:{title:"\u5c06\u914d\u7f6e\u4f20\u64ad\u5230\u56fe\u7eb8"},sidebar:"tutorialSidebar",previous:{title:"\u6253\u5f00\u7ed8\u56fe\u89c6\u56fe\u5f15\u7528\u6587\u6863\u7684VBA\u5b8f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/drawing/open-referenced-model/"},next:{title:"\u4f7f\u7528\u5207\u5272\u6e05\u5355\u540d\u79f0\u91cd\u547d\u540d\u5c55\u5f00\u56fe\u89c6\u56fe\u7684VBA\u5b8f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/drawing/rename-sheet-metal-views/"}},w={},l=[{value:"image: sheets.png",id:"image-sheetspng",level:2},{value:"\u914d\u7f6e",id:"\u914d\u7f6e",level:2},{value:"\u6ce8\u610f\u4e8b\u9879",id:"\u6ce8\u610f\u4e8b\u9879",level:2},{value:"\u94a3\u91d1\u5e73\u9762\u56fe",id:"\u94a3\u91d1\u5e73\u9762\u56fe",level:3}],f={toc:l},d="wrapper";function c(n){let{components:e,...r}=n;return(0,o.kt)(d,(0,s.Z)({},f,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"VBA\u5b8f\u5c06\u53c2\u8003\u6587\u6863\u7684\u914d\u7f6e\u590d\u5236\u5230\u6bcf\u4e2a\u526f\u672c\u7684\u56fe\u7eb8\u4e2d"),(0,o.kt)("h2",{id:"image-sheetspng"},"image: sheets.png"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"\u5177\u6709\u591a\u4e2a\u56fe\u7eb8\u7684\u56fe\u7eb8",src:t(50259).Z,width:"1610",height:"906"}),"{ width=800 }"),(0,o.kt)("p",null,"\u6b64VBA\u5b8f\u5c06\u590d\u5236\u6d3b\u52a8\u56fe\u7eb8\u5e76\u5c06\u53c2\u8003\u914d\u7f6e\u4f20\u64ad\u5230\u6bcf\u4e2a\u526f\u672c\u3002"),(0,o.kt)("p",null,"\u5b8f\u5c06\u81ea\u52a8\u5728\u6bcf\u4e2a\u65b0\u56fe\u7eb8\u4e0a\u8bbe\u7f6e\u53c2\u8003\u914d\u7f6e\u5e76\u6839\u636e\u914d\u7f6e\u540d\u79f0\u91cd\u547d\u540d\u56fe\u7eb8\u3002"),(0,o.kt)("p",null,"\u7ed3\u679c\u56fe\u7eb8\u5c06\u5305\u542b\u591a\u4f53\u96f6\u4ef6\u6216\u88c5\u914d\u7684\u6240\u6709\u914d\u7f6e\u7684\u56fe\u7eb8\u3002"),(0,o.kt)("h2",{id:"\u914d\u7f6e"},"\u914d\u7f6e"),(0,o.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539\u5b8f\u7684\u5e38\u91cf\u503c\u6765\u914d\u7f6e\u5b8f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},"Const TOP_LEVEL_CONFIGS_ONLY As Boolean = False 'True\u4ec5\u5904\u7406\u9876\u7ea7\u914d\u7f6e\uff0cFalse\u5904\u7406\u5b50\u914d\u7f6e\nConst USE_CORRESPONDING_FLAT_PATTERN_CONF As Boolean = True 'True\u67e5\u627e\u5e73\u9762\u56fe\u89c6\u56fe\u7684\u76f8\u5e94SM-FLAT-PATTERN\u914d\u7f6e\uff0cFalse\u4f7f\u7528\u914d\u7f6eAs Is\nConst GENERATE_MISSING_FLAT_PATTERN_CONF As Boolean = True 'True\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u81ea\u52a8\u521b\u5efa\u65b0\u7684SM-FLAT-PATTERN\u914d\u7f6e\uff0cFalse\u4f7f\u7528\u914d\u7f6eAs Is\n")),(0,o.kt)("h2",{id:"\u6ce8\u610f\u4e8b\u9879"},"\u6ce8\u610f\u4e8b\u9879"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5b8f\u5c06\u8df3\u8fc7\u5904\u7406\u7cfb\u7edf\u914d\u7f6e\uff08\u4f8b\u5982\u710a\u63a5As Welded\u548cAs Machined\uff0c\u94a3\u91d1\u5e73\u9762\u56fe\u914d\u7f6e\u548c\u901f\u5ea6\u5305\u914d\u7f6e\uff09"),(0,o.kt)("li",{parentName:"ul"},"\u5b8f\u4e0d\u4f1a\u4e3a\u5728\u56fe\u7eb8\u7684\u9ed8\u8ba4\uff08\u7b2c\u4e00\u4e2a\uff09\u89c6\u56fe\u4e2d\u4f7f\u7528\u7684\u76f8\u540c\u914d\u7f6e\u521b\u5efa\u53e6\u4e00\u4e2a\u56fe\u7eb8\uff08\u6a21\u677f\u56fe\u7eb8\uff09")),(0,o.kt)("h3",{id:"\u94a3\u91d1\u5e73\u9762\u56fe"},"\u94a3\u91d1\u5e73\u9762\u56fe"),(0,o.kt)("p",null,"\u5f53\u4ece\u7528\u6237\u754c\u9762\u521b\u5efa\u5e73\u9762\u56fe\u7684\u7ed8\u56fe\u89c6\u56fe\u65f6\uff0c\u4f1a\u81ea\u52a8\u6dfb\u52a0\u65b0\u7684\u7279\u6b8a\u914d\u7f6e\uff08SM-FLAT-PATTERN\uff09\u3002\u6b64\u914d\u7f6e\u5c06\u8bbe\u7f6e\u4e3a\u53c2\u8003\u914d\u7f6e\u3002\u901a\u8fc7SOLIDWORKS API\u5206\u914d\u53c2\u8003\u89c6\u56fe\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5c06\u6807\u51c6\u914d\u7f6e\u5206\u914d\u7ed9\u5e73\u9762\u56fe\u89c6\u56fe\uff0c\u8fd9\u5c06\u5bfc\u81f4\u663e\u793a\u4e0d\u6b63\u786e\u3002\u7528\u6237\u9700\u8981\u624b\u52a8\u91cd\u65b0\u68c0\u67e5",(0,o.kt)("strong",{parentName:"p"},"\u5e73\u9762\u56fe"),"\u5207\u6362\u6216\u91cd\u7f6e\u53c2\u8003\u914d\u7f6e\u3002\u5b8f\u7684",(0,o.kt)("strong",{parentName:"p"},"USE_CORRESPONDING_FLAT_PATTERN_CONF"),"\u9009\u9879\u5141\u8bb8\u67e5\u627e\u5e73\u9762\u56fe\u914d\u7f6e\uff08\u5982\u679c\u5b58\u5728\uff09\uff0c\u5e76\u5c06\u5176\u7528\u4e8e\u5e73\u9762\u56fe\u89c6\u56fe\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u5b8f\u7684",(0,o.kt)("strong",{parentName:"p"},"GENERATE_MISSING_FLAT_PATTERN_CONF"),"\u9009\u9879\u81ea\u52a8\u521b\u5efa\u5e73\u9762\u56fe\u89c6\u56fe\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Const TOP_LEVEL_CONFIGS_ONLY As Boolean = False\nConst USE_CORRESPONDING_FLAT_PATTERN_CONF As Boolean = True\nConst GENERATE_MISSING_FLAT_PATTERN_CONF As Boolean = True\n\nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swDraw As SldWorks.DrawingDoc\n    \n    Set swDraw = swApp.ActiveDoc\n    \n    If Not swDraw Is Nothing Then\n        \n        Dim swSheet As SldWorks.sheet\n        Set swSheet = swDraw.GetCurrentSheet\n        \n        Dim swDefView As SldWorks.view\n        Set swDefView = GetDefaultView(swDraw, swSheet)\n        \n        If Not swDefView Is Nothing Then\n            \n            Dim swRefDoc As SldWorks.ModelDoc2\n            Set swRefDoc = swDefView.ReferencedDocument\n            \n            If Not swRefDoc Is Nothing Then\n            \n                ValidateSheet swSheet, swRefDoc\n                \n                Dim vConfNames As Variant\n                vConfNames = GetConfigurations(swRefDoc)\n                \n                Dim i As Integer\n                \n                For i = 0 To UBound(vConfNames)\n                    \n                    Dim confName As String\n                    confName = CStr(vConfNames(i))\n                    \n                    If LCase(GetActualReferencedConfiguration(swDefView)) <> LCase(confName) Then\n                        CopySheetWithConfiguration swDraw, swSheet, confName\n                    End If\n                    \n                Next\n                \n            Else\n                Err.Raise vbError, "", "\u9ed8\u8ba4\u89c6\u56fe\u6ca1\u6709\u53c2\u8003\u6587\u6863"\n            End If\n            \n        Else\n            Err.Raise vbError, "", "\u672a\u627e\u5230\u9ed8\u8ba4\u89c6\u56fe"\n        End If\n        \n    Else\n        Err.Raise vbError, "", "\u6253\u5f00\u7ed8\u56fe"\n    End If\n    \nEnd Sub\n\nFunction GetConfigurations(refDoc As SldWorks.ModelDoc2) As Variant\n    \n    Dim confNames() As String\n    \n    Dim vConfNames As Variant\n    vConfNames = refDoc.GetConfigurationNames\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(vConfNames)\n        \n        Dim confName As String\n        confName = CStr(vConfNames(i))\n        \n        Dim swConf As SldWorks.Configuration\n        Set swConf = refDoc.GetConfigurationByName(confName)\n        \n        If (Not TOP_LEVEL_CONFIGS_ONLY Or swConf.GetParent() Is Nothing) And swConf.Type = swConfigurationType_e.swConfiguration_Standard Then\n                \n            If (Not confNames) = -1 Then\n                ReDim confNames(0)\n            Else\n                ReDim Preserve confNames(UBound(confNames) + 1)\n            End If\n            \n            confNames(UBound(confNames)) = confName\n            \n        End If\n        \n    Next\n    \n    GetConfigurations = confNames\n    \nEnd Function\n\nFunction GetActualReferencedConfiguration(view As SldWorks.view) As String\n    \n    Dim refConfName As String\n    refConfName = view.ReferencedConfiguration\n    \n    Dim swConf As SldWorks.Configuration\n    \n    Set swConf = view.ReferencedDocument.GetConfigurationByName(refConfName)\n    \n    If swConf.Type <> swConfigurationType_e.swConfiguration_Standard Then\n        Set swConf = swConf.GetParent\n    End If\n    \n    GetActualReferencedConfiguration = swConf.Name\n    \nEnd Function\n\nFunction GetDefaultView(draw As SldWorks.DrawingDoc, sheet As SldWorks.sheet) As SldWorks.view\n    \n    Dim vViews As Variant\n    \n    vViews = GetSheetViews(draw, sheet)\n    \n    If Not IsEmpty(vViews) Then\n        \n        Dim i As Integer\n        \n        For i = 0 To UBound(vViews)\n            \n            Dim swView As SldWorks.view\n            Set swView = vViews(i)\n            \n            If UCase(swView.Name) = UCase(sheet.CustomPropertyView) Then\n                Set GetDefaultView = swView\n                Exit Function\n            End If\n            \n        Next\n        \n        Set GetDefaultView = vViews(0) \'\u4f7f\u7528\u7b2c\u4e00\u4e2a\n    Else\n        Set GetDefaultView = Nothing\n    End If\n    \nEnd Function\n\nSub ValidateSheet(sheet As SldWorks.sheet, refDoc As SldWorks.ModelDoc2)\n    \n    Dim vViews As Variant\n    vViews = sheet.GetViews\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(vViews)\n        \n        Dim swView As SldWorks.view\n        Set swView = vViews(i)\n        \n        If Not swView.ReferencedDocument Is refDoc Then\n            Err.Raise vbError, "", "\u5728" & sheet.GetName & "\u4e2d\u5f15\u7528\u4e86\u4e0d\u540c\u7684\u6a21\u578b"\n        End If\n        \n    Next\n    \nEnd Sub\n\nSub CopySheetWithConfiguration(draw As SldWorks.DrawingDoc, sheet As SldWorks.sheet, baseConfName As String)\n    \n    Const MAX_PASTE_ATEMPTS As Integer = 3\n    \n    If False <> draw.Extension.SelectByID2(sheet.GetName(), "SHEET", 0, 0, 0, False, 0, Nothing, 0) Then\n        \n        draw.EditCopy\n        \n        If TryPasteSheet(draw, MAX_PASTE_ATEMPTS) Then\n            \n            Dim swNewSheet As SldWorks.sheet\n            Set swNewSheet = draw.sheet(draw.GetSheetNames()(draw.GetSheetCount() - 1))\n            \n            Dim vViews As Variant\n            vViews = GetSheetViews(draw, swNewSheet)\n            \n            Dim i As Integer\n            \n            For i = 0 To UBound(vViews)\n                \n                Dim swView As SldWorks.view\n                Set swView = vViews(i)\n                \n                Dim confName As String\n                \n                If False <> swView.IsFlatPatternView() And USE_CORRESPONDING_FLAT_PATTERN_CONF Then\n                    confName = GetFlatPatternConfiguration(draw, swView.ReferencedDocument, baseConfName, GENERATE_MISSING_FLAT_PATTERN_CONF)\n                Else\n                    confName = baseConfName\n                End If\n                \n                swView.ReferencedConfiguration = confName\n                \n                RefreshView draw, swView\n                \n            Next\n            \n            swNewSheet.SetName baseConfName\n                        \n        Else\n            Err.Raise vbError, "", "\u65e0\u6cd5\u7c98\u8d34\u56fe\u7eb8"\n        End If\n    Else\n        Err.Raise vbError, "", "\u65e0\u6cd5\u9009\u62e9\u56fe\u7eb8"\n    End If\n\nEnd Sub\n\nFunction TryPasteSheet(draw As SldWorks.DrawingDoc, attempts As Integer) As Boolean\n\n    Dim curAttemp As Integer\n    curAttemp = 1\n\n    \'\u89c2\u5bdf\u5230\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u7c98\u8d34\u56fe\u7eb8\u4f1a\u5931\u8d25\n    While False = draw.PasteSheet(swInsertOptions_e.swInsertOption_MoveToEnd, swRenameOptions_e.swRenameOption_Yes)\n        \n        Debug.Print "\u7b2c" & curAttemp & "\u6b21\u5c1d\u8bd5\u7c98\u8d34\u56fe\u7eb8\u5931\u8d25"\n        \n        If curAttemp >= attempts Then\n            TryPasteSheet = False\n            Exit Function\n        End If\n        \n        curAttemp = curAttemp + 1\n \n    Wend\n    \n    TryPasteSheet = True\n\nEnd Function\n\n\'\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u76f4\u5230\u5237\u65b0\u89c6\u56fe\u540e\uff0c\u89c6\u56fe\u7684\u65b0\u914d\u7f6e\u624d\u4f1a\u66f4\u65b0\nSub RefreshView(draw As SldWorks.DrawingDoc, swView As SldWorks.view)\n    \n    If SelectDrawingView(draw, swView) Then\n        \n        draw.SuppressView\n        \n        If SelectDrawingView(draw, swView) Then\n            draw.UnsuppressView\n        End If\n        \n    End If\n    \nEnd Sub\n\nFunction GetFlatPatternConfiguration(draw As SldWorks.DrawingDoc, refDoc As SldWorks.ModelDoc2, baseConfName As String, allowCreateIfNotExist As Boolean) As String\n    \n    Dim swConf As SldWorks.Configuration\n    Set swConf = refDoc.GetConfigurationByName(baseConfName)\n    \n    If swConf.Type <> swConfigurationType_e.swConfiguration_SheetMetal Then\n        \n        Dim vChildrenConfs As Variant\n        \n        vChildrenConfs = swConf.GetChildren()\n        \n        Dim i As Integer\n        \n        If Not IsEmpty(vChildrenConfs) Then\n        \n            For i = 0 To UBound(vChildrenConfs)\n                \n                Dim swChildConf As SldWorks.Configuration\n                Set swChildConf = vChildrenConfs(i)\n                \n                If swChildConf.Type = swConfigurationType_e.swConfiguration_SheetMetal Then\n                    Debug.Print "\u4e3a" & baseConfName & "\u4f7f\u7528\u5e73\u9762\u56fe\u914d\u7f6e" & swChildConf.Name\n                    GetFlatPatternConfiguration = swChildConf.Name\n                    Exit Function\n                End If\n                \n            Next\n        \n        End If\n        \n        If allowCreateIfNotExist Then\n            Debug.Print "\u4e3a" & baseConfName & "\u521b\u5efa\u5e73\u9762\u56fe\u914d\u7f6e"\n            GetFlatPatternConfiguration = CreateFlatPatternConfiguration(draw, refDoc, baseConfName)\n        Else\n            Debug.Print "\u672a\u627e\u5230" & baseConfName & "\u7684\u5e73\u9762\u56fe\u914d\u7f6e"\n            GetFlatPatternConfiguration = baseConfName\n        End If\n    Else\n        GetFlatPatternConfiguration = baseConfName\n    End If\n    \nEnd Function\n\nFunction CreateFlatPatternConfiguration(draw As SldWorks.DrawingDoc, refDoc As SldWorks.ModelDoc2, baseConfName As String) As String\n    \n    Dim swFlatPatternView As SldWorks.view\n    Set swFlatPatternView = draw.CreateFlatPatternViewFromModelView3(refDoc.GetPathName(), baseConfName, 0, 0, 0, True, False)\n    \n    If Not swFlatPatternView Is Nothing Then\n        CreateFlatPatternConfiguration = swFlatPatternView.ReferencedConfiguration\n        \n        If SelectDrawingView(draw, swFlatPatternView) Then\n            If False = draw.Extension.DeleteSelection2(swDeleteSelectionOptions_e.swDelete_Absorbed) Then\n                Err.Raise vbError, "", "\u5220\u9664\u4e34\u65f6\u89c6\u56fe\u5931\u8d25"\n            End If\n        Else\n            Err.Raise vbError, "", "\u9009\u62e9\u8981\u5220\u9664\u7684\u4e34\u65f6\u89c6\u56fe\u5931\u8d25"\n        End If\n        \n    Else\n        Err.Raise vbError, "", "\u4e3a" & refDoc.GetPathName() & " (" & baseConfName & ")\u521b\u5efa\u4e34\u65f6\u5e73\u9762\u56fe\u89c6\u56fe\u5931\u8d25"\n    End If\n    \nEnd Function\n\nFunction SelectDrawingView(draw As SldWorks.ModelDoc2, view As SldWorks.view) As Boolean\n    SelectDrawingView = False <> draw.Extension.SelectByID2(view.Name, "DRAWINGVIEW", 0, 0, 0, False, -1, Nothing, swSelectOption_e.swSelectOptionDefault)\nEnd Function\n\nFunction GetSheetViews(draw As SldWorks.DrawingDoc, sheet As SldWorks.sheet) As Variant\n    \n    \'ISheet::GetViews\u8fd8\u8fd4\u56de\u89c6\u56fe\u9762\u677f\u4e2d\u7684\u89c6\u56fe\n    \n    Dim vSheets As Variant\n    \n    vSheets = draw.GetViews\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(vSheets)\n        \n        Dim vViews As Variant\n        vViews = vSheets(i)\n        \n        Dim swSheetView As SldWorks.view\n        Set swSheetView = vViews(0)\n        \n        If swSheetView.GetName2() = sheet.GetName() Then\n            \n            If UBound(vViews) > 0 Then\n                \n                Dim swViews() As SldWorks.view\n                ReDim swViews(UBound(vViews) - 1)\n                \n                Dim j As Integer\n                \n                For j = 0 To UBound(swViews)\n                    Set swViews(j) = vViews(j + 1)\n                Next\n                \n                GetSheetViews = swViews\n                Exit Function\n                \n            Else\n                Err.Raise vbError, "", sheet.GetName & "\u4e2d\u672a\u627e\u5230\u7ed8\u56fe\u89c6\u56fe"\n            End If\n            \n        End If\n            \n    Next\n    \n    Err.Raise vbError, "", "\u65e0\u6cd5\u4ece" & sheet.GetName & "\u83b7\u53d6\u7ed8\u56fe\u89c6\u56fe"\n    \nEnd Function\n')))}c.isMDXComponent=!0},50259:(n,e,t)=>{t.d(e,{Z:()=>s});const s=t.p+"assets/images/sheets-6f5f030fd6293af8e1b9bacc22d68ea0.png"}}]);