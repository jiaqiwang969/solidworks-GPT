"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[52012],{3905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>f});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},i=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),m=l(t),p=o,f=m["".concat(c,".").concat(p)]||m[p]||u[p]||r;return t?a.createElement(f,d(d({ref:n},i),{},{components:t})):a.createElement(f,d({ref:n},i))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,d=new Array(r);d[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[m]="string"==typeof e?e:o,d[1]=s;for(var l=2;l<r;l++)d[l]=t[l];return a.createElement.apply(null,d)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},69764:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=t(87462),o=(t(67294),t(3905));const r={title:"Managing SOLIDWORKS documents life cycle via SwEx.AddIn framework",caption:"Documents Management",description:"Framework to manage SOLIDWORKS documents life cycle (open, close, activate) and its events in SwEx.AddIn","toc-group-name":"labs-solidworks-swex",sidebar_position:0},d=void 0,s={unversionedId:"codestack-clone/labs/solidworks/swex/add-in/documents-management/index",id:"codestack-clone/labs/solidworks/swex/add-in/documents-management/index",title:"Managing SOLIDWORKS documents life cycle via SwEx.AddIn framework",description:"Framework to manage SOLIDWORKS documents life cycle (open, close, activate) and its events in SwEx.AddIn",source:"@site/docs/codestack-clone/labs/solidworks/swex/add-in/documents-management/index.md",sourceDirName:"codestack-clone/labs/solidworks/swex/add-in/documents-management",slug:"/codestack-clone/labs/solidworks/swex/add-in/documents-management/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/labs/solidworks/swex/add-in/documents-management/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/labs/solidworks/swex/add-in/documents-management/index.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Managing SOLIDWORKS documents life cycle via SwEx.AddIn framework",caption:"Documents Management",description:"Framework to manage SOLIDWORKS documents life cycle (open, close, activate) and its events in SwEx.AddIn","toc-group-name":"labs-solidworks-swex",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Adding sub-menus and spacers to SOLIDWORKS command manager using SwEx.AddIn",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/labs/solidworks/swex/add-in/commands-manager/sub-menu-and-spacers/"},next:{title:"Handling the common events of SOLIDWORKS file using SwEx.AddIn framework",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/labs/solidworks/swex/add-in/documents-management/events/"}},c={},l=[],i={toc:l},m="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"SwEx.AddIn frameworks provides utility class to manage document life cycle by creating a specified instance handler as a wrapper of a model."),(0,o.kt)("p",null,"Call ",(0,o.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/M_CodeStack_SwEx_AddIn_Base_ISwAddInEx_CreateDocumentsHandler__1.htm"},"ISwAddInEx.CreateDocumentsHandler")," method and pass the type of document handler as a generic argument or use a second overload to create a generic document handler which exposes ",(0,o.kt)("a",{parentName:"p",href:"events/"},"common events")," (e.g. saving, selection, rebuilding, ",(0,o.kt)("a",{parentName:"p",href:"/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/"},"3rd party storage access"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},"Private m_DocHandler As IDocumentsHandler(Of MyDocHandler)\nPrivate m_DocHandlerGeneric As IDocumentsHandler(Of DocumentHandler)\n\nPublic Overrides Function OnConnect() As Boolean\n    m_DocHandler = CreateDocumentsHandler(Of MyDocHandler)()\n    m_DocHandlerGeneric = CreateDocumentsHandler()\n    AddHandler m_DocHandlerGeneric.HandlerCreated, AddressOf OnHandlerCreated\n    Return True\nEnd Function\n\nPrivate Sub OnHandlerCreated(ByVal doc As DocumentHandler)\n    'TODO: implement\nEnd Sub\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"Private m_DocHandler As IDocumentsHandler(Of MyDocHandler)\nPrivate m_DocHandlerGeneric As IDocumentsHandler(Of DocumentHandler)\n\nPublic Overrides Function OnConnect() As Boolean\n    m_DocHandler = CreateDocumentsHandler(Of MyDocHandler)()\n    m_DocHandlerGeneric = CreateDocumentsHandler()\n    AddHandler m_DocHandlerGeneric.HandlerCreated, AddressOf OnHandlerCreated\n    Return True\nEnd Function\n\nPrivate Sub OnHandlerCreated(ByVal doc As DocumentHandler)\n    'TODO: implement\nEnd Subwjq in \ud83c\udf10 nixos-test in solidworks-GPT/docs/codestack-clone on \ue0a0 main via \u2744\ufe0f  impure (postgres-env) \u276f cat ./labs/solidworks/swex/documents-management/DocMgrAddIn.DocHandlerInit.cs\nprivate IDocumentsHandler<MyDocHandler> m_DocHandler;\nprivate IDocumentsHandler<DocumentHandler> m_DocHandlerGeneric;\n\npublic override bool OnConnect()\n{\n    m_DocHandler = CreateDocumentsHandler<MyDocHandler>();\n    m_DocHandlerGeneric = CreateDocumentsHandler();\n    m_DocHandlerGeneric.HandlerCreated += OnHandlerCreated;\n    return true;\n}\n\nprivate void OnHandlerCreated(DocumentHandler doc)\n{\n    //TODO: implement\n}\n")),(0,o.kt)("p",null,"Define the document handler either by implementing the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/T_CodeStack_SwEx_AddIn_Base_IDocumentHandler.htm"},"IDocumentHandler")," interface or ",(0,o.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/T_CodeStack_SwEx_AddIn_Core_DocumentHandler.htm"},"DocumentHandler")," class. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},"Public Class MyDocHandler\n    Implements IDocumentHandler\n\n    Private m_Model As IModelDoc2\n\n    Public Sub Init(ByVal app As ISldWorks, ByVal model As IModelDoc2) Implements IDocumentHandler.Init\n        If TypeOf model Is PartDoc Then\n            m_Model = model\n            AddHandler(TryCast(m_Model, PartDoc)).AddItemNotify, AddressOf OnAddItemNotify\n        End If\n    End Sub\n\n    Private Function OnAddItemNotify(ByVal EntityType As Integer, ByVal itemName As String) As Integer\n        Return 0\n    End Function\n\n    Public Sub Dispose() Implements IDisposable.Dispose\n        If TypeOf m_Model Is PartDoc Then\n            RemoveHandler(TryCast(m_Model, PartDoc)).AddItemNotify, AddressOf OnAddItemNotify\n        End If\n    End Sub\n\nEnd Class\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyDocHandler : IDocumentHandler\n{\n    private IModelDoc2 m_Model;\n\n    public void Init(ISldWorks app, IModelDoc2 model)\n    {\n        if (model is PartDoc)\n        {\n            m_Model = model;\n            (m_Model as PartDoc).AddItemNotify += OnAddItemNotify;\n        }\n        //TODO: handle other doc types\n    }\n\n    private int OnAddItemNotify(int EntityType, string itemName)\n    {\n        //Implement\n        return 0;\n    }\n\n    public void Dispose()\n    {\n        if (m_Model is PartDoc)\n        {\n            (m_Model as PartDoc).AddItemNotify -= OnAddItemNotify;\n        }\n    }\n}\n")),(0,o.kt)("p",null,"Override methods of document handler and implement required functionality attached for each specific SOLIDWORKS model (such as handle events, load, write data etc.)"),(0,o.kt)("p",null,"Framework will automatically dispose the handler. Unsubscribe from the custom events within the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/M_CodeStack_SwEx_AddIn_Core_DocumentHandler_Dispose.htm"},"Dispose")," or ",(0,o.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/M_CodeStack_SwEx_AddIn_Core_DocumentHandler_OnDestroy.htm"},"OnDestroy")," method. The pointer to the document attached to the handler is assigned to ",(0,o.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/P_CodeStack_SwEx_AddIn_Core_DocumentHandler_Model.htm"},"Model")," property."))}u.isMDXComponent=!0}}]);