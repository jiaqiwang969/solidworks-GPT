"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[98446],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>g});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=o.createContext({}),c=function(e){var r=o.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},l=function(e){var r=c(e.components);return o.createElement(p.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},m=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=n,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||s;return t?o.createElement(g,a(a({ref:r},l),{},{components:t})):o.createElement(g,a({ref:r},l))}));function g(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var s=t.length,a=new Array(s);a[0]=m;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[u]="string"==typeof e?e:n,a[1]=i;for(var c=2;c<s;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},64682:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=t(87462),n=(t(67294),t(3905));const s={layout:"sw-tool",title:"Sort file and configuration specific custom properties using SOLIDWORKS API",caption:"Sort Custom Properties"},a=void 0,i={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/data-storage/custom-properties/sort/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/data-storage/custom-properties/sort/index",title:"Sort file and configuration specific custom properties using SOLIDWORKS API",description:"VBA macro to sort file and configuration specific custom properties (in ascending and descending order) using logical order via SOLIDWORKS API",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/data-storage/custom-properties/sort/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/data-storage/custom-properties/sort",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/data-storage/custom-properties/sort/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/data-storage/custom-properties/sort/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/data-storage/custom-properties/sort/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"Sort file and configuration specific custom properties using SOLIDWORKS API",caption:"Sort Custom Properties"},sidebar:"tutorialSidebar",previous:{title:"SOLIDWORKS macro to rename configurations based on custom property",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/data-storage/custom-properties/rename-configurations-based-custom-property/"},next:{title:"Upgrade legacy custom properties to a new architecture",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/data-storage/custom-properties/update-legacy/"}},p={},c=[{value:"group: Custom Properties",id:"group-custom-properties",level:2},{value:"Configuration",id:"configuration",level:2}],l={toc:c},u="wrapper";function d(e){let{components:r,...s}=e;return(0,n.kt)(u,(0,o.Z)({},l,s,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"VBA macro to sort file and configuration specific custom properties (in ascending and descending order) using logical order via SOLIDWORKS API\nimage: sort-custom-properties.svg\nlabels: ","[sort, custom properties, bubble]"),(0,n.kt)("h2",{id:"group-custom-properties"},"group: Custom Properties"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Sorted custom properties",src:t(24812).Z,width:"1022",height:"592"}),"{ width=350 }"),(0,n.kt)("p",null,"This VBA macro sorts the custom properties in a file and all configurations using the logical order with SOLIDWORKS API. Both ascending and descending order can be specified."),(0,n.kt)("p",null,"Logical order sorts the element as follows. This is an order of files being ordered in Windows File Explorer"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Property1"),(0,n.kt)("li",{parentName:"ul"},"Property2"),(0,n.kt)("li",{parentName:"ul"},"Property3"),(0,n.kt)("li",{parentName:"ul"},"Property12"),(0,n.kt)("li",{parentName:"ul"},"Property20"),(0,n.kt)("li",{parentName:"ul"},"Property21"),(0,n.kt)("li",{parentName:"ul"},"Property30")),(0,n.kt)("p",null,"While alphabetical sort for the above sequence would produce the following result:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Property1"),(0,n.kt)("li",{parentName:"ul"},"Property12"),(0,n.kt)("li",{parentName:"ul"},"Property2"),(0,n.kt)("li",{parentName:"ul"},"Property20"),(0,n.kt)("li",{parentName:"ul"},"Property21"),(0,n.kt)("li",{parentName:"ul"},"Property3"),(0,n.kt)("li",{parentName:"ul"},"Property30")),(0,n.kt)("h2",{id:"configuration"},"Configuration"),(0,n.kt)("p",null,"Macro can be configured by changing the constant values in the macro as follows:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},"Const ASCENDING As Boolean = True 'True to sort ascending, False to sort descending\nConst REORDER_GENERAL_CUST_PRPS As Boolean = True 'True to sort file specific custom properties, False to skip\nConst REORDER_CONF_CUST_PRPS As Boolean = True 'True to sort configuration specific custom properties (for parts and assemblies), False to skip\n")),(0,n.kt)("p",null,"Watch ",(0,n.kt)("a",{parentName:"p",href:"https://youtu.be/jsjN8zNRTuc?t=97"},"video demonstration")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},'Declare PtrSafe Function StrCmpLogicalW Lib "shlwapi" (ByVal s1 As String, ByVal s2 As String) As Integer\n\nConst ASCENDING As Boolean = True\nConst REORDER_GENERAL_CUST_PRPS As Boolean = True\nConst REORDER_CONF_CUST_PRPS As Boolean = True\n\nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    If Not swModel Is Nothing Then\n                \n        If REORDER_GENERAL_CUST_PRPS Then\n            Dim swCustPrpMgr As SldWorks.CustomPropertyManager\n            Set swCustPrpMgr = swModel.Extension.CustomPropertyManager("")\n            ReorderProperties swCustPrpMgr, ASCENDING\n        End If\n        \n        If REORDER_CONF_CUST_PRPS Then\n            \n            Dim vConfNames As Variant\n            vConfNames = swModel.GetConfigurationNames\n            \n            If Not IsEmpty(vConfNames) Then\n                \n                Dim i As Integer\n                \n                For i = 0 To UBound(vConfNames)\n                    Dim swConfCustPrpMgr As SldWorks.CustomPropertyManager\n                    Set swConfCustPrpMgr = swModel.Extension.CustomPropertyManager(vConfNames(i))\n                    ReorderProperties swConfCustPrpMgr, ASCENDING\n                Next\n                \n            End If\n            \n        End If\n        \n        swModel.SetSaveFlag\n        \n    Else\n        MsgBox "Please open document"\n        \n    End If\n        \nEnd Sub\n\nSub ReorderProperties(custPrpMgr As SldWorks.CustomPropertyManager, asc As Boolean)\n    \n    Dim vPrpNames As Variant\n    Dim vPrpTypes As Variant\n    \n    \'NOTE: returned properties values are resolved for both valOut and resValOut parameters\n    custPrpMgr.GetAll2 vPrpNames, vPrpTypes, Empty, Empty\n    \n    If Not IsEmpty(vPrpNames) Then\n    \n        Dim dict As Object\n        Set dict = CreateObject("Scripting.Dictionary")\n        \n        Dim i As Integer\n        \n        For i = 0 To UBound(vPrpNames)\n            Dim prpVal As String\n            custPrpMgr.Get3 vPrpNames(i), False, prpVal, ""\n            dict.Add vPrpNames(i), Array(vPrpTypes(i), prpVal)\n            custPrpMgr.Delete2 vPrpNames(i)\n        Next\n    \n        vPrpNames = BubbleSort(vPrpNames, asc)\n        \n        For i = 0 To UBound(vPrpNames)\n            Dim vPrpData As Variant\n            vPrpData = dict.Item(vPrpNames(i))\n            If custPrpMgr.Add3(vPrpNames(i), vPrpData(0), vPrpData(1), swCustomPropertyAddOption_e.swCustomPropertyOnlyIfNew) <> swCustomInfoAddResult_e.swCustomInfoAddResult_AddedOrChanged Then\n                Err.Raise vbError, "", "Failed to add property"\n            End If\n        Next\n        \n    End If\nEnd Sub\n\nFunction BubbleSort(vStrArray As Variant, asc As Boolean) As Variant\n    \n    Dim swapPos As Integer\n    swapPos = IIf(asc, 1, -1)\n    \n    Dim vResStrArray As Variant\n    vResStrArray = vStrArray\n    \n    Dim i As Integer\n    Dim j As Integer\n    Dim tempVal As String\n    \n    For i = 0 To UBound(vResStrArray)\n        For j = i To UBound(vResStrArray)\n            If StrCmpLogicalW(StrConv(CStr(vResStrArray(i)), vbUnicode), StrConv(CStr(vResStrArray(j)), vbUnicode)) = swapPos Then\n                tempVal = vResStrArray(j)\n                vResStrArray(j) = vResStrArray(i)\n                vResStrArray(i) = tempVal\n            End If\n        Next\n    Next\n    \n    BubbleSort = vResStrArray\n    \nEnd Function\n')))}d.isMDXComponent=!0},24812:(e,r,t)=>{t.d(r,{Z:()=>o});const o=t.p+"assets/images/sorted-custom-properties-d2d539b67c619e70d64ced4642298838.png"}}]);