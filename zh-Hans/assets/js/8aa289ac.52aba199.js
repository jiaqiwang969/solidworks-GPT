"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[85212],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>u});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),d=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},S=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=d(r),S=n,u=c["".concat(l,".").concat(S)]||c[S]||p[S]||s;return r?a.createElement(u,o(o({ref:t},m),{},{components:r})):a.createElement(u,o({ref:t},m))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=S;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:n,o[1]=i;for(var d=2;d<s;d++)o[d]=r[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}S.displayName="MDXCreateElement"},21699:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=r(87462),n=(r(67294),r(3905));const s={title:"Storing data in the 3rd party storage (stream) via SwEx.AddIn framework",caption:"Stream",description:"Serializing custom structures into the 3rd party storage (stream) using SwEx.AddIn framework","toc-group-name":"labs-solidworks-swex",sidebar_position:0},o=void 0,i={unversionedId:"codestack-clone/labs/solidworks/swex/add-in/third-party-data-storage/stream/index",id:"codestack-clone/labs/solidworks/swex/add-in/third-party-data-storage/stream/index",title:"Storing data in the 3rd party storage (stream) via SwEx.AddIn framework",description:"Serializing custom structures into the 3rd party storage (stream) using SwEx.AddIn framework",source:"@site/docs/codestack-clone/labs/solidworks/swex/add-in/third-party-data-storage/stream/index.md",sourceDirName:"codestack-clone/labs/solidworks/swex/add-in/third-party-data-storage/stream",slug:"/codestack-clone/labs/solidworks/swex/add-in/third-party-data-storage/stream/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/labs/solidworks/swex/add-in/third-party-data-storage/stream/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/labs/solidworks/swex/add-in/third-party-data-storage/stream/index.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Storing data in the 3rd party storage (stream) via SwEx.AddIn framework",caption:"Stream",description:"Serializing custom structures into the 3rd party storage (stream) using SwEx.AddIn framework","toc-group-name":"labs-solidworks-swex",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Storing data in the 3rd party storage store via SwEx.AddIn framework",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/labs/solidworks/swex/add-in/third-party-data-storage/storage/"},next:{title:"API Reference",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/labs/solidworks/swex/add-in/api-reference"}},l={},d=[{value:"Stream Access Handler",id:"stream-access-handler",level:2},{value:"Reading data",id:"reading-data",level:2},{value:"Writing data",id:"writing-data",level:2}],m={toc:d},c="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Call ",(0,n.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/M_SolidWorks_Interop_sldworks_ModelDocExtension_Access3rdPartyStream.htm"},"IModelDoc2::Access3rdPartyStream")," extension method to access the 3rd party stream. Pass the boolean parameter to read or write stream."),(0,n.kt)("p",null,"use this approach when it is required to store a single structure at the model."),(0,n.kt)("h2",{id:"stream-access-handler"},"Stream Access Handler"),(0,n.kt)("p",null,"To simplify the handling of the stream lifecycle, use the Documents Manager API from the SwEx.AddIn framework:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},'Private Const STREAM_NAME As String = "CodeStackStream"\n\nPublic Class StreamData\n    Public Property Prp1 As String\n    Public Property Prp2 As Double\nEnd Class\n\nPrivate m_StreamData As StreamData\n\nPrivate Sub LoadFromStream(ByVal model As IModelDoc2)\n    Using streamHandler = model.Access3rdPartyStream(STREAM_NAME, False)\n\n        If streamHandler.Stream IsNot Nothing Then\n\n            Using str = streamHandler.Stream\n                Dim xmlSer = New XmlSerializer(GetType(StreamData))\n                m_StreamData = TryCast(xmlSer.Deserialize(str), StreamData)\n            End Using\n        End If\n    End Using\nEnd Sub\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},'private const string STREAM_NAME = "CodeStackStream";\n\npublic class StreamData\n{\n    public string Prp1 { get; set; }\n    public double Prp2 { get; set; }\n}\n\nprivate StreamData m_StreamData;\n\nprivate void LoadFromStream(IModelDoc2 model)\n{\n    using (var streamHandler = model.Access3rdPartyStream(STREAM_NAME, false))\n    {\n        if (streamHandler.Stream != null)\n        {\n            using (var str = streamHandler.Stream)\n            {\n                var xmlSer = new XmlSerializer(typeof(StreamData));\n                m_StreamData = xmlSer.Deserialize(str) as StreamData;\n            }\n        }\n    }\n}\n')),(0,n.kt)("h2",{id:"reading-data"},"Reading data"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/P_CodeStack_SwEx_AddIn_Base_IThirdPartyStreamHandler_Stream.htm"},"IThirdPartyStreamHandler::Stream")," property returns null for the stream which not exists on reading."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},'Private Const STREAM_NAME As String = "CodeStackStream"\n\nPublic Class StreamData\n    Public Property Prp1 As String\n    Public Property Prp2 As Double\nEnd Class\n\nPrivate m_StreamData As StreamData\n\nPrivate Sub LoadFromStream(ByVal model As IModelDoc2)\n    Using streamHandler = model.Access3rdPartyStream(STREAM_NAME, False)\n\n        If streamHandler.Stream IsNot Nothing Then\n\n            Using str = streamHandler.Stream\n                Dim xmlSer = New XmlSerializer(GetType(StreamData))\n                m_StreamData = TryCast(xmlSer.Deserialize(str), StreamData)\n            End Using\n        End If\n    End Using\nEnd Sub\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},'private const string STREAM_NAME = "CodeStackStream";\n\npublic class StreamData\n{\n    public string Prp1 { get; set; }\n    public double Prp2 { get; set; }\n}\n\nprivate StreamData m_StreamData;\n\nprivate void LoadFromStream(IModelDoc2 model)\n{\n    using (var streamHandler = model.Access3rdPartyStream(STREAM_NAME, false))\n    {\n        if (streamHandler.Stream != null)\n        {\n            using (var str = streamHandler.Stream)\n            {\n                var xmlSer = new XmlSerializer(typeof(StreamData));\n                m_StreamData = xmlSer.Deserialize(str) as StreamData;\n            }\n        }\n    }\n}\n')),(0,n.kt)("h2",{id:"writing-data"},"Writing data"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/P_CodeStack_SwEx_AddIn_Base_IThirdPartyStreamHandler_Stream.htm"},"IThirdPartyStreamHandler::Stream")," will always return the pointer to the stream (stream is automatically created if it doesn't exist)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},'Private Const STREAM_NAME As String = "CodeStackStream"\n\nPublic Class StreamData\n    Public Property Prp1 As String\n    Public Property Prp2 As Double\nEnd Class\n\nPrivate m_StreamData As StreamData\n\nPrivate Sub SaveToStream(ByVal model As IModelDoc2)\n    Using streamHandler = model.Access3rdPartyStream(STREAM_NAME, True)\n\n        Using str = streamHandler.Stream\n            Dim xmlSer = New XmlSerializer(GetType(StreamData))\n            xmlSer.Serialize(str, m_StreamData)\n        End Using\n    End Using\nEnd Sub\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},'private const string STREAM_NAME = "CodeStackStream";\n\npublic class StreamData\n{\n    public string Prp1 { get; set; }\n    public double Prp2 { get; set; }\n}\n\nprivate StreamData m_StreamData;\n\nprivate void SaveToStream(IModelDoc2 model)\n{\n    using (var streamHandler = model.Access3rdPartyStream(STREAM_NAME, true))\n    {\n        using (var str = streamHandler.Stream)\n        {\n            var xmlSer = new XmlSerializer(typeof(StreamData));\n\n            xmlSer.Serialize(str, m_StreamData);\n        }\n    }\n}\n')))}p.isMDXComponent=!0}}]);