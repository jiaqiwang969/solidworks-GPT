"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[33296],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>h});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=i.createContext({}),c=function(e){var t=i.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},f=function(e){var t=c(e.components);return i.createElement(a.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,a=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),d=c(n),p=r,h=d["".concat(a,".").concat(p)]||d[p]||u[p]||s;return n?i.createElement(h,o(o({ref:t},f),{},{components:n})):i.createElement(h,o({ref:t},f))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=p;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},81600:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=n(87462),r=(n(67294),n(3905));const s={title:"Get files paths from folder using Visual Basic 6 (VBA)",caption:"Get Files From Folder",description:"Function to get the list of all files in the folder with an option to traverse sub directories and specify the file extension using Visual Basic 6 (VBA)",labels:["files","extension","traverse","recursive"]},o=void 0,l={unversionedId:"codestack-clone/visual-basic/algorithms/fso/get-files/index",id:"codestack-clone/visual-basic/algorithms/fso/get-files/index",title:"Get files paths from folder using Visual Basic 6 (VBA)",description:"Function to get the list of all files in the folder with an option to traverse sub directories and specify the file extension using Visual Basic 6 (VBA)",source:"@site/docs/codestack-clone/visual-basic/algorithms/fso/get-files/index.md",sourceDirName:"codestack-clone/visual-basic/algorithms/fso/get-files",slug:"/codestack-clone/visual-basic/algorithms/fso/get-files/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/visual-basic/algorithms/fso/get-files/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/visual-basic/algorithms/fso/get-files/index.md",tags:[],version:"current",frontMatter:{title:"Get files paths from folder using Visual Basic 6 (VBA)",caption:"Get Files From Folder",description:"Function to get the list of all files in the folder with an option to traverse sub directories and specify the file extension using Visual Basic 6 (VBA)",labels:["files","extension","traverse","recursive"]},sidebar:"tutorialSidebar",previous:{title:"Browse for folder in VBA macro",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/visual-basic/algorithms/fso/browse-folder/"},next:{title:"Handling of Input and output (I/O) in Visual Basic (VBA)",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/visual-basic/algorithms/fso/io/"}},a={},c=[],f={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This function is Visual Basic 6 (VBA) allows to find the paths of files in the specified folder with an option to traverse sub directores and specifying the extension of files to return:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'vFiles = GetFiles("D:\\MyFolder") \'get all files from the MyFolder directory in the D drive and all the sub folders\nvFiles = GetFiles("D:\\MyFolder", False) \'get only top level files from the MyFolder directory in the D drive\nvFiles = GetFiles("D:\\MyFolder", True, "txt") \'get all files in .txt format from the MyFolder directory in the D drive\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Function GetFiles(path As String, Optional includeSubFolders As Boolean = True, Optional ext As String = "") As Variant\n\n    Dim paths() As String\n    Dim isInit As Boolean\n    \n    isInit = False\n    \n    Dim fso As Object\n    Set fso = CreateObject("Scripting.FileSystemObject")\n    \n    Dim folder As Object\n    Set folder = fso.GetFolder(path)\n    \n    CollectFilesFromFolder folder, includeSubFolders, ext, paths, isInit\n    \n    If isInit Then\n        GetFiles = paths\n    Else\n        GetFiles = Empty\n    End If\n    \nEnd Function\n\nSub CollectFilesFromFolder(folder As Object, includeSubFolders As Boolean, ext As String, ByRef paths() As String, ByRef isInit As Boolean)\n    \n    For Each file In folder.files\n        Dim fileExt As String\n        fileExt = Right(file.path, Len(file.path) - InStrRev(file.path, "."))\n        If LCase(fileExt) = LCase(ext) Then\n            If Not isInit Then\n                ReDim paths(0)\n                isInit = True\n            Else\n                ReDim Preserve paths(UBound(paths) + 1)\n            End If\n            paths(UBound(paths)) = file.path\n        End If\n    Next\n    \n    If includeSubFolders Then\n        Dim subFolder As Object\n        For Each subFolder In folder.SubFolders\n            CollectFilesFromFolder subFolder, includeSubFolders, ext, paths, isInit\n        Next\n    End If\n    \nEnd Sub\n')))}u.isMDXComponent=!0}}]);