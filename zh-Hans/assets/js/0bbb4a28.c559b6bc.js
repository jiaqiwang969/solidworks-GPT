"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[14358],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(t),f=i,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||a;return t?o.createElement(m,r(r({ref:n},d),{},{components:t})):o.createElement(m,r({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var l=2;l<a;l++)r[l]=t[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8683:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=t(87462),i=(t(67294),t(3905));const a={title:"Calling Functions of a SOLIDWORKS Add-in from Standalone Applications or Macros",caption:"Calling Add-in Functions"},r=void 0,s={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/getting-started/inter-process-communication/invoke-add-in-functions/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/getting-started/inter-process-communication/invoke-add-in-functions/index",title:"Calling Functions of a SOLIDWORKS Add-in from Standalone Applications or Macros",description:"Examples and explanations on how to create an API for a SOLIDWORKS add-in so that its functions can be called from a macro or standalone application (enabling custom API for the add-in).",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/getting-started/inter-process-communication/invoke-add-in-functions/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/getting-started/inter-process-communication/invoke-add-in-functions",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/getting-started/inter-process-communication/invoke-add-in-functions/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/getting-started/inter-process-communication/invoke-add-in-functions/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/getting-started/inter-process-communication/invoke-add-in-functions/index.md",tags:[],version:"current",frontMatter:{title:"Calling Functions of a SOLIDWORKS Add-in from Standalone Applications or Macros",caption:"Calling Add-in Functions"},sidebar:"tutorialSidebar",previous:{title:"Interprocess Communication Between SOLIDWORKS Applications",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/getting-started/inter-process-communication/"},next:{title:"Calling Functions of a SOLIDWORKS Add-in Object from a Standalone Application or Macro",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/getting-started/inter-process-communication/invoke-add-in-functions/via-add-in-object/"}},c={},l=[{value:"labels: Add-in API, Calling",id:"labels-add-in-api-calling",level:2}],d={toc:l},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Examples and explanations on how to create an API for a SOLIDWORKS add-in so that its functions can be called from a macro or standalone application (enabling custom API for the add-in)."),(0,i.kt)("h2",{id:"labels-add-in-api-calling"},"labels: ","[Add-in API, Calling]"),(0,i.kt)("p",null,"This section contains examples and explanations on how to create an API for a SOLIDWORKS add-in so that its functions can be called from a ",(0,i.kt)("a",{parentName:"p",href:"/docs/codestack/solidworks-api/getting-started/macros/"},"macro"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/codestack/solidworks-api/getting-started/stand-alone/"},"standalone application"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/codestack/solidworks-api/getting-started/scripts/"},"script"),", or another ",(0,i.kt)("a",{parentName:"p",href:"/docs/codestack/solidworks-api/getting-started/add-ins/"},"add-in"),"."),(0,i.kt)("p",null,"There may be a need to enable API functions of the add-in when automation of the add-in itself is required. This approach can also help improve performance. Since add-ins are in-process applications, they provide the best performance. In this case, the add-in can act as an engine for functionality triggered from a macro or another add-in, resulting in optimal performance."),(0,i.kt)("p",null,"There are several ways to achieve this functionality. Please refer to the following options for more information:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#via-the-add-in-object"},"Via the Add-in Object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#via-the-rot"},"Via the Running Object Table (ROT)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#in-process-calling"},"Via In-process Calling from an External Process"))))}u.isMDXComponent=!0}}]);