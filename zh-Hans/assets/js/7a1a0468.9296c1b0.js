"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[55662],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>w});var s=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=s.createContext({}),d=function(e){var n=s.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return s.createElement(i.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},F=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),F=r,w=p["".concat(i,".").concat(F)]||p[F]||u[F]||a;return t?s.createElement(w,o(o({ref:n},c),{},{components:t})):s.createElement(w,o({ref:n},c))}));function w(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=F;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}F.displayName="MDXCreateElement"},95134:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var s=t(87462),r=(t(67294),t(3905));const a={caption:"\u4e3a\u8349\u56fe\u5206\u914d\u968f\u673a\u989c\u8272",title:"\u5c06\u968f\u673a\u989c\u8272\u5206\u914d\u7ed9\u6587\u6863\u4e2d\u7684\u8349\u56fe\u7684\u5b8f"},o=void 0,l={unversionedId:"codestack/solidworks-api/document/sketch/assign-random-color/index",id:"codestack/solidworks-api/document/sketch/assign-random-color/index",title:"\u5c06\u968f\u673a\u989c\u8272\u5206\u914d\u7ed9\u6587\u6863\u4e2d\u7684\u8349\u56fe\u7684\u5b8f",description:"VBA\u5b8f\u5c06\u968f\u673a\u989c\u8272\u5206\u914d\u7ed9SOLIDWORKS\u96f6\u4ef6\u6216\u88c5\u914d\u4f53\u4e2d\u7684\u6240\u6709\u8349\u56fe\uff0c\u5e76\u63d0\u4f9b\u8df3\u8fc7\u5df2\u5206\u914d\u7684\u8349\u56fe\u548c\u672a\u5438\u6536\u7684\u8349\u56fe\u7684\u9009\u9879",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/document/sketch/assign-random-color/index.md",sourceDirName:"codestack/solidworks-api/document/sketch/assign-random-color",slug:"/codestack/solidworks-api/document/sketch/assign-random-color/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/sketch/assign-random-color/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/document/sketch/assign-random-color/index.md",tags:[],version:"current",frontMatter:{caption:"\u4e3a\u8349\u56fe\u5206\u914d\u968f\u673a\u989c\u8272",title:"\u5c06\u968f\u673a\u989c\u8272\u5206\u914d\u7ed9\u6587\u6863\u4e2d\u7684\u8349\u56fe\u7684\u5b8f"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u5c06\u7ebf\u4e0e\u8f74\u5bf9\u9f50",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/sketch/align-line-along-axis/"},next:{title:"\u4f7f\u7528SOLIDWORKS API\u5c06\u5f27\u7ebf\u8f6c\u6362\u4e3a\u5706",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/sketch/convert-arc-to-circle/"}},i={},d=[{value:"VBA\u5b8f\u5c06\u968f\u673a\u989c\u8272\u5206\u914d\u7ed9SOLIDWORKS\u96f6\u4ef6\u6216\u88c5\u914d\u4f53\u4e2d\u7684\u6240\u6709\u8349\u56fe\uff0c\u5e76\u63d0\u4f9b\u8df3\u8fc7\u5df2\u5206\u914d\u7684\u8349\u56fe\u548c\u672a\u5438\u6536\u7684\u8349\u56fe\u7684\u9009\u9879",id:"vba\u5b8f\u5c06\u968f\u673a\u989c\u8272\u5206\u914d\u7ed9solidworks\u96f6\u4ef6\u6216\u88c5\u914d\u4f53\u4e2d\u7684\u6240\u6709\u8349\u56fe\u5e76\u63d0\u4f9b\u8df3\u8fc7\u5df2\u5206\u914d\u7684\u8349\u56fe\u548c\u672a\u5438\u6536\u7684\u8349\u56fe\u7684\u9009\u9879",level:2},{value:"\u7ebf\u989c\u8272",id:"\u7ebf\u989c\u8272",level:2}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,s.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"vba\u5b8f\u5c06\u968f\u673a\u989c\u8272\u5206\u914d\u7ed9solidworks\u96f6\u4ef6\u6216\u88c5\u914d\u4f53\u4e2d\u7684\u6240\u6709\u8349\u56fe\u5e76\u63d0\u4f9b\u8df3\u8fc7\u5df2\u5206\u914d\u7684\u8349\u56fe\u548c\u672a\u5438\u6536\u7684\u8349\u56fe\u7684\u9009\u9879"},"VBA\u5b8f\u5c06\u968f\u673a\u989c\u8272\u5206\u914d\u7ed9SOLIDWORKS\u96f6\u4ef6\u6216\u88c5\u914d\u4f53\u4e2d\u7684\u6240\u6709\u8349\u56fe\uff0c\u5e76\u63d0\u4f9b\u8df3\u8fc7\u5df2\u5206\u914d\u7684\u8349\u56fe\u548c\u672a\u5438\u6536\u7684\u8349\u56fe\u7684\u9009\u9879"),(0,r.kt)("p",null,"\u8fd9\u4e2aVBA\u5b8f\u5c06\u968f\u673a\u989c\u8272\u5206\u914d\u7ed9\u6d3b\u52a8\u96f6\u4ef6\u6216\u88c5\u914d\u4f53\u4e2d\u7684\u6240\u6709\u8349\u56fe\u3002"),(0,r.kt)("p",null,"\u53ef\u4ee5\u914d\u7f6e\u5b8f\u4ee5\u8df3\u8fc7\u5df2\u5206\u914d\u989c\u8272\u7684\u8349\u56fe\uff0c\u5e76\u4ec5\u9009\u62e9\u672a\u5438\u6536\u7684\u8349\u56fe\uff08\u4f8b\u5982\uff0c\u672a\u5728\u5176\u4ed6\u7279\u5f81\u4e2d\u4f7f\u7528\u7684\u8349\u56fe\uff09\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},"Const SKIP_ASSIGNED As Boolean = False '\u5904\u7406\u6240\u6709\u8349\u56fe\uff08\u5305\u62ec\u5df2\u5206\u914d\u989c\u8272\u7684\u8349\u56fe\uff09\nConst UNABSORBED_ONLY As Boolean = False '\u5904\u7406\u6240\u6709\u8349\u56fe\uff08\u5438\u6536\u548c\u672a\u5438\u6536\u7684\uff09\n")),(0,r.kt)("p",null,"\u989c\u8272\u5c06\u5728\u7279\u5f81\u5916\u89c2\u7ea7\u522b\u4e0a\u5206\u914d\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Const SKIP_ASSIGNED As Boolean = True\nConst UNABSORBED_ONLY As Boolean = True\n\nDim swApp As SldWorks.SldWorks\nDim swModel As SldWorks.ModelDoc2\n\nSub main()\n\n    Set swApp = Application.SldWorks\n\n    Set swModel = swApp.ActiveDoc\n    \n    Dim vFeats As Variant\n    vFeats = CollectAllSketchFeatures(swModel.FirstFeature)\n    \n    If Not IsEmpty(vFeats) Then\n        \n        Dim i As Integer\n        \n        For i = 0 To UBound(vFeats)\n            \n            Dim swFeat As SldWorks.Feature\n            Set swFeat = vFeats(i)\n            \n            If Not SKIP_ASSIGNED Or Not HasAppearence(swFeat) Then\n                \n                If Not UNABSORBED_ONLY Or Not IsAbsorbed(swFeat) Then\n                    \n                    Dim dMatPrps(8) As Double\n                    dMatPrps(0) = Rnd(): dMatPrps(1) = Rnd(): dMatPrps(2) = Rnd()\n                    dMatPrps(3) = 1: dMatPrps(4) = 1: dMatPrps(5) = 0.5\n                    dMatPrps(6) = 0.4: dMatPrps(7) = 0: dMatPrps(8) = 0\n                    \n                    Debug.Print "Assigning color " & dMatPrps(0) * 255 & ";" & dMatPrps(1) * 255 & ";" & dMatPrps(2) * 255 & " to " & swFeat.Name\n                    \n                    swFeat.SetMaterialPropertyValues2 dMatPrps, swInConfigurationOpts_e.swThisConfiguration, Empty\n                    \n                End If\n                \n            End If\n            \n        Next\n        \n    End If\n\nEnd Sub\n\nFunction IsAbsorbed(feat As SldWorks.Feature) As Boolean\n    \n    Dim vFeatChildren As Variant\n    vFeatChildren = feat.GetChildren()\n    \n    IsAbsorbed = Not IsEmpty(vFeatChildren)\n    \nEnd Function\n\nFunction HasAppearence(feat As SldWorks.Feature) As Boolean\n    \n    Dim vMatPrpVals As Variant\n    vMatPrpVals = feat.GetMaterialPropertyValues2(swInConfigurationOpts_e.swThisConfiguration, Empty)\n            \n    HasAppearence = vMatPrpVals(0) <> -1 And vMatPrpVals(1) <> -1 And vMatPrpVals(2) <> -1\n    \nEnd Function\n\nFunction CollectAllSketchFeatures(firstFeat As SldWorks.Feature) As Variant\n    \n    Const SKETCH_FEAT_TYPE_NAME As String = "ProfileFeature"\n    Const SKETCH_3D_FEAT_TYPE_NAME As String = "3DProfileFeature"\n\n    Dim swFeats() As SldWorks.Feature\n\n    Dim swFeat As SldWorks.Feature\n    Set swFeat = firstFeat\n    \n    While Not swFeat Is Nothing\n    \n        If swFeat.GetTypeName2 = SKETCH_FEAT_TYPE_NAME Or _\n            swFeat.GetTypeName2 = SKETCH_3D_FEAT_TYPE_NAME Then\n            \n            If (Not swFeats) = -1 Then\n                ReDim swFeats(0)\n            Else\n                ReDim Preserve swFeats(UBound(swFeats) + 1)\n            End If\n            \n            Set swFeats(UBound(swFeats)) = swFeat\n            \n        End If\n        \n        Set swFeat = swFeat.GetNextFeature\n        \n    Wend\n    \n    If (Not swFeats) = -1 Then\n        CollectAllSketchFeatures = Empty\n    Else\n        CollectAllSketchFeatures = swFeats\n    End If\n    \nEnd Function\n')),(0,r.kt)("h2",{id:"\u7ebf\u989c\u8272"},"\u7ebf\u989c\u8272"),(0,r.kt)("p",null,"\u8fd9\u662f\u5c06\u989c\u8272\u5206\u914d\u4e3a\u7ebf\u989c\u8272\u800c\u4e0d\u662f\u7279\u5f81\u5916\u89c2\u7684\u5b8f\u7684\u53e6\u4e00\u79cd\u7248\u672c\u3002"),(0,r.kt)("p",null,"\u6b64\u5b8f\u5c06\u4e3a\u6240\u6709\u9009\u5b9a\u7684\u8349\u56fe\u6216\u5982\u679c\u6ca1\u6709\u9009\u5b9a\u7684\u8349\u56fe\uff0c\u5219\u4e3a\u6240\u6709\u8349\u56fe\u5206\u914d\u968f\u673a\u989c\u8272\u3002",(0,r.kt)("strong",{parentName:"p"},"UNABSORBED_ONLY"),"\u9009\u9879\u4ec5\u5728\u6ca1\u6709\u9009\u5b9a\u8349\u56fe\u65f6\u8003\u8651\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Const UNUBSORBED_ONLY As Boolean = True\n\nDim swApp As SldWorks.SldWorks\nDim swModel As SldWorks.ModelDoc2\nDim swPart As SldWorks.PartDoc\n\nSub main()\n\n    Set swApp = Application.SldWorks\n\n    Set swModel = swApp.ActiveDoc\n        \n    Set swPart = swModel\n        \n    Dim vFeats As Variant\n    \n    vFeats = CollectSelectedSketches(swModel)\n    \n    If IsEmpty(vFeats) Then\n        vFeats = CollectAllSketchFeatures(swModel.FirstFeature)\n    End If\n    \n    If Not IsEmpty(vFeats) Then\n        \n        Dim i As Integer\n        \n        For i = 0 To UBound(vFeats)\n            \n            Dim swFeat As SldWorks.Feature\n            Set swFeat = vFeats(i)\n                        \n            If False <> swFeat.Select2(False, -1) Then\n                swPart.SetLineColor RGB(CInt(255 * Rnd()), CInt(255 * Rnd()), CInt(255 * Rnd()))\n            Else\n                Err.Raise vbError, "", "Failed to select " & swFeat.Name\n            End If\n            \n        Next\n        \n    End If\n    \n    swModel.ClearSelection2 True\n\nEnd Sub\n\nFunction IsAbsorbed(feat As SldWorks.Feature) As Boolean\n    \n    Dim vFeatChildren As Variant\n    vFeatChildren = feat.GetChildren()\n    \n    IsAbsorbed = Not IsEmpty(vFeatChildren)\n    \nEnd Function\n\nFunction CollectSelectedSketches(model As SldWorks.ModelDoc2) As Variant\n    \n    Dim swFeats() As SldWorks.Feature\n\n    Dim swSelMgr As SldWorks.SelectionMgr\n    \n    Set swSelMgr = model.SelectionManager\n    \n    Dim i As Integer\n    \n    For i = 1 To swSelMgr.GetSelectedObjectCount2(-1)\n        \n        If swSelMgr.GetSelectedObjectType3(i, -1) = swSelectType_e.swSelSKETCHES Then\n            \n            If (Not swFeats) = -1 Then\n                ReDim swFeats(0)\n            Else\n                ReDim Preserve swFeats(UBound(swFeats) + 1)\n            End If\n            \n            Set swFeats(UBound(swFeats)) = swSelMgr.GetSelectedObject6(i, -1)\n            \n        End If\n        \n    Next\n    \n    If (Not swFeats) = -1 Then\n        CollectSelectedSketches = Empty\n    Else\n        CollectSelectedSketches = swFeats\n    End If\n\nEnd Function\n\nFunction CollectAllSketchFeatures(firstFeat As SldWorks.Feature) As Variant\n    \n    Const SKETCH_FEAT_TYPE_NAME As String = "ProfileFeature"\n    Const SKETCH_3D_FEAT_TYPE_NAME As String = "3DProfileFeature"\n\n    Dim swFeats() As SldWorks.Feature\n\n    Dim swFeat As SldWorks.Feature\n    Set swFeat = firstFeat\n    \n    While Not swFeat Is Nothing\n    \n        If swFeat.GetTypeName2 = SKETCH_FEAT_TYPE_NAME Or _\n            swFeat.GetTypeName2 = SKETCH_3D_FEAT_TYPE_NAME Then\n            \n            If Not UNUBSORBED_ONLY Or Not IsAbsorbed(swFeat) Then\n            \n                If (Not swFeats) = -1 Then\n                    ReDim swFeats(0)\n                Else\n                    ReDim Preserve swFeats(UBound(swFeats) + 1)\n                End If\n                \n                Set swFeats(UBound(swFeats)) = swFeat\n            \n            End If\n            \n        End If\n        \n        Set swFeat = swFeat.GetNextFeature\n        \n    Wend\n    \n    If (Not swFeats) = -1 Then\n        CollectAllSketchFeatures = Empty\n    Else\n        CollectAllSketchFeatures = swFeats\n    End If\n    \nEnd Function\n')))}u.isMDXComponent=!0}}]);