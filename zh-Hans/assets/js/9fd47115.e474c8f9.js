"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[20314],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return t?a.createElement(f,s(s({ref:n},d),{},{components:t})):a.createElement(f,s({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},54002:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const r={title:"\u4f7f\u7528SOLIDWORKS API\u6dfb\u52a0\u79fb\u52a8-\u590d\u5236\u4f53\u7279\u5f81\u5e76\u4f7f\u7528\u5171\u9762\u7ea6\u675f",caption:"\u6dfb\u52a0\u79fb\u52a8-\u590d\u5236\u4f53\u7279\u5f81\u5e76\u4f7f\u7528\u5171\u9762\u7ea6\u675f"},s=void 0,i={unversionedId:"codestack/solidworks-api/document/features-manager/move-copy-body-mate/index",id:"codestack/solidworks-api/document/features-manager/move-copy-body-mate/index",title:"\u4f7f\u7528SOLIDWORKS API\u6dfb\u52a0\u79fb\u52a8-\u590d\u5236\u4f53\u7279\u5f81\u5e76\u4f7f\u7528\u5171\u9762\u7ea6\u675f",description:"\u4f7f\u7528C# VSTA\u5b8f\u793a\u4f8b\uff0c\u4f7f\u7528SOLIDWORKS API\u67e5\u627e\u6240\u9009\u4f53\u7684\u6700\u5927\u5e73\u9762\u9762\u5e76\u5728\u96f6\u4ef6\u4e2d\u63d2\u5165\u79fb\u52a8-\u590d\u5236\u4f53\u7279\u5f81\uff0c\u5e76\u4f7f\u7528\u524d\u5e73\u9762\u6dfb\u52a0\u5171\u9762\u7ea6\u675f",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/document/features-manager/move-copy-body-mate/index.md",sourceDirName:"codestack/solidworks-api/document/features-manager/move-copy-body-mate",slug:"/codestack/solidworks-api/document/features-manager/move-copy-body-mate/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/features-manager/move-copy-body-mate/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/document/features-manager/move-copy-body-mate/index.md",tags:[],version:"current",frontMatter:{title:"\u4f7f\u7528SOLIDWORKS API\u6dfb\u52a0\u79fb\u52a8-\u590d\u5236\u4f53\u7279\u5f81\u5e76\u4f7f\u7528\u5171\u9762\u7ea6\u675f",caption:"\u6dfb\u52a0\u79fb\u52a8-\u590d\u5236\u4f53\u7279\u5f81\u5e76\u4f7f\u7528\u5171\u9762\u7ea6\u675f"},sidebar:"tutorialSidebar",previous:{title:"\u5728\u88c5\u914d\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528SOLIDWORKS API\u7f16\u8f91\u7279\u5f81",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/features-manager/modify-feature-definition-in-context/"},next:{title:"\u4f7f\u7528SOLIDWORKS API\u57fa\u4e8e\u7c7b\u578b\u540d\u79f0\u91cd\u547d\u540d\u7279\u5f81\u7684VBA\u5b8f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/features-manager/rename-features-by-type-name/"}},l={},c=[{value:"labels: \u79fb\u52a8-\u590d\u5236\u4f53,\u7ea6\u675f",id:"labels-\u79fb\u52a8-\u590d\u5236\u4f53\u7ea6\u675f",level:2}],d={toc:c},p="wrapper";function u(e){let{components:n,...r}=e;return(0,o.kt)(p,(0,a.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u4f7f\u7528C# VSTA\u5b8f\u793a\u4f8b\uff0c\u4f7f\u7528SOLIDWORKS API\u67e5\u627e\u6240\u9009\u4f53\u7684\u6700\u5927\u5e73\u9762\u9762\u5e76\u5728\u96f6\u4ef6\u4e2d\u63d2\u5165\u79fb\u52a8-\u590d\u5236\u4f53\u7279\u5f81\uff0c\u5e76\u4f7f\u7528\u524d\u5e73\u9762\u6dfb\u52a0\u5171\u9762\u7ea6\u675f\nimage: move-copy-body-mate-pmp.png"),(0,o.kt)("h2",{id:"labels-\u79fb\u52a8-\u590d\u5236\u4f53\u7ea6\u675f"},"labels: ","[\u79fb\u52a8-\u590d\u5236\u4f53,\u7ea6\u675f]"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"\u6dfb\u52a0\u4e86\u7ea6\u675f\u7684\u79fb\u52a8-\u590d\u5236\u4f53\u5c5e\u6027\u7ba1\u7406\u5668\u9875\u9762",src:t(43214).Z,width:"249",height:"764"}),"{ width=150 }"),(0,o.kt)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528SOLIDWORKS API\u7684C# VSTA\u5b8f\u793a\u4f8b\uff0c\u5b83\u53ef\u4ee5\u627e\u5230\u6240\u9009\u4f53\u7684\u6700\u5927\u5e73\u9762\u9762\uff0c\u5e76\u5728\u96f6\u4ef6\u4e2d\u63d2\u5165\u79fb\u52a8-\u590d\u5236\u4f53\u7279\u5f81\uff0c\u5e76\u4f7f\u7528SOLIDWORKS API\u7684",(0,o.kt)("a",{parentName:"p",href:"https://help.solidworks.com/2016/english/api/sldworksapi/solidworks.interop.sldworks~solidworks.interop.sldworks.ifeaturemanager~insertmovecopybody2.html"},"IFeatureManager::InsertMoveCopyBody2"),"\u65b9\u6cd5\u6dfb\u52a0\u5171\u9762\u7ea6\u675f\u3002"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u6253\u5f00\u96f6\u4ef6\u6587\u6863"),(0,o.kt)("li",{parentName:"ul"},"\u9009\u62e9\u5305\u542b\u5e73\u9762\u9762\u7684\u4efb\u4f55\u4f53"),(0,o.kt)("li",{parentName:"ul"},"\u8fd0\u884c\u5b8f\u3002\u7ed3\u679c\u662f\u901a\u8fc7SOLIDWORKS API\u65b9\u6cd5",(0,o.kt)("a",{parentName:"li",href:"https://help.solidworks.com/2016/english/api/sldworksapi/solidworks.interop.sldworks~solidworks.interop.sldworks.ifeaturemanager~insertmovecopybody2.html"},"IFeatureManager::InsertMoveCopyBody2"),"\u63d2\u5165\u4e86\u79fb\u52a8-\u590d\u5236\u4f53\u7279\u5f81\u3002\u7136\u540e\u4f7f\u7528",(0,o.kt)("a",{parentName:"li",href:"https://help.solidworks.com/2016/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.IMoveCopyBodyFeatureData~AddMate.html"},"SolidWorks.Interop.sldworks.IMoveCopyBodyFeatureData~AddMate"),"\u65b9\u6cd5\u5728\u4f53\u7684\u6700\u5927\u9762\u548c\u524d\u5e73\u9762\u4e4b\u95f4\u6dfb\u52a0\u4e86\u5171\u9762\u7ea6\u675f\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'using SolidWorks.Interop.sldworks;\nusing SolidWorks.Interop.swconst;\nusing System;\nusing System.Linq;\nusing System.Runtime.InteropServices;\n\nnamespace MoveBodyMate\n{\n    public partial class SolidWorksMacro\n    {\n        public void Main()\n        {\n            try\n            {\n                var model = swApp.IActiveDoc2;\n                var body = model.ISelectionManager.GetSelectedObject6(1, -1) as IBody2;\n\n                if (body == null)\n                {\n                    throw new NullReferenceException("\u9009\u62e9\u8981\u79fb\u52a8\u7684\u4f53");\n                }\n\n                var plane = FindFrontPlane(model);\n                var face = FindLargestPlanarFace(body);\n\n                AddCoincidentMate(model, body, plane as IEntity, face as IEntity);\n            }\n            catch(Exception ex)\n            {\n                swApp.SendMsgToUser2(ex.Message, (int)swMessageBoxIcon_e.swMbStop, (int)swMessageBoxBtn_e.swMbOk);\n            }\n        }\n\n        private static void AddCoincidentMate(ModelDoc2 model, IBody2 body, IEntity mateEnt, IEntity mateEntOnBody)\n        {\n            var selData = model.ISelectionManager.CreateSelectData();\n            selData.Mark = 1;\n\n            if (!body.Select2(false, selData))\n            {\n                throw new InvalidOperationException("\u9009\u62e9\u4f53\u5931\u8d25");\n            }\n\n            var moveCopyBodyFeat = model.FeatureManager.InsertMoveCopyBody2(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, 1);\n\n            var featData = moveCopyBodyFeat.GetDefinition() as IMoveCopyBodyFeatureData;\n\n            if (featData.AccessSelections(model, null))\n            {\n                int err;\n\n                var mate = featData.AddMate(new DispatchWrapper[]\n                {\n                    new DispatchWrapper(mateEnt),\n                    new DispatchWrapper(mateEntOnBody)\n                }, (int)swMateType_e.swMateCOINCIDENT, (int)swMateAlign_e.swMateAlignCLOSEST, 0, 0, out err);\n\n                if (mate == null)\n                {\n                    throw new NullReferenceException(string.Format("\u6dfb\u52a0\u7ea6\u675f\u5931\u8d25: {0}", (swAddMateError_e)err));\n                }\n\n                if (!moveCopyBodyFeat.ModifyDefinition(featData, model, null))\n                {\n                    throw new InvalidOperationException("\u5e94\u7528\u7279\u5f81\u66f4\u6539\u5931\u8d25");\n                }\n            }\n            else\n            {\n                throw new InvalidOperationException("\u65e0\u6cd5\u8bbf\u95ee\u5b9a\u4e49");\n            }\n        }\n\n        private IFeature FindFrontPlane(IModelDoc2 model)\n        {\n            var feat = model.IFirstFeature();\n\n            while (feat != null && feat.GetTypeName2() != "RefPlane")\n            {\n                feat = feat.IGetNextFeature();\n            }\n\n            if (feat == null)\n            {\n                throw new NullReferenceException("\u627e\u4e0d\u5230\u524d\u5e73\u9762");\n            }\n\n            return feat;\n        }\n\n        private IFace2 FindLargestPlanarFace(IBody2 body)\n        {\n            var faces = body.GetFaces() as object[];\n\n            if (faces == null)\n            {\n                throw new NullReferenceException("\u4f53\u4e2d\u4e0d\u5305\u542b\u9762");\n            }\n\n            var face = faces.Cast<IFace2>()\n                .Where(f => f.IGetSurface().IsPlane())\n                .OrderBy(f => f.GetArea()).LastOrDefault();\n\n            if (face == null)\n            {\n                throw new NullReferenceException("\u8be5\u4f53\u4e2d\u6ca1\u6709\u5e73\u9762\u9762");\n            }\n\n            return face;\n        }\n\n        public SldWorks swApp;\n    }\n}\n\n\n')))}u.isMDXComponent=!0},43214:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/move-copy-body-mate-pmp-ad29fa4152244c41ef21e2d538d7f15c.png"}}]);