"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[42498],{3905:(n,e,s)=>{s.d(e,{Zo:()=>m,kt:()=>p});var t=s(67294);function i(n,e,s){return e in n?Object.defineProperty(n,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):n[e]=s,n}function o(n,e){var s=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),s.push.apply(s,t)}return s}function r(n){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{};e%2?o(Object(s),!0).forEach((function(e){i(n,e,s[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(s)):o(Object(s)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(s,e))}))}return n}function d(n,e){if(null==n)return{};var s,t,i=function(n,e){if(null==n)return{};var s,t,i={},o=Object.keys(n);for(t=0;t<o.length;t++)s=o[t],e.indexOf(s)>=0||(i[s]=n[s]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)s=o[t],e.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(n,s)&&(i[s]=n[s])}return i}var a=t.createContext({}),l=function(n){var e=t.useContext(a),s=e;return n&&(s="function"==typeof n?n(e):r(r({},e),n)),s},m=function(n){var e=l(n.components);return t.createElement(a.Provider,{value:e},n.children)},c="mdxType",w={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(n,e){var s=n.components,i=n.mdxType,o=n.originalType,a=n.parentName,m=d(n,["components","mdxType","originalType","parentName"]),c=l(s),u=i,p=c["".concat(a,".").concat(u)]||c[u]||w[u]||o;return s?t.createElement(p,r(r({ref:e},m),{},{components:s})):t.createElement(p,r({ref:e},m))}));function p(n,e){var s=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=s.length,r=new Array(o);r[0]=u;var d={};for(var a in e)hasOwnProperty.call(e,a)&&(d[a]=e[a]);d.originalType=n,d[c]="string"==typeof n?n:i,r[1]=d;for(var l=2;l<o;l++)r[l]=s[l];return t.createElement.apply(null,r)}return t.createElement.apply(null,s)}u.displayName="MDXCreateElement"},91251:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>w,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var t=s(87462),i=(s(67294),s(3905));const o={caption:"\u6dfb\u52a0\u5b54\u7684\u5750\u6807\u5c3a\u5bf8",title:"\u5728SOLIDWORKS\u56fe\u7eb8\u89c6\u56fe\u4e2d\u6dfb\u52a0\u6c34\u5e73\u548c\u5782\u76f4\u5750\u6807\u5c3a\u5bf8\u7684\u5b8f"},r=void 0,d={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/dimensions/add-ordinate-dimensions/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/dimensions/add-ordinate-dimensions/index",title:"\u5728SOLIDWORKS\u56fe\u7eb8\u89c6\u56fe\u4e2d\u6dfb\u52a0\u6c34\u5e73\u548c\u5782\u76f4\u5750\u6807\u5c3a\u5bf8\u7684\u5b8f",description:"SOLIDWORKS VBA\u5b8f\uff0c\u7528\u4e8e\u4e3a\u6240\u9009\u89c6\u56fe\u4e2d\u7684\u6240\u6709\u5b54\u6dfb\u52a0\u6c34\u5e73\u548c\u5782\u76f4\u5750\u6807\u5c3a\u5bf8\uff0c\u76f8\u5bf9\u4e8e\u5de6\u4e0b\u9876\u70b9",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/dimensions/add-ordinate-dimensions/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/dimensions/add-ordinate-dimensions",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/dimensions/add-ordinate-dimensions/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/dimensions/add-ordinate-dimensions/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/dimensions/add-ordinate-dimensions/index.md",tags:[],version:"current",frontMatter:{caption:"\u6dfb\u52a0\u5b54\u7684\u5750\u6807\u5c3a\u5bf8",title:"\u5728SOLIDWORKS\u56fe\u7eb8\u89c6\u56fe\u4e2d\u6dfb\u52a0\u6c34\u5e73\u548c\u5782\u76f4\u5750\u6807\u5c3a\u5bf8\u7684\u5b8f"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u5411\u5c3a\u5bf8\u6dfb\u52a0\u65b9\u7a0b",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/dimensions/add-equation/"},next:{title:"\u4f7f\u7528SOLIDWORKS API\u5728\u4e24\u4e2a\u7ebf\u6bb5\u4e4b\u95f4\u6dfb\u52a0\u667a\u80fd\u5c3a\u5bf8",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/dimensions/add-smart-dimension-between-two-segments/"}},a={},l=[{value:"image: ordinate-dimensions.png",id:"image-ordinate-dimensionspng",level:2}],m={toc:l},c="wrapper";function w(n){let{components:e,...o}=n;return(0,i.kt)(c,(0,t.Z)({},m,o,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"SOLIDWORKS VBA\u5b8f\uff0c\u7528\u4e8e\u4e3a\u6240\u9009\u89c6\u56fe\u4e2d\u7684\u6240\u6709\u5b54\u6dfb\u52a0\u6c34\u5e73\u548c\u5782\u76f4\u5750\u6807\u5c3a\u5bf8\uff0c\u76f8\u5bf9\u4e8e\u5de6\u4e0b\u9876\u70b9"),(0,i.kt)("h2",{id:"image-ordinate-dimensionspng"},"image: ordinate-dimensions.png"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"\u56fe\u7eb8\u89c6\u56fe\u4e2d\u7684\u5750\u6807\u5c3a\u5bf8",src:s(93885).Z,width:"690",height:"554"})),(0,i.kt)("p",null,"\u8fd9\u4e2aSOLIDWORKS VBA\u5b8f\u53ef\u4ee5\u81ea\u52a8\u4e3a\u6240\u9009\u56fe\u7eb8\u89c6\u56fe\u4e2d\u7684\u6240\u6709\u5b54\u6dfb\u52a0\u6c34\u5e73\u5750\u6807\u5c3a\u5bf8\u3002"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5b8f\u5c06\u901a\u8fc7\u67e5\u627e\u89c6\u56fe\u4e2d\u7684\u5de6\u4e0b\u9876\u70b9\u6765\u786e\u5b9a\u5750\u6807\u5c3a\u5bf8\u7684\u539f\u70b9"),(0,i.kt)("li",{parentName:"ul"},"\u5b8f\u5c06\u67e5\u627e\u89c6\u56fe\u4e2d\u7684\u6240\u6709\u5b54\uff08\u4ec5\u5305\u62ec\u5185\u90e8\u5b54\uff0c\u4e0d\u8003\u8651\u5706\u89d2\uff09"),(0,i.kt)("li",{parentName:"ul"},"\u5b8f\u5c06\u4e3a\u5b54\u6dfb\u52a0\u6c34\u5e73\u548c\u5782\u76f4\u5c3a\u5bf8"),(0,i.kt)("li",{parentName:"ul"},"\u5c3a\u5bf8\u5c06\u76f8\u5bf9\u4e8e\u56fe\u7eb8\u89c6\u56fe\u8fdb\u884c\u5b9a\u4f4d")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\nDim swMathUtils As SldWorks.MathUtility\n\nSub main()\n\n    Set swApp = Application.SldWorks\n        \n    Set swMathUtils = swApp.GetMathUtility\n        \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    Dim swView As SldWorks.view\n\n    Set swView = swModel.SelectionManager.GetSelectedObject6(1, -1)\n    \n    If swView Is Nothing Then\n        Err.Raise vbError, "", "\u8bf7\u9009\u62e9\u89c6\u56fe"\n    End If\n    \n    Dim swOrigVertex As SldWorks.vertex\n    Set swOrigVertex = FindOriginVertex(swView)\n    \n    Dim vHoles As Variant\n    vHoles = FindHoles(swView)\n    \n    If IsEmpty(vHoles) Then\n        Err.Raise vbError, "", "\u672a\u627e\u5230\u5b54"\n    End If\n    \n    Dim vOutline As Variant\n    vOutline = swView.GetOutline\n    \n    Dim offset As Double\n    offset = (vOutline(2) - vOutline(1)) * 0.1\n    \n    AddOrdinateDimensions swModel, swOrigVertex, vHoles, swAddOrdinateDims_e.swHorizontalOrdinate, 0, vOutline(1) - offset\n    AddOrdinateDimensions swModel, swOrigVertex, vHoles, swAddOrdinateDims_e.swVerticalOrdinate, vOutline(0) - offset, 0\n\nEnd Sub\n\nSub AddOrdinateDimensions(model As SldWorks.ModelDoc2, origVertex As SldWorks.vertex, holes As Variant, dimType As swAddOrdinateDims_e, x As Double, y As Double)\n    \n    Dim swSels() As SldWorks.Entity\n    ReDim swSels(1 + UBound(holes))\n    \n    Set swSels(0) = origVertex\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(holes)\n        Set swSels(i + 1) = holes(i)\n    Next\n    \n    If model.Extension.MultiSelect2(swSels, False, Nothing) = UBound(swSels) + 1 Then\n        Dim res As Long\n        res = model.Extension.AddOrdinateDimension(dimType, x, y, 0)\n        \n        model.SetPickMode\n        \n        If res <> swCreateOrdDimError_e.swCreateOrdDimErr_Success Then\n            Err.Raise vbError, "", "\u6dfb\u52a0\u5750\u6807\u5c3a\u5bf8\u5931\u8d25"\n        End If\n    Else\n        Err.Raise vbError, "", "\u9009\u62e9\u5b9e\u4f53\u5931\u8d25"\n    End If\n    \nEnd Sub\n\n\nFunction FindOriginVertex(view As SldWorks.view) As SldWorks.vertex\n    \n    Dim vComps As Variant\n    \n    vComps = view.GetVisibleComponents\n    \n    Dim swViewTransform As SldWorks.MathTransform\n    Set swViewTransform = view.ModelToViewTransform\n    \n    Dim swOriginVertex As SldWorks.vertex\n    \n    If Not IsEmpty(vComps) Then\n    \n        Dim i As Integer\n        \n        For i = 0 To UBound(vComps)\n        \n            Dim swComp As SldWorks.Component2\n                \n            Set swComp = vComps(i)\n            \n            Dim vVisEnts As Variant\n            vVisEnts = view.GetVisibleEntities2(swComp, swViewEntityType_e.swViewEntityType_Vertex)\n            \n            Dim j As Integer\n            \n            For j = 0 To UBound(vVisEnts)\n                Dim swVertex As SldWorks.vertex\n                Set swVertex = vVisEnts(j)\n                                \n                If swOriginVertex Is Nothing Then\n                    Set swOriginVertex = swVertex\n                Else\n                    Dim vCurOrigCoord As Variant\n                    vCurOrigCoord = GetVertexCoordinate(swOriginVertex, swViewTransform)\n                    \n                    Dim vCoord As Variant\n                    vCoord = GetVertexCoordinate(swVertex, swViewTransform)\n\n                    If vCoord(0) < vCurOrigCoord(0) And vCoord(1) < vCurOrigCoord(1) Then\n                        Set swOriginVertex = swVertex\n                    End If\n                    \n                End If\n                \n            Next\n            \n        Next\n        \n    End If\n    \n    If swOriginVertex Is Nothing Then\n        Err.Raise vbError, "", "\u672a\u627e\u5230\u539f\u70b9\u9876\u70b9"\n    End If\n    \n    Set FindOriginVertex = swOriginVertex\n    \nEnd Function\n\nFunction GetVertexCoordinate(vertex As SldWorks.vertex, transform As SldWorks.MathTransform) As Variant\n        \n    Dim vCoordPt As Variant\n    vCoordPt = vertex.GetPoint()\n    \n    Dim swMathPt As SldWorks.MathPoint\n    Set swMathPt = swMathUtils.CreatePoint(vCoordPt)\n    \n    Set swMathPt = swMathPt.MultiplyTransform(transform)\n    \n    GetVertexCoordinate = swMathPt.ArrayData\n    \nEnd Function\n\nFunction FindHoles(view As SldWorks.view) As Variant\n    \n    Dim vComps As Variant\n    \n    vComps = view.GetVisibleComponents\n       \n    Dim swHoles() As SldWorks.Edge\n    \n    If Not IsEmpty(vComps) Then\n    \n        Dim i As Integer\n        \n        For i = 0 To UBound(vComps)\n        \n            Dim swComp As SldWorks.Component2\n                \n            Set swComp = vComps(i)\n            \n            Dim vVisEnts As Variant\n            vVisEnts = view.GetVisibleEntities2(swComp, swViewEntityType_e.swViewEntityType_Edge)\n            \n            Dim j As Integer\n            \n            For j = 0 To UBound(vVisEnts)\n                \n                Dim swEdge As SldWorks.Edge\n                Set swEdge = vVisEnts(j)\n                \n                Dim swCurve As SldWorks.Curve\n                Set swCurve = swEdge.GetCurve\n                \n                If False <> swCurve.IsCircle() Then\n                    \n                    Dim isClosed As Boolean\n                    swCurve.GetEndParams -1, -1, isClosed, -1\n                    \n                    If False <> isClosed Then\n                    \n                        If (Not swHoles) = -1 Then\n                            ReDim swHoles(0)\n                        Else\n                            ReDim Preserve swHoles(UBound(swHoles) + 1)\n                        End If\n                        \n                        Set swHoles(UBound(swHoles)) = swEdge\n        \n                    End If\n                    \n                End If\n                \n            Next\n            \n        Next\n        \n    End If\n    \n    If (Not swHoles) = -1 Then\n        FindHoles = Empty\n    Else\n        FindHoles = swHoles\n    End If\n\nEnd Function\n')))}w.isMDXComponent=!0},93885:(n,e,s)=>{s.d(e,{Z:()=>t});const t=s.p+"assets/images/ordinate-dimensions-c4062817d08ec4fc19d47fea853211f3.png"}}]);