"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[19391],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>D});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),m=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=m(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=m(t),d=o,D=c["".concat(p,".").concat(d)]||c[d]||l[d]||s;return t?r.createElement(D,a(a({ref:n},u),{},{components:t})):r.createElement(D,a({ref:n},u))}));function D(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:o,a[1]=i;for(var m=2;m<s;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4573:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>m});var r=t(87462),o=(t(67294),t(3905));const s={title:"Read All Custom Properties using SOLIDWORKS Document Manager API",caption:"Read All Properties",description:"VBA macro which reads all custom properties from all sources (file, configuration, cut-list) using SOLIDWORKS Document Manager API",image:"properties-list.png",labels:["read properties","custom properties"]},a=void 0,i={unversionedId:"codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/index",id:"codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/index",title:"Read All Custom Properties using SOLIDWORKS Document Manager API",description:"VBA macro which reads all custom properties from all sources (file, configuration, cut-list) using SOLIDWORKS Document Manager API",source:"@site/docs/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/index.md",sourceDirName:"codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties",slug:"/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/index.md",tags:[],version:"current",frontMatter:{title:"Read All Custom Properties using SOLIDWORKS Document Manager API",caption:"Read All Properties",description:"VBA macro which reads all custom properties from all sources (file, configuration, cut-list) using SOLIDWORKS Document Manager API",image:"properties-list.png",labels:["read properties","custom properties"]},sidebar:"tutorialSidebar",previous:{title:"Read all invisible custom properties using SOLIDWORKS Document Manager API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-invisible-properties/"},next:{title:"Write custom properties to all sources using Document Manager API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/write-all-properties/"}},p={},m=[],u={toc:m},c="wrapper";function l(e){let{components:n,...s}=e;return(0,o.kt)(c,(0,r.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"SOLIDWORKS custom properties",src:t(13009).Z,width:"1021",height:"685"}),"{ width=550 }"),(0,o.kt)("p",null,"This VBA macro demonstrates how to read all custom properties from all sources (general file properties, configuration specific and cut-list item properties) using SOLIDWORKS Document Manager API."),(0,o.kt)("p",null,"All the results output to the immediate window of VBA editor in the following format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'General Custom Properties\n    Property: ApprovedDate\n    Value/Text Expression: 12/09/2019\n    Evaluated Value: 12/09/2019\n    Type: Date\n\nConfiguration Specific Properties\n    B\n        Property: ApprovedDate\n        Value/Text Expression: 12/09/2019\n        Evaluated Value: 12/09/2019\n        Type: Date\n\n    A\n        Property: ApprovedDate\n        Value/Text Expression: 12/09/2019\n        Evaluated Value: 12/09/2019\n        Type: Date\n\nCut List Properties\n    B\n            Property: Bounding Box Length\n            Value/Text Expression: "SW-Bounding Box Length@@@Sheet<1>@Part3.SLDPRT"\n            Evaluated Value: 100\n            Type: Text\n...\n\n    A\n            Property: Bounding Box Length\n            Value/Text Expression: "SW-Bounding Box Length@@@Sheet<1>@CS-02.SLDPRT"\n            Evaluated Value: 150\n            Type: Text\n...\n')),(0,o.kt)("p",null,"Specify the full path of the file in the ",(0,o.kt)("em",{parentName:"p"},"FILE_PATH")," constant."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Const SW_DM_KEY As String = "Your license key"\n\nConst FILE_PATH As String = "C:\\SampleModel.SLDPRT"\n\nDim swDmClassFactory As SwDocumentMgr.swDmClassFactory\nDim swDmApp As SwDocumentMgr.SwDMApplication\n\nSub main()\n\n    Set swDmClassFactory = CreateObject("SwDocumentMgr.SwDMClassFactory")\n    \n    If Not swDmClassFactory Is Nothing Then\n        \n        Set swDmApp = swDmClassFactory.GetApplication(SW_DM_KEY)\n        Dim swDmDoc As SwDocumentMgr.SwDMDocument19\n        Set swDmDoc = OpenDocument(FILE_PATH, True)\n        \n        PrintGeneralProperties swDmDoc\n        PrintConfigurationSpecificProperties swDmDoc\n        PrintCutListProperties swDmDoc\n        \n    Else\n        MsgBox "Document Manager SDK is not installed"\n    End If\n    \nEnd Sub\n\nSub PrintGeneralProperties(dmDoc As SwDocumentMgr.SwDMDocument19)\n    \n    Dim vNames As Variant\n    Dim vTypes As Variant\n    Dim vLinkedTo As Variant\n    Dim vValues As Variant\n    \n    dmDoc.GetAllCustomPropertyNamesAndValues vNames, vTypes, vLinkedTo, vValues\n    \n    Debug.Print "General Custom Properties"\n    \n    PrintProperties vNames, vTypes, vLinkedTo, vValues, "    "\n    \nEnd Sub\n\nSub PrintConfigurationSpecificProperties(dmDoc As SwDocumentMgr.SwDMDocument19)\n    \n    Dim vConfNames As Variant\n    vConfNames = dmDoc.ConfigurationManager.GetConfigurationNames()\n    \n    Dim i As Integer\n    \n    Debug.Print "Configuration Specific Properties"\n    \n    For i = 0 To UBound(vConfNames)\n        \n        Dim confName As String\n        confName = vConfNames(i)\n        \n        Dim swDmConf As SwDocumentMgr.SwDMConfiguration13\n        Set swDmConf = dmDoc.ConfigurationManager.GetConfigurationByName(confName)\n        \n        Dim vNames As Variant\n        Dim vTypes As Variant\n        Dim vLinkedTo As Variant\n        Dim vValues As Variant\n        \n        \'NOTE: order of resolved and expressions is not correct for configurations in SW DM API, so reversing the variables\n        swDmConf.GetAllCustomPropertyNamesAndValues vNames, vTypes, vValues, vLinkedTo\n                \n        Debug.Print "    " & confName\n        \n        PrintProperties vNames, vTypes, vLinkedTo, vValues, "        "\n        \n    Next\n    \nEnd Sub\n\nSub PrintCutListProperties(dmDoc As SwDocumentMgr.SwDMDocument19)\n\n    Dim vConfNames As Variant\n    vConfNames = dmDoc.ConfigurationManager.GetConfigurationNames()\n    \n    Dim i As Integer\n    \n    Debug.Print "Cut List Properties"\n    \n    For i = 0 To UBound(vConfNames)\n        \n        Dim confName As String\n        confName = vConfNames(i)\n        \n        Dim swDmConf As SwDocumentMgr.SwDMConfiguration16\n        Set swDmConf = dmDoc.ConfigurationManager.GetConfigurationByName(confName)\n        \n        Dim vCutListItems As Variant\n        vCutListItems = swDmConf.GetCutListItems\n        \n        Debug.Print "    " & confName\n        \n        If Not IsEmpty(vCutListItems) Then\n            \n            Dim j As Integer\n            \n            For j = 0 To UBound(vCutListItems)\n                \n                Dim swDmCutList As SwDocumentMgr.SwDMCutListItem3\n                Set swDmCutList = vCutListItems(j)\n                \n                Dim vNames As Variant\n                Dim prpTypes() As SwDmCustomInfoType\n                Dim prpLinkedTo() As String\n                Dim prpValues() As String\n                    \n                vNames = swDmCutList.GetCustomPropertyNames()\n                \n                If Not IsEmpty(vNames) Then\n                    \n                    ReDim prpTypes(UBound(vNames))\n                    ReDim prpLinkedTo(UBound(vNames))\n                    ReDim prpValues(UBound(vNames))\n                    \n                    Dim k As Integer\n                    \n                    For k = 0 To UBound(vNames)\n                        prpValues(k) = swDmCutList.GetCustomPropertyValue2(CStr(vNames(k)), prpTypes(k), prpLinkedTo(k))\n                    Next\n                    \n                    PrintProperties vNames, prpTypes, prpLinkedTo, prpValues, "            "\n                    \n                End If\n                \n            Next\n        \n        Else\n            Debug.Print "        -No Cut Lists-"\n        End If\n        \n    Next\n\nEnd Sub\n\nSub PrintProperties(vPrpNames As Variant, vTypes As Variant, vLinkedTo As Variant, vValues As Variant, indent As String)\n    \n    Dim i As Integer\n    \n    If Not IsEmpty(vPrpNames) Then\n    \n        For i = 0 To UBound(vPrpNames)\n            \n            Dim prpName As String\n            prpName = vPrpNames(i)\n            \n            Dim prpVal As String\n            Dim prpResVal As String\n            \n            prpResVal = vValues(i)\n            prpVal = vLinkedTo(i)\n            \n            If prpVal = "" Then\n                prpVal = prpResVal\n            End If\n            \n            Dim prpType As String\n            \n            Select Case vTypes(i)\n                Case SwDmCustomInfoType.swDmCustomInfoDate\n                    prpType = "Date"\n                Case SwDmCustomInfoType.swDmCustomInfoNumber\n                    prpType = "Number"\n                Case SwDmCustomInfoType.swDmCustomInfoText\n                    prpType = "Text"\n                Case SwDmCustomInfoType.swDmCustomInfoYesOrNo\n                    prpType = "YesNo"\n                Case SwDmCustomInfoType.swDmCustomInfoUnknown\n                    prpType = "Unknown"\n            End Select\n            \n            Debug.Print indent & "Property: " & prpName\n            Debug.Print indent & "Value/Text Expression: " & prpVal\n            Debug.Print indent & "Evaluated Value: " & prpResVal\n            Debug.Print indent & "Type: " & prpType\n            Debug.Print ""\n        Next\n    Else\n        Debug.Print indent & "-No Properties-"\n    End If\n    \nEnd Sub\n\nFunction OpenDocument(filePath As String, readOnly As Boolean) As SwDocumentMgr.SwDMDocument19\n    \n    Dim openErr As SwDmDocumentOpenError\n    \n    Dim docType As SwDocumentMgr.SwDmDocumentType\n    \n    Dim ext As String\n    ext = LCase(Right(filePath, Len(".SLDXXX")))\n    \n    Select Case ext\n        Case ".sldprt"\n            docType = swDmDocumentPart\n        Case ".sldasm"\n            docType = swDmDocumentAssembly\n        Case ".slddrw"\n            docType = swDmDocumentDrawing\n    End Select\n    \n    Dim swDmDoc As SwDocumentMgr.SwDMDocument19\n    \n    Set swDmDoc = swDmApp.GetDocument(filePath, docType, readOnly, openErr)\n    \n    If swDmDoc Is Nothing Then\n        err.Raise vbError, "", "Failed to open document: " & openErr\n    End If\n    \n    Set OpenDocument = swDmDoc\n    \nEnd Function\n')))}l.isMDXComponent=!0},13009:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/properties-list-c1582d565a458a68ab737ab07a2ecfa7.png"}}]);