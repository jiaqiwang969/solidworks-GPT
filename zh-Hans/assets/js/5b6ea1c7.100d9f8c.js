"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[88880],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),i=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=i(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),u=i(t),p=o,f=u["".concat(l,".").concat(p)]||u[p]||d[p]||s;return t?r.createElement(f,a(a({ref:n},m),{},{components:t})):r.createElement(f,a({ref:n},m))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var i=2;i<s;i++)a[i]=t[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},76911:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var r=t(87462),o=(t(67294),t(3905));const s={title:"Get all external references of document using SOLIDWORKS Document Manager API",caption:"Get All External References",description:"Macro demonstrates how to extract all external references (including nested references) for specified SOLIDWORKS file using Document Manager API",labels:["document manager","external references","components"]},a=void 0,c={unversionedId:"codestack-clone/solidworks-document-manager-api/document/get-external-references/index",id:"codestack-clone/solidworks-document-manager-api/document/get-external-references/index",title:"Get all external references of document using SOLIDWORKS Document Manager API",description:"Macro demonstrates how to extract all external references (including nested references) for specified SOLIDWORKS file using Document Manager API",source:"@site/docs/codestack-clone/solidworks-document-manager-api/document/get-external-references/index.md",sourceDirName:"codestack-clone/solidworks-document-manager-api/document/get-external-references",slug:"/codestack-clone/solidworks-document-manager-api/document/get-external-references/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-document-manager-api/document/get-external-references/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/solidworks-document-manager-api/document/get-external-references/index.md",tags:[],version:"current",frontMatter:{title:"Get all external references of document using SOLIDWORKS Document Manager API",caption:"Get All External References",description:"Macro demonstrates how to extract all external references (including nested references) for specified SOLIDWORKS file using Document Manager API",labels:["document manager","external references","components"]},sidebar:"tutorialSidebar",previous:{title:"Export part to Parasolid via Document Manager API (without SOLIDWORKS)",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-document-manager-api/document/export-parasolid/"},next:{title:"Extract mass properties from all configurations using SOLIDWORKS Document Manager API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-document-manager-api/document/get-mass-properties/"}},l={},i=[],m={toc:i},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This macro demonstrates how to extract all external references (including nested references, assembly components, drawing views) for specified SOLIDWORKS file (part, assembly or drawing) using SOLIDWORKS Document Manager API."),(0,o.kt)("p",null,"Modify the macro and specify the full path to the root file to collect references from."),(0,o.kt)("p",null,"Run the macro. All references are output to the immediate window."),(0,o.kt)("p",null,"Macro is using the ",(0,o.kt)("a",{parentName:"p",href:"https://help.solidworks.com/2018/english/api/swdocmgrapi/SolidWorks.Interop.swdocumentmgr~SolidWorks.Interop.swdocumentmgr.ISwDMDocument21~GetAllExternalReferences5.html"},"ISwDMDocument21::GetAllExternalReferences5")," SOLIDWORKS Document Manager API to list all the dependencies of the files. This method is called recursively to collect the references at all levels of SOLIDWORKS assembly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Const FILE_PATH As String = "FILE PATH"\n\nConst LIC_KEY As String = "YOUR LICENSE KEY"\n\nDim swDmApp As SwDocumentMgr.SwDMApplication4\n\nSub main()\n\n    Dim swClassFact As SwDocumentMgr.SwDMClassFactory\n    \n    Set swClassFact = New SwDocumentMgr.SwDMClassFactory\n    \n    Set swDmApp = swClassFact.GetApplication(LIC_KEY)\n    \n    Dim filesColl As Collection\n    Set filesColl = New Collection\n    \n    CollectExternalReferences FILE_PATH, filesColl\n    \n    Dim i As Integer\n    \n    Debug.Print "External References:"\n    \n    For i = 1 To filesColl.Count\n        Debug.Print filesColl(i)\n    Next\n    \nEnd Sub\n\nFunction CollectExternalReferences(filePath As String, coll As Collection)\n    \n    If Not Contains(coll, filePath) Then\n        coll.Add filePath\n    End If\n    \n    Dim swDmDoc As SwDocumentMgr.SwDMDocument19\n    \n    Dim searchOpts As SwDocumentMgr.SwDMSearchOption\n    Set searchOpts = swDmApp.GetSearchOptionObject\n    searchOpts.SearchFilters = SwDmSearchFilters.SwDmSearchExternalReference + SwDmSearchFilters.SwDmSearchRootAssemblyFolder + SwDmSearchFilters.SwDmSearchSubfolders + SwDmSearchFilters.SwDmSearchInContextReference\n    \n    Set swDmDoc = OpenDocument(filePath)\n    \n    If Not swDmDoc Is Nothing Then\n        \n        Dim vBrokenRefs As Variant\n        Dim vVirtComps As Variant\n        Dim vTimeStamps As Variant\n        Dim vFilePaths As Variant\n        \n        vFilePaths = swDmDoc.GetAllExternalReferences4(searchOpts, vBrokenRefs, vVirtComps, vTimeStamps)\n        \n        If Not IsEmpty(vFilePaths) Then\n            Dim i As Integer\n            \n            For i = 0 To UBound(vFilePaths)\n                Dim childFilePath As String\n                childFilePath = vFilePaths(i)\n                CollectExternalReferences childFilePath, coll\n            Next\n            \n        End If\n        \n    Else\n        Debug.Print "Failed to open document: " & filePath\n    End If\n    \nEnd Function\n\nFunction OpenDocument(filePath As String) As SwDocumentMgr.SwDMDocument19\n    \n    Dim err As SwDmDocumentOpenError\n    \n    Dim docType As SwDocumentMgr.SwDmDocumentType\n    \n    Dim ext As String\n    ext = LCase(Right(filePath, 6))\n    \n    Select Case ext\n        Case "sldprt"\n            docType = swDmDocumentPart\n        Case "sldasm"\n            docType = swDmDocumentAssembly\n        Case "slddrw"\n            docType = swDmDocumentDrawing\n    End Select\n    \n    Dim swDmDoc As SwDocumentMgr.SwDMDocument19\n    \n    Set swDmDoc = swDmApp.GetDocument(filePath, docType, True, err)\n    \n    Set OpenDocument = swDmDoc\n    \nEnd Function\n\nFunction Contains(coll As Collection, item As String) As Boolean\n    \n    Dim i As Integer\n    \n    For i = 1 To coll.Count\n        If LCase(coll.item(i)) = LCase(item) Then\n            Contains = True\n            Exit Function\n        End If\n    Next\n    \n    Contains = False\n    \nEnd Function\n')))}d.isMDXComponent=!0}}]);