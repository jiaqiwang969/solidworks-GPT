"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[83348],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=d(n),p=o,m=u["".concat(c,".").concat(p)]||u[p]||f[p]||i;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:o,s[1]=a;for(var d=2;d<i;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3179:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=n(87462),o=(n(67294),n(3905));const i={title:"Extract selection from boss-extrude feature using SOLIDWORKS API",caption:"Extract Selection From Boss-Extrude Feature",description:"C# VSTA macro to extract selection references (from entity, end condition and direction references) from the selected boss-extrude feature using SOLIDWORKS API",image:"boss-extrude-property-page.png",labels:["selection","boss-extrude"]},s=void 0,a={unversionedId:"codestack/solidworks-api/document/features-manager/get-boss-extrude-selection/index",id:"codestack/solidworks-api/document/features-manager/get-boss-extrude-selection/index",title:"Extract selection from boss-extrude feature using SOLIDWORKS API",description:"C# VSTA macro to extract selection references (from entity, end condition and direction references) from the selected boss-extrude feature using SOLIDWORKS API",source:"@site/docs/codestack/solidworks-api/document/features-manager/get-boss-extrude-selection/index.md",sourceDirName:"codestack/solidworks-api/document/features-manager/get-boss-extrude-selection",slug:"/codestack/solidworks-api/document/features-manager/get-boss-extrude-selection/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/features-manager/get-boss-extrude-selection/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/document/features-manager/get-boss-extrude-selection/index.md",tags:[],version:"current",frontMatter:{title:"Extract selection from boss-extrude feature using SOLIDWORKS API",caption:"Extract Selection From Boss-Extrude Feature",description:"C# VSTA macro to extract selection references (from entity, end condition and direction references) from the selected boss-extrude feature using SOLIDWORKS API",image:"boss-extrude-property-page.png",labels:["selection","boss-extrude"]},sidebar:"tutorialSidebar",previous:{title:"Find features in the tree by type and/or name pattern using SOLIDWORKS API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/features-manager/find-features/"},next:{title:"VBA macro to get feature type names using SOLIDWORKS API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/features-manager/get-feature-type-name/"}},c={},d=[],l={toc:d},u="wrapper";function f(e){let{components:t,...i}=e;return(0,o.kt)(u,(0,r.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This C# VSTA macro extracts the information about the selection entities specified in the From Entity, End Condition and Direction selection boxes in the Boss-Extrude feature definition using SOLIDWORKS API."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Boss-Extrude feature property manager page",src:n(35889).Z,width:"257",height:"673"})),(0,o.kt)("p",null,"Extracted data is output to the Output Window of VSTA Editor in the following format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"From Entity: Yes [swSelFACES]\nEnd Condition (Direction 1): No\nEnd Condition (Direction 2): No\nDirection (Direction 1): Yes [swSelSKETCHSEGS]\nDirection (Direction 2): No\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'using SolidWorks.Interop.sldworks;\nusing SolidWorks.Interop.swconst;\nusing System.Runtime.InteropServices;\nusing System;\nusing System.Diagnostics;\n\nnamespace GetExtrudeFeatureSelection.csproj\n{\n    public partial class SolidWorksMacro\n    {\n        public void Main()\n        {\n            IModelDoc2 model = swApp.IActiveDoc2;\n\n            if (model != null)\n            {\n                IFeature feat = model.ISelectionManager.GetSelectedObject6(1, -1) as IFeature;\n\n                if (feat != null)\n                {\n                    IExtrudeFeatureData2 featData = feat.GetDefinition() as IExtrudeFeatureData2;\n\n                    if (featData != null)\n                    {\n                        if (featData.AccessSelections(model, null))\n                        {\n                            object fromEntity;\n                            int fromEntType;\n                            featData.GetFromEntity(out fromEntity, out fromEntType);\n\n                            Debug.Print(string.Format("From Entity: {0}",\n                                    fromEntity != null ? string.Format("Yes [{0}]", (swSelectType_e)fromEntType) : "No"));\n\n                            int endCondRefType;\n                            object endCondRef = featData.GetEndConditionReference(true, out endCondRefType);\n\n                            Debug.Print(string.Format("End Condition (Direction 1): {0}",\n                                    endCondRef != null ? string.Format("Yes [{0}]", (swSelectType_e)endCondRef) : "No"));\n\n                            endCondRef = featData.GetEndConditionReference(false, out endCondRefType);\n\n                            Debug.Print(string.Format("End Condition (Direction 2): {0}",\n                                    endCondRef != null ? string.Format("Yes [{0}]", (swSelectType_e)endCondRef) : "No"));\n\n                            object firstDirDirRef;\n                            int firstDirDirRefType;\n                            object secondDirDirRef;\n                            int secondDirDirRefType;\n\n                            featData.GetDirectionReference(out firstDirDirRef, out firstDirDirRefType, out secondDirDirRef, out secondDirDirRefType);\n\n                            Debug.Print(string.Format("Direction (Direction 1): {0}",\n                                    firstDirDirRef != null ? string.Format("Yes [{0}]", (swSelectType_e)firstDirDirRefType) : "No"));\n\n                            Debug.Print(string.Format("Direction (Direction 2): {0}",\n                                    secondDirDirRef != null ? string.Format("Yes [{0}]", (swSelectType_e)secondDirDirRefType) : "No"));\n\n                            featData.ReleaseSelectionAccess();\n                        }\n                        else\n                        {\n                            throw new InvalidOperationException("Failed to access feature selection");\n                        }\n                    }\n                    else \n                    {\n                        throw new InvalidCastException("Selected feature is not Boss-Extrude");\n                    }\n                }\n                else \n                {\n                    throw new NullReferenceException("Select feature");\n                }\n            }\n            else \n            {\n                throw new NullReferenceException("Open model");\n            }\n        }\n\n        public SldWorks swApp;\n    }\n}\n')))}f.isMDXComponent=!0},35889:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/boss-extrude-property-page-d4125c43275ff712a053a6ca8485816a.png"}}]);