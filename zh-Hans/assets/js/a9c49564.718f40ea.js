"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[64273],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>u});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},s=Object.keys(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var a=r.createContext({}),d=function(n){var e=r.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},p=function(n){var e=d(n.components);return r.createElement(a.Provider,{value:e},n.children)},c="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,s=n.originalType,a=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),c=d(t),f=i,u=c["".concat(a,".").concat(f)]||c[f]||m[f]||s;return t?r.createElement(u,o(o({ref:e},p),{},{components:t})):r.createElement(u,o({ref:e},p))}));function u(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var s=t.length,o=new Array(s);o[0]=f;var l={};for(var a in e)hasOwnProperty.call(e,a)&&(l[a]=e[a]);l.originalType=n,l[c]="string"==typeof n?n:i,o[1]=l;for(var d=2;d<s;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},30777:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=t(87462),i=(t(67294),t(3905));const s={layout:"sw-tool",title:"\u5b8f\u4ee5\u53ca\u590d\u5236SOLIDWORKS\u7ec4\u4ef6\u548c\u590d\u5236\u56fe\u7eb8",image:"make-independent-drawing.svg",labels:["make independent","drawing","component"],group:"Assembly"},o=void 0,l={unversionedId:"codestack/solidworks-api/document/assembly/components/make-independent-drawing/index",id:"codestack/solidworks-api/document/assembly/components/make-independent-drawing/index",title:"\u5b8f\u4ee5\u53ca\u590d\u5236SOLIDWORKS\u7ec4\u4ef6\u548c\u590d\u5236\u56fe\u7eb8",description:"\u6b64VBA\u5b8f\u6a21\u4eff\u4e86SOLIDWORKS\u7684\u5236\u4f5c\u72ec\u7acb\u529f\u80fd\uff0c\u4f46\u8fd8\u4f1a\u989d\u5916\u590d\u5236\u5e76\u91cd\u547d\u540d\u4e0e\u590d\u5236\u7684\u96f6\u4ef6\u6216\u88c5\u914d\u7ec4\u4ef6\u76f8\u5173\u8054\u7684\u6587\u4ef6\u3002",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/document/assembly/components/make-independent-drawing/index.md",sourceDirName:"codestack/solidworks-api/document/assembly/components/make-independent-drawing",slug:"/codestack/solidworks-api/document/assembly/components/make-independent-drawing/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/assembly/components/make-independent-drawing/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/document/assembly/components/make-independent-drawing/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"\u5b8f\u4ee5\u53ca\u590d\u5236SOLIDWORKS\u7ec4\u4ef6\u548c\u590d\u5236\u56fe\u7eb8",image:"make-independent-drawing.svg",labels:["make independent","drawing","component"],group:"Assembly"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u4ece\u8f7b\u91cf\u7ea7\u7ec4\u4ef6\u83b7\u53d6\u6a21\u578b\u6587\u6863",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/assembly/components/lightweight-get-model-doc/"},next:{title:"\u4f7f\u7528SOLIDWORKS API\u5c06\u9009\u5b9a\u7684\u7ec4\u4ef6\u79fb\u52a8\u5230\u7279\u5f81\u6587\u4ef6\u5939",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/assembly/components/move-to-folder/"}},a={},d=[{value:"\u6ce8\u610f\u4e8b\u9879",id:"\u6ce8\u610f\u4e8b\u9879",level:2}],p={toc:d},c="wrapper";function m(n){let{components:e,...s}=n;return(0,i.kt)(c,(0,r.Z)({},p,s,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u6b64VBA\u5b8f\u6a21\u4eff\u4e86SOLIDWORKS\u7684",(0,i.kt)("strong",{parentName:"p"},"\u5236\u4f5c\u72ec\u7acb"),"\u529f\u80fd\uff0c\u4f46\u8fd8\u4f1a\u989d\u5916\u590d\u5236\u5e76\u91cd\u547d\u540d\u4e0e\u590d\u5236\u7684\u96f6\u4ef6\u6216\u88c5\u914d\u7ec4\u4ef6\u76f8\u5173\u8054\u7684\u6587\u4ef6\u3002"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"\u5236\u4f5c\u72ec\u7acb\u83dc\u5355\u547d\u4ee4",src:t(71455).Z,width:"452",height:"148"})),(0,i.kt)("p",null,"\u6b64\u5b8f\u53ef\u4ee5\u5904\u7406\u5355\u4e2a\u7ec4\u4ef6\u6216\u591a\u4e2a\u9009\u5b9a\u7684\u7ec4\u4ef6\uff0c\u4f46\u6240\u6709\u7ec4\u4ef6\u90fd\u5fc5\u987b\u5bf9\u5e94\u4e8e\u540c\u4e00\u6587\u4ef6\u3002"),(0,i.kt)("p",null,"\u5b8f\u5c06\u590d\u5236\u4e0e\u76ee\u6807\u6587\u4ef6\u540c\u540d\u7684\u5173\u8054\u56fe\u7eb8\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u65c1\u8fb9\u3002"),(0,i.kt)("h2",{id:"\u6ce8\u610f\u4e8b\u9879"},"\u6ce8\u610f\u4e8b\u9879"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5b8f\u53ea\u4f1a\u590d\u5236\u4e0e\u6e90\u6587\u4ef6\u540c\u540d\u4e14\u4f4d\u4e8e\u76f8\u540c\u6587\u4ef6\u5939\u4e2d\u7684\u56fe\u7eb8"),(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c\u76ee\u6807\u56fe\u7eb8\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5b8f\u5c06\u4e0d\u4f1a\u8986\u76d6\u5b83")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vb"},'Private Declare PtrSafe Function GetSaveFileName Lib "comdlg32.dll" Alias "GetSaveFileNameA" (pOpenfilename As OPENFILENAME) As Boolean\n\nPrivate Type OPENFILENAME\n  lStructSize As Long\n  hwndOwner As LongPtr\n  hInstance As LongPtr\n  lpstrFilter As String\n  lpstrCustomFilter As String\n  nMaxCustFilter As Long\n  nFilterIndex As Long\n  lpstrFile As String\n  nMaxFile As Long\n  lpstrFileTitle As String\n  nMaxFileTitle As Long\n  lpstrInitialDir As String\n  lpstrTitle As String\n  Flags As LongPtr\n  nFileOffset As Integer\n  nFileExtension As Integer\n  lpstrDefExt As String\n  lCustData As Long\n  lpfnHook As Long\n  lpTemplateName As String\nEnd Type\n\nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \ntry_:\n    On Error GoTo catch_\n    \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    If Not swModel Is Nothing Then\n    \n        If swModel.GetType() = swDocumentTypes_e.swDocASSEMBLY Then\n            Dim swAssy As SldWorks.AssemblyDoc\n            \n            Set swAssy = swModel\n            \n            Dim vComps As Variant\n            vComps = GetSelectedComponents(swModel.SelectionManager)\n            \n            If Not IsEmpty(vComps) Then\n            \n                Dim i As Integer\n                Dim path As String\n                path = vComps(0).GetPathName()\n                \n                For i = 1 To UBound(vComps)\n                    If LCase(vComps(i).GetPathName()) <> LCase(path) Then\n                        Err.Raise vbError, "", "\u4ec5\u652f\u6301\u76f8\u540c\u7684\u7ec4\u4ef6"\n                    End If\n                Next\n                \n                Dim ext As String\n                ext = Right(path, Len(path) - InStrRev(path, ".") + 1)\n                \n                Dim filter As String\n                Dim fileType As String\n                \n                If LCase(ext) = ".sldprt" Then\n                    fileType = "SOLIDWORKS\u96f6\u4ef6"\n                ElseIf LCase(ext) = ".sldasm" Then\n                    fileType = "SOLIDWORKS\u88c5\u914d"\n                Else\n                    Err.Raise vbError, "", "\u672a\u77e5\u9519\u8bef"\n                End If\n                \n                filter = fileType & " (*" & ext & ")|*" & ext & "|\u6240\u6709\u6587\u4ef6 (*.*)|*.*"\n                \n                Dim replaceFilePath As String\n                replaceFilePath = BrowseForFileSave("\u9009\u62e9\u66ff\u6362\u6587\u4ef6\u8def\u5f84", filter, path)\n                \n                If replaceFilePath <> "" Then\n                    If False = swAssy.MakeIndependent(replaceFilePath) Then\n                        Err.Raise vbError, "", "\u65e0\u6cd5\u4f7f\u7ec4\u4ef6\u72ec\u7acb"\n                    End If\n                    \n                    MakeDrawingIndependent path, replaceFilePath\n                    \n                End If\n            Else\n                Err.Raise vbError, "", "\u9009\u62e9\u7ec4\u4ef6"\n            End If\n            \n        Else\n            Err.Raise vbError, "", "\u4ec5\u652f\u6301\u88c5\u914d\u6587\u6863"\n        End If\n        \n    Else\n        Err.Raise vbError, "", "\u672a\u627e\u5230\u6a21\u578b"\n    End If\n    \n    GoTo finally_\n    \ncatch_:\n    MsgBox Err.Description, vbCritical\nfinally_:\n    \nEnd Sub\n\nSub MakeDrawingIndependent(srcFilePath As String, destFilePath As String)\n        \n    Dim srcDrwFilePath As String\n    srcDrwFilePath = Left(srcFilePath, InStrRev(srcFilePath, ".") - 1) & ".slddrw"\n    \n    Dim destDrwFilePath As String\n    destDrwFilePath = Left(destFilePath, InStrRev(destFilePath, ".") - 1) & ".slddrw"\n\n    Dim fso As Object\n    Set fso = CreateObject("Scripting.FileSystemObject")\n\n    If fso.FileExists(srcDrwFilePath) Then\n        \n        If fso.FileExists(destDrwFilePath) Then\n            Err.Raise vbError, "", "\u76ee\u6807\u56fe\u7eb8\u5df2\u5b58\u5728"\n        End If\n        \n        fso.CopyFile srcDrwFilePath, destDrwFilePath, False\n        \n        Dim destDrwFilePathAttr As VbFileAttribute\n        destDrwFilePathAttr = GetAttr(destDrwFilePath)\n        \n        If destDrwFilePathAttr And vbReadOnly Then\n            Debug.Print "\u4ece\u76ee\u6807\u56fe\u7eb8\u4e2d\u5220\u9664\u53ea\u8bfb\u6807\u5fd7: " & destDrwFilePath\n            SetAttr destDrwFilePath, destDrwFilePathAttr Xor vbReadOnly\n        End If\n        \n        If False = swApp.ReplaceReferencedDocument(destDrwFilePath, srcFilePath, destFilePath) Then\n            Err.Raise vbError, "", "\u65e0\u6cd5\u66ff\u6362\u5f15\u7528\u7684\u56fe\u7eb8\u6587\u6863"\n        End If\n                \n    End If\n    \nEnd Sub\n\nFunction GetSelectedComponents(selMgr As SldWorks.SelectionMgr) As Variant\n\n    Dim isInit As Boolean\n    isInit = False\n    \n    Dim swComps() As SldWorks.Component2\n\n    Dim i As Integer\n    \n    For i = 1 To selMgr.GetSelectedObjectCount2(-1)\n                \n        Dim swComp As SldWorks.Component2\n    \n        Set swComp = selMgr.GetSelectedObjectsComponent4(i, -1)\n        \n        If Not swComp Is Nothing Then\n            \n            If Not isInit Then\n                ReDim swComps(0)\n                Set swComps(0) = swComp\n                isInit = True\n            Else\n                If Not Contains(swComps, swComp) Then\n                    ReDim Preserve swComps(UBound(swComps) + 1)\n                    Set swComps(UBound(swComps)) = swComp\n                End If\n            End If\n                        \n        End If\n    \n    Next\n\n    If isInit Then\n        GetSelectedComponents = swComps\n    Else\n        GetSelectedComponents = Empty\n    End If\n\nEnd Function\n\nFunction BrowseForFileSave(title As String, filters As String, initFilePath As String) As String\n    \n    Dim ofn As OPENFILENAME\n    Const FILE_PATH_BUFFER_SIZE As Integer = 260\n    \n    Dim initFileName As String\n    initFileName = Right(initFilePath, Len(initFilePath) - InStrRev(initFilePath, "\\"))\n    \n    ofn.lpstrFilter = Replace(filters, "|", Chr(0)) & Chr(0)\n    ofn.lpstrTitle = title\n    ofn.nMaxFile = FILE_PATH_BUFFER_SIZE\n    ofn.nMaxFileTitle = FILE_PATH_BUFFER_SIZE\n    ofn.lpstrInitialDir = Left(initFilePath, InStrRev(initFilePath, "\\") - 1)\n    ofn.lpstrFile = initFileName & String(FILE_PATH_BUFFER_SIZE - Len(initFileName), Chr(0))\n    ofn.lStructSize = LenB(ofn)\n    \n    Dim res As Boolean\n    \n    res = GetSaveFileName(ofn)\n\n    If res Then\n        \n        Dim filePath As String\n        filePath = Left(ofn.lpstrFile, InStr(ofn.lpstrFile, vbNullChar) - 1)\n        \n        Dim vFilters As Variant\n        vFilters = Split(filters, "|")\n        Dim ext As String\n        ext = vFilters((ofn.nFilterIndex - 1) * 2 + 1)\n        ext = Right(ext, Len(ext) - InStrRev(ext, ".") + 1)\n        \n        If LCase(Right(filePath, Len(ext))) <> LCase(ext) Then\n            filePath = filePath & ext\n        End If\n        \n        BrowseForFileSave = filePath\n        \n    Else\n        BrowseForFileSave = ""\n    End If\n    \nEnd Function\n\nFunction Contains(vArr As Variant, item As Object) As Boolean\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(vArr)\n        If vArr(i) Is item Then\n            Contains = True\n            Exit Function\n        End If\n    Next\n    \n    Contains = False\n    \nEnd Function\n')))}m.isMDXComponent=!0},71455:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/make-independent-menu-bc77441dfeca8cc127b1d2c76332a649.png"}}]);