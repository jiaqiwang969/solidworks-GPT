"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[30926],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>w});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,w=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return t?o.createElement(w,s(s({ref:n},u),{},{components:t})):o.createElement(w,s({ref:n},u))}));function w(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[d]="string"==typeof e?e:r,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},421:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var o=t(87462),r=(t(67294),t(3905));const i={layout:"sw-tool",title:"\u901a\u8fc7SOLIDWORKS API\u9012\u589e\u6ce8\u91ca\u4e2d\u7684\u6570\u5b57\u503c\u7684\u5b8f\u7279\u5f81",caption:"\u9012\u589e\u6ce8\u91ca\u4e2d\u7684\u6570\u5b57\u503c"},s=void 0,a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/notes/increment-revision/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/notes/increment-revision/index",title:"\u901a\u8fc7SOLIDWORKS API\u9012\u589e\u6ce8\u91ca\u4e2d\u7684\u6570\u5b57\u503c\u7684\u5b8f\u7279\u5f81",description:"\u8be5\u5b8f\u4f7f\u7528SOLIDWORKS API\u9012\u589e\u6ce8\u91ca\u7684\u6570\u5b57\u503c\uff0c\u901a\u8fc7\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff08\u4f8b\u5982\u9012\u589e\u4fee\u8ba2\u7248\uff09\u6765\u5b9e\u73b0",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/notes/increment-revision/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/notes/increment-revision",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/notes/increment-revision/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/notes/increment-revision/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/notes/increment-revision/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"\u901a\u8fc7SOLIDWORKS API\u9012\u589e\u6ce8\u91ca\u4e2d\u7684\u6570\u5b57\u503c\u7684\u5b8f\u7279\u5f81",caption:"\u9012\u589e\u6ce8\u91ca\u4e2d\u7684\u6570\u5b57\u503c"},sidebar:"tutorialSidebar",previous:{title:"\u7528\u4e0d\u540c\u683c\u5f0f\u683c\u5f0f\u5316\u6ce8\u91ca\u6587\u672c\u7684\u793a\u4f8b",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/notes/format-note-text/"},next:{title:"\u4eceSOLIDWORKS\u56fe\u7eb8\u4e2d\u5c06\u6240\u6709\u6ce8\u91ca\u6253\u5370\u5230\u6587\u672c\u6587\u4ef6\u7684\u5b8f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/notes/print-to-file/"}},c={},l=[{value:"group: Drawing",id:"group-drawing",level:2}],u={toc:l},d="wrapper";function p(e){let{components:n,...i}=e;return(0,r.kt)(d,(0,o.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u8be5\u5b8f\u4f7f\u7528SOLIDWORKS API\u9012\u589e\u6ce8\u91ca\u7684\u6570\u5b57\u503c\uff0c\u901a\u8fc7\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff08\u4f8b\u5982\u9012\u589e\u4fee\u8ba2\u7248\uff09\u6765\u5b9e\u73b0\nimage: drawing-revision-incremented.png\nlabels: ","[note, revision, increment, regular expression, regex, tag]"),(0,r.kt)("h2",{id:"group-drawing"},"group: Drawing"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"\u5728\u6807\u9898\u5757\u4e2d\u9012\u589e\u7684\u4fee\u8ba2\u53f7",src:t(51988).Z,width:"928",height:"380"}),"{ width=300 }"),(0,r.kt)("p",null,"\u8be5\u5b8f\u4f7f\u7528SOLIDWORKS API\u9012\u589e\u6ce8\u91ca\u7684\u6570\u5b57\u503c\u3002\u5982\u679c\u9700\u8981\u9012\u589e\u6ce8\u91ca\u7684\u4fee\u8ba2\u7248\u800c\u65e0\u9700\u624b\u52a8\u9009\u62e9\u548c\u66f4\u6539\u6ce8\u91ca\uff0c\u5219\u8fd9\u5c06\u975e\u5e38\u6709\u7528\u3002\u8be5\u5b8f\u8fd8\u53ef\u4ee5\u5728\u6279\u5904\u7406\u8f6f\u4ef6\u4e2d\u4f7f\u7528\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"\u901a\u8fc7\u8fd0\u884c\u5b8f\u6309\u94ae\u4e2d\u7684\u5b8f\u6765\u9012\u589e\u6807\u9898\u5757\u4e2d\u7684\u4fee\u8ba2\u7248",src:t(52571).Z,width:"400",height:"279"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6570\u5b57\u503c\u901a\u8fc7\u6307\u5b9a\u7684",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Regular_expression"},"\u6b63\u5219\u8868\u8fbe\u5f0f"),"\u8fdb\u884c\u5339\u914d\u3002\u53ef\u4ee5\u4fee\u6539\u6b63\u5219\u8868\u8fbe\u5f0f\u4ee5\u5339\u914d\u7279\u5b9a\u7684\u6570\u5b57\u503c\u3002\u6ce8\u91ca\u53ef\u4ee5\u5305\u542b\u81ea\u7531\u6587\u672c\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u6570\u5b57\u90e8\u5206\u5c06\u6839\u636e\u6307\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u66f4\u65b0\uff09"),(0,r.kt)("li",{parentName:"ul"},"\u9700\u8981\u5728\u6ce8\u91ca\u4e2d\u6dfb\u52a0\u6587\u672c\u6807\u7b7e\u4ee5\u9012\u589e\u5176\u503c\u3002\u8bf7\u6309\u7167",(0,r.kt)("a",{parentName:"li",href:"/docs/codestack/solidworks-api/document/notes/tag-selected-note"},"\u4e3a\u9009\u5b9a\u7684\u6ce8\u91ca\u6dfb\u52a0\u6807\u7b7e"),"\u793a\u4f8b\u4e2d\u7684\u8bf4\u660e\u6dfb\u52a0\u6807\u7b7e\u5230\u6ce8\u91ca\u4e2d\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6570\u5b57\u503c\u9012\u589e1\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539",(0,r.kt)("em",{parentName:"li"},"IncrementNoteValue"),"\u51fd\u6570\u7684",(0,r.kt)("em",{parentName:"li"},"increment"),"\u53c2\u6570\u7684\u503c\u6765\u66f4\u6539\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\nDim swModel As SldWorks.ModelDoc2\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Set swModel = swApp.ActiveDoc\n    \n    IncrementNoteValue "_CodeStackNote_", "\\d+", 1\n    \nEnd Sub\n\nSub IncrementNoteValue(noteTag As String, pattern As String, increment As Double)\n    \n    Dim swNote As SldWorks.Note\n    Set swNote = FindNodeByTag(swModel, noteTag)\n    \n    If Not swNote Is Nothing Then\n        Dim newText As String\n        newText = IncrementNumericMatches(swNote.GetText(), pattern, increment)\n        swNote.SetText newText\n    End If\n    \nEnd Sub\n\nFunction IncrementNumericMatches(text As String, pattern As String, increment As Double) As String\n    \n    Dim resultText As String\n    resultText = text\n    \n    Dim regEx As Object\n    Set regEx = CreateObject("VBScript.RegExp")\n    \n    regEx.Global = True\n    regEx.IgnoreCase = True\n    regEx.pattern = pattern\n    \n    Dim regExMatches As Object\n    Set regExMatches = regEx.Execute(text)\n    \n    If regExMatches.Count > 0 Then\n        \n        Dim i As Integer\n        \n        Dim offset As Integer\n        \n        For i = 0 To regExMatches.Count - 1\n            \n            Dim regExMatch As Object\n            Set regExMatch = regExMatches(i)\n            \n            Dim newValue As Double\n            newValue = CDbl(regExMatch.Value) + increment\n            \n            resultText = Left(resultText, regExMatch.FirstIndex + offset) & newValue & Right(resultText, Len(resultText) - regExMatch.FirstIndex - regExMatch.Length - offset)\n            \n            offset = offset + Len(CStr(newValue)) - regExMatch.Length\n        \n        Next\n        \n    End If\n    \n    IncrementNumericMatches = resultText\n\nEnd Function\n\nFunction FindNodeByTag(model As SldWorks.ModelDoc2, tag As String) As SldWorks.Note\n    \n    If tag <> "" Then\n        \n        Dim vAnnots As Variant\n        vAnnots = model.Extension.GetAnnotations\n        \n        Dim swNote As SldWorks.Note\n        Dim i As Integer\n        \n        If Not IsEmpty(vAnnots) Then\n            \n            For i = 0 To UBound(vAnnots)\n                \n                Dim swAnn As SldWorks.Annotation\n                Set swAnn = vAnnots(i)\n                \n                If swAnn.GetType() = swAnnotationType_e.swNote Then\n                    Set swNote = swAnn.GetSpecificAnnotation\n                    If swNote.TagName = tag Then\n                        Set FindNodeByTag = swNote\n                        Exit Function\n                    End If\n                End If\n                \n            Next\n        End If\n        \n        If model.GetType() = swDocumentTypes_e.swDocDRAWING Then\n        \n            Dim swDraw As SldWorks.DrawingDoc\n            Set swDraw = model\n        \n            Dim vSheets As Variant\n            vSheets = swDraw.GetViews()\n            \n            For i = 0 To UBound(vSheets)\n                \n                Dim vViews As Variant\n                vViews = vSheets(i)\n                \n                Dim j As Integer\n                \n                For j = 0 To UBound(vViews)\n                \n                    Dim swView As SldWorks.View\n                    Set swView = vViews(j)\n                \n                    Dim vNotes As Variant\n                    \n                    vNotes = swView.GetNotes()\n                    \n                    Dim k As Integer\n                    \n                    For k = 0 To UBound(vNotes)\n                        \n                        Set swNote = vNotes(k)\n                        \n                        If swNote.TagName = tag Then\n                            Set FindNodeByTag = swNote\n                            Exit Function\n                        End If\n                    \n                    Next\n                \n                Next\n                \n            Next\n            \n        End If\n        \n    End If\n    \nEnd Function\n')))}p.isMDXComponent=!0},51988:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/drawing-revision-incremented-b735e4e2073e03755c44f2aba429c3f5.png"},52571:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/increment-revision-macro-65d58d3196a9f9427a5486cdf7ae4bc5.gif"}}]);