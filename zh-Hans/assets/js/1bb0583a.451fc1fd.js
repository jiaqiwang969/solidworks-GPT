"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[7252],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),f=r,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||s;return t?o.createElement(m,a(a({ref:n},u),{},{components:t})):o.createElement(m,a({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=f;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:r,a[1]=i;for(var c=2;c<s;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},83072:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=t(87462),r=(t(67294),t(3905));const s={layout:"sw-tool",title:"SOLIDWORKS VBA\u5b8f\u590d\u5236\u9884\u9009\u9762",image:"surface-offset-equal.svg",labels:["\u66f2\u9762","\u51e0\u4f55","\u5b8f","\u9762","solidworks api","vba"],group:"\u51e0\u4f55"},a=void 0,i={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/surface-offset-equal/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/surface-offset-equal/index",title:"SOLIDWORKS VBA\u5b8f\u590d\u5236\u9884\u9009\u9762",description:"\u4f5c\u8005\uff1aEddy Alleman",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/surface-offset-equal/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/surface-offset-equal",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/surface-offset-equal/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/surface-offset-equal/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/surface-offset-equal/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"SOLIDWORKS VBA\u5b8f\u590d\u5236\u9884\u9009\u9762",image:"surface-offset-equal.svg",labels:["\u66f2\u9762","\u51e0\u4f55","\u5b8f","\u9762","solidworks api","vba"],group:"\u51e0\u4f55"},sidebar:"tutorialSidebar",previous:{title:"SOLIDWORKS macro finds intersection points between surface and curve",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/surface-curve-intersection/"},next:{title:"\u4f7f\u7528SOLIDWORKS API\u6682\u505c\u56fe\u5f62\u66f4\u65b0\u7684\u5b8f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/suspend-graphics-update/"}},l={},c=[],u={toc:c},p="wrapper";function d(e){let{components:n,...s}=e;return(0,r.kt)(p,(0,o.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u4f5c\u8005\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://www.linkedin.com/in/eddyalleman/"},"Eddy Alleman")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"\u8ddd\u79bb\u4e3a0\u7684\u504f\u79fb\u66f2\u9762",src:t(42436).Z,width:"525",height:"300"}),"{ width=525 }"),(0,r.kt)("p",null,"\u8fd9\u4e2aVBA\u5b8f\u5728\u96f6\u4ef6\u6587\u4ef6\u4e2d\u4ece\u9009\u5b9a\u7684\u9762\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u66f2\u9762\u7279\u5f81\u3002\u4ece\u800c\u590d\u5236\u9009\u5b9a\u7684\u66f2\u9762\u5e76\u7ed9\u5b83\u4e00\u4e2a\u9884\u5b9a\u4e49\u7684\u989c\u8272\u3002\n\u5982\u679c\u60a8\u60f3\u91cd\u7528\u73b0\u6709\u7684\u66f2\u9762\u5e76\u4e14\u4e0d\u60f3\u5408\u5e76\u73b0\u6709\u7684\u66f2\u9762\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f88\u6709\u7528\u3002"),(0,r.kt)("p",null,"\u64cd\u4f5c\u6b65\u9aa4"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5fc5\u987b\u6709\u4e00\u4e2a\u96f6\u4ef6\u6587\u4ef6\u4f5c\u4e3a\u6d3b\u52a8\u6587\u6863\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u60a8\u5fc5\u987b\u81f3\u5c11\u9009\u62e9\u4e00\u4e2a\u9762\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u9009\u62e9\u5176\u4ed6\u7c7b\u578b\u7684\u5b9e\u4f53\uff0c\u5b83\u4eec\u5c06\u88ab\u8fc7\u6ee4\u6389\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u8fd0\u884c\u5b8f\u3002\u7ed3\u679c\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u8ddd\u79bb\u4e3a0\u7684\u66f2\u9762\u504f\u79fb\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u7279\u5f81\u5c06\u4ee5\u9ec4\u8272\u663e\u793a\uff0c\u4f46\u60a8\u53ef\u4ee5\u66f4\u6539RGB\u989c\u8272\u4ee5\u8bbe\u7f6e\u5176\u4ed6\u989c\u8272\u3002")),(0,r.kt)("p",null,"\u4f5c\u8005\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://www.linkedin.com/in/eddyalleman/"},"Eddy Alleman")," (",(0,r.kt)("a",{parentName:"p",href:"https://www.edalsolutions.be/index.php/en/"},"EDAL Solutions"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},"Option Explicit\n\n' INPUT \u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u66f4\u6539\u4e3a\u53e6\u4e00\u79cdRGB\u989c\u8272\uff08\u6b64\u793a\u4f8b\u4f7f\u7528\u9ec4\u8272\uff09\nConst RED = 255\nConst GREEN = 255\nConst BLUE = 0\n\nDim swxApp As SldWorks.SldWorks\nDim swModel As SldWorks.ModelDoc2\nDim selMgr As SldWorks.SelectionMgr\n\nSub main()\n\ntry_:\n    On Error GoTo catch_\n\n    Set swxApp = Application.SldWorks\n    \n    Set swModel = swxApp.ActiveDoc\n\n    '\u68c0\u67e5\u6d3b\u52a8\u6587\u6863\u662f\u5426\u4e3a\u96f6\u4ef6\u6587\u4ef6\n    Select Case True\n    \n           Case swModel Is Nothing, swModel.GetType <> swDocPART\n              Call swxApp.SendMsgToUser2(\"\u8bf7\u6253\u5f00\u4e00\u4e2a\u96f6\u4ef6\u6587\u4ef6\", swMbInformation, swMbOk)\n              \n           Case Else\n               Call ProcessSelectedFaces\n               \n    End Select\n\n    GoTo finally_:\n    \ncatch_:\n\n    MsgBox Err.Description\n    \nfinally_:\n    \nEnd Sub\n\nPrivate Function ProcessSelectedFaces() As Boolean\n\n    EnableUpdates False\n                  \n        Set selMgr = swModel.SelectionManager\n        \n        '\u83b7\u53d6\u9009\u62e9\u6570\u91cf\n        Dim nSelections As Integer\n        nSelections = selMgr.GetSelectedObjectCount2(-1)\n               \n        '\u53ea\u6709\u5728\u6709\u9009\u62e9\u5185\u5bb9\u65f6\u624d\u8fdb\u884c\u5904\u7406\n        If nSelections > 0 Then\n         \n              Call RemoveNonFacesFromSelection\n\n              '\u83b7\u53d6\u9009\u5b9a\u9762\u7684\u6570\u91cf\n              Dim nFaces As Integer\n              nFaces = selMgr.GetSelectedObjectCount2(-1)\n        \n              If nFaces > 0 Then\n              \n                  '\u504f\u79fb\u9009\u5b9a\u7684\u9762\n                  swModel.InsertOffsetSurface 0#, False\n                  \n                  '\u7ed9\u65b0\u521b\u5efa\u7684\u504f\u79fb\u7279\u5f81\u547d\u540d\n                  Dim featOffset As Feature\n                  Set featOffset = swModel.Extension.GetLastFeatureAdded\n                    \n                  featOffset.Name = featOffset.Name & \" Offsets \" & nFaces & \" Faces\"\n                  \n                  '\u7ed9\u504f\u79fb\u7279\u5f81\u8bbe\u7f6e\u989c\u8272\n                  Call SetColor(featOffset)\n                     \n                  '\u53d6\u6d88\u9009\u62e9\u9762\u4ee5\u67e5\u770b\u65b0\u989c\u8272\n                  swModel.ClearSelection2 True\n\n              End If 'nFaces > 0\n      \n         End If 'nSelections > 0\n        \n    EnableUpdates True\n    \nEnd Function\n\n\nPrivate Function EnableUpdates(update As Boolean)\n    With swModel\n        .FeatureManager.EnableFeatureTree = update\n        .ActiveView.EnableGraphicsUpdate = update\n    End With\nEnd Function\n\n'\u4ece\u9009\u62e9\u7ba1\u7406\u5668\u4e2d\u5220\u9664\u975e\u9762\u5b9e\u4f53\nPrivate Function RemoveNonFacesFromSelection()\n\n        '\u83b7\u53d6\u9009\u62e9\u6570\u91cf\n        Dim nSelections As Integer\n        nSelections = selMgr.GetSelectedObjectCount2(-1)\n                \n        Dim i As Integer\n        For i = 0 To nSelections\n           \n           Dim ObjectType As Long\n           ObjectType = selMgr.GetSelectedObjectType3(i, -1)\n\n           If ObjectType <> swSelectType_e.swSelFACES Then\n               Dim res As Boolean\n               res = selMgr.DeSelect2(i, -1)\n           End If\n                  \n        Next\n              \nEnd Function\n\n'\u8bbe\u7f6e\u7279\u5f81\u7684\u8f93\u5165\u989c\u8272\nPrivate Function SetColor(ByRef Feat As Feature) As Boolean\n\n      '\u4ece\u6a21\u578b\u83b7\u53d6\u6750\u6599\u5c5e\u6027\n      Dim MatProp As Variant\n      MatProp = swModel.MaterialPropertyValues\n                  \n      '\u8bbe\u7f6e\u989c\u8272\uff0c\u4f8b\u5982RGB(225, 255 , 0)\uff0c\u4f46\u6211\u4eec\u9700\u8981\u5c06\u5176\u8303\u56f4\u8bbe\u7f6e\u4e3a0\u52301\n      MatProp(0) = RED / 255\n      MatProp(1) = GREEN / 255\n      MatProp(2) = BLUE / 255\n            \n      SetColor = Feat.SetMaterialPropertyValues(MatProp)\n                  \nEnd Function\n")))}d.isMDXComponent=!0},42436:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/surface-offset-workflow-76008da18dd5469458e045688fae9be6.png"}}]);