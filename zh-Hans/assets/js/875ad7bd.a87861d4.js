"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[24204],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>m});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var p=r.createContext({}),c=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},d=function(n){var e=c(n.components);return r.createElement(p.Provider,{value:e},n.children)},s="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,l=n.originalType,p=n.parentName,d=a(n,["components","mdxType","originalType","parentName"]),s=c(t),g=o,m=s["".concat(p,".").concat(g)]||s[g]||u[g]||l;return t?r.createElement(m,i(i({ref:e},d),{},{components:t})):r.createElement(m,i({ref:e},d))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var l=t.length,i=new Array(l);i[0]=g;var a={};for(var p in e)hasOwnProperty.call(e,p)&&(a[p]=e[p]);a.originalType=n,a[s]="string"==typeof n?n:o,i[1]=a;for(var c=2;c<l;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},98194:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const l={title:"\u4f7f\u7528OpenGL\u548cSOLIDWORKS API\u6e32\u67d3\u5177\u6709\u900f\u660e\u5ea6\u7684\u76d2\u5b50\u7f51\u683c",caption:"\u4f7f\u7528\u900f\u660e\u5ea6\u6e32\u67d3\u76d2\u5b50\u7f51\u683c"},i=void 0,a={unversionedId:"codestack/solidworks-api/adornment/opengl/box-grid-transparency/index",id:"codestack/solidworks-api/adornment/opengl/box-grid-transparency/index",title:"\u4f7f\u7528OpenGL\u548cSOLIDWORKS API\u6e32\u67d3\u5177\u6709\u900f\u660e\u5ea6\u7684\u76d2\u5b50\u7f51\u683c",description:"\u4f7f\u7528OpenGL\u548cSOLIDWORKS API\u6e32\u67d3\u5177\u6709\u900f\u660e\u5ea6\u7684\u76d2\u5b50\u7f51\u683c",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/adornment/opengl/box-grid-transparency/index.md",sourceDirName:"codestack/solidworks-api/adornment/opengl/box-grid-transparency",slug:"/codestack/solidworks-api/adornment/opengl/box-grid-transparency/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/adornment/opengl/box-grid-transparency/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/adornment/opengl/box-grid-transparency/index.md",tags:[],version:"current",frontMatter:{title:"\u4f7f\u7528OpenGL\u548cSOLIDWORKS API\u6e32\u67d3\u5177\u6709\u900f\u660e\u5ea6\u7684\u76d2\u5b50\u7f51\u683c",caption:"\u4f7f\u7528\u900f\u660e\u5ea6\u6e32\u67d3\u76d2\u5b50\u7f51\u683c"},sidebar:"tutorialSidebar",previous:{title:"\u5728SOLIDWORKS API\u4e2d\u4f7f\u7528OpenGL\u6e32\u67d3\u81ea\u5b9a\u4e493D\u56fe\u5f62",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/adornment/opengl/"},next:{title:"\u4f7f\u7528OpenGL\u6e32\u67d3\u56db\u9762\u4f53\u5e76\u4f7f\u7528SOLIDWORKS API\u5904\u7406\u89c6\u56fe\u663e\u793a\u6a21\u5f0f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/adornment/opengl/display-mode-tetrahedron/"}},p={},c=[{value:"labels: opengl,render,transparency",id:"labels-openglrendertransparency",level:2},{value:"AddIn.cs",id:"addincs",level:2},{value:"OpenGlDocumentHandler.cs",id:"opengldocumenthandlercs",level:2},{value:"OpenGL.cs",id:"openglcs",level:2}],d={toc:c},s="wrapper";function u(n){let{components:e,...l}=n;return(0,o.kt)(s,(0,r.Z)({},d,l,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u4f7f\u7528OpenGL\u548cSOLIDWORKS API\u6e32\u67d3\u5177\u6709\u900f\u660e\u5ea6\u7684\u76d2\u5b50\u7f51\u683c\nimage: opengl-cubes.png"),(0,o.kt)("h2",{id:"labels-openglrendertransparency"},"labels: ","[opengl,render,transparency]"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"\u4f7f\u7528OpenGL\u6e32\u67d3\u7684\u900f\u660e\u76d2\u5b50",src:t(97750).Z,width:"494",height:"520"}),"{ width=250 }"),(0,o.kt)("p",null,"\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528OpenGL\u548cSOLIDWORKS API\u5728\u9884\u5b9a\u4e49\u7f51\u683c\u4e2d\u6e32\u67d3\u5177\u6709\u900f\u660e\u5ea6\u7684\u76d2\u5b50\u3002"),(0,o.kt)("p",null,"\u76d2\u5b50\u4f1a\u81ea\u52a8\u6e32\u67d3\u5728\u6240\u6709\u6253\u5f00\u76843D\u6a21\u578b\uff08\u96f6\u4ef6\u6216\u88c5\u914d\uff09\u4e0a\u3002"),(0,o.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539\u63d2\u4ef6\u4e2d\u58f0\u660e\u7684\u5e38\u91cf\u6765\u914d\u7f6e\u53c2\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"private const int INST_COUNT = 27;\nprivate const int ROWS_COUNT = 3;\nprivate const int COLUMNS_COUNT = 3;\nprivate const double DIST = 0.05;\nprivate const double WIDTH = 0.1;\nprivate const double HEIGHT = 0.1;\nprivate const double LENGTH = 0.1;\nprivate readonly Color COLOR = Color.FromArgb(200, Color.Blue);\n")),(0,o.kt)("p",null,"\u6ce8\u610f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u6e32\u67d3OpenGL\u5bf9\u8c61\u7684\u7b80\u5355\u65b9\u6cd5\uff0c\u4f46\u5b83\u4e0d\u80fd\u63d0\u4f9b\u6700\u4f73\u6027\u80fd\u4f18\u52bf\u3002\u8bf7\u53c2\u8003",(0,o.kt)("a",{parentName:"p",href:"/docs/codestack/solidworks-api/adornment/opengl/vbo-xaml-importer/"},"\u5bfc\u5165XAML\u6587\u4ef6\u5e76\u4f7f\u7528VBO\u8fdb\u884c\u6e32\u67d3"),"\uff0c\u4e86\u89e3\u4f7f\u7528OpenGL\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61\uff08VBO\uff09\u8fdb\u884c\u9ad8\u6027\u80fd\u56fe\u5f62\u6e32\u67d3\u7684\u4ee3\u7801\u793a\u4f8b\u3002"),(0,o.kt)("p",null,"\u6e90\u4ee3\u7801\u53ef\u4ee5\u4ece",(0,o.kt)("a",{parentName:"p",href:"https://github.com/codestackdev/solidworks-api-examples/tree/master/swex/add-in/opengl/OpenGlBoxGrid"},"GitHub"),"\u4e0b\u8f7d\u3002"),(0,o.kt)("h2",{id:"addincs"},"AddIn.cs"),(0,o.kt)("p",null,"\u8fd9\u662f\u63d2\u4ef6\u7684\u5165\u53e3\u70b9\u3002\u4f7f\u7528",(0,o.kt)("a",{parentName:"p",href:"/docs/codestack/labs/solidworks/swex/add-in/"},"SwEx.AddIn"),"\u6846\u67b6\u901a\u8fc7\u63d0\u4f9b\u5305\u88c5\u7c7b\u6765\u7ba1\u7406\u6587\u6863\u7684\u751f\u547d\u5468\u671f\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'using CodeStack.SwEx.AddIn;\nusing CodeStack.SwEx.AddIn.Attributes;\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace CodeStack.OpenGlBoxGrid\n{\n    [ComVisible(true), Guid("FAB0F03B-785E-4113-B120-E18E7C73B9EB")]\n    [AutoRegister("OpenGL Box Grid")]\n    public class AddIn : SwAddInEx\n    {\n        public override bool OnConnect()\n        {\n            CreateDocumentsHandler<OpenGlDocumentHandler>();\n            return true;\n        }\n    }\n}\n\n')),(0,o.kt)("h2",{id:"opengldocumenthandlercs"},"OpenGlDocumentHandler.cs"),(0,o.kt)("p",null,"\u8fd9\u662f\u6bcf\u4e2a\u6a21\u578b\u6587\u6863\u7684\u5904\u7406\u7a0b\u5e8f\u7c7b\uff0c\u5b83\u8ba2\u9605SOLIDWORKS\u63d0\u4f9b\u7684OpenGL\u7f13\u51b2\u533a\u4ea4\u6362\u901a\u77e5\uff0c\u5e76\u6839\u636e\u8f93\u5165\u53c2\u6570\u8ba1\u7b97\u76d2\u5b50\u7684\u5750\u6807\u5e76\u5728\u6a21\u578b\u7684\u56fe\u5f62\u89c6\u56fe\u4e2d\u8fdb\u884c\u6e32\u67d3\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using CodeStack.SwEx.AddIn.Base;\nusing SolidWorks.Interop.sldworks;\nusing System.Drawing;\nusing static CodeStack.OpenGlBoxGrid.OpenGL;\n\nnamespace CodeStack.OpenGlBoxGrid\n{\n    public class OpenGlDocumentHandler : IDocumentHandler\n    {\n        private const int INST_COUNT = 27;\n        private const int ROWS_COUNT = 3;\n        private const int COLUMNS_COUNT = 3;\n        private const double DIST = 0.05;\n        private const double WIDTH = 0.1;\n        private const double HEIGHT = 0.1;\n        private const double LENGTH = 0.1;\n        private readonly Color COLOR = Color.FromArgb(200, Color.Blue);\n\n        private ModelView m_View;\n\n        public void Init(ISldWorks app, IModelDoc2 model)\n        {\n            m_View = model.IActiveView;\n\n            if (m_View != null)\n            {\n                m_View.BufferSwapNotify += OnBufferSwapNotify;\n            }\n        }\n\n        private int OnBufferSwapNotify()\n        {\n            int level = 0;\n            int row = 0;\n            int column = 0;\n\n            for (int i = 0; i < INST_COUNT; i++)\n            {\n                if (row == ROWS_COUNT)\n                {\n                    row = 0;\n                    column++;\n\n                    if (column == COLUMNS_COUNT)\n                    {\n                        column = 0;\n                        level++;\n                    }\n                }\n\n                RenderBox(new double[] \n                {\n                    row * (WIDTH + DIST),\n                    column * (LENGTH + DIST),\n                    level * (HEIGHT + DIST)\n                },\n                WIDTH, LENGTH, HEIGHT,\n                COLOR);\n\n                row++;\n            }\n            \n            return 0;\n        }\n\n        private void RenderBox(double[] pt, double width, double length, double height, Color color)\n        {\n            var vertices = new double[][]\n            {\n                new double[] { pt[0] - width / 2, pt[1] + length / 2, pt[2] + height / 2 },\n                new double[] { pt[0] - width / 2, pt[1] - length / 2, pt[2] + height / 2 },\n                new double[] { pt[0] + width / 2, pt[1] + length / 2, pt[2] + height / 2 },\n                new double[] { pt[0] + width / 2, pt[1] - length / 2, pt[2] + height / 2 },\n                new double[] { pt[0] + width / 2, pt[1] + length / 2, pt[2] - height / 2 },\n                new double[] { pt[0] + width / 2, pt[1] - length / 2, pt[2] - height / 2 },\n                new double[] { pt[0] - width / 2, pt[1] + length / 2, pt[2] - height / 2 },\n                new double[] { pt[0] - width / 2, pt[1] - length / 2, pt[2] - height / 2 },\n                new double[] { pt[0] - width / 2, pt[1] + length / 2, pt[2] + height / 2 },\n                new double[] { pt[0] - width / 2, pt[1] - length / 2, pt[2] + height / 2 }\n            };\n            \n            RenderTriangleStrip(vertices, color);\n\n            RenderTriangleStrip(new double[][]\n            {\n                vertices[1], vertices[7], vertices[3], vertices[5]\n            }, color);\n\n            RenderTriangleStrip(new double[][]\n            {\n                vertices[0], vertices[2], vertices[6], vertices[4]\n            }, color);\n        }\n        \n        private void RenderTriangleStrip(double[][] vertices, Color color)\n        {\n            glDisable(GL_LIGHTING);\n            glEnable(GL_BLEND);\n\n            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n\n            glBegin(GL_TRIANGLE_STRIP);\n\n            glColor4f(color.R / 255f, color.G / 255f, color.B / 255f, color.A / 255f);\n\n            foreach (var vertex in vertices)\n            {\n                glVertex3d(vertex[0], vertex[1], vertex[2]);\n            }\n\n            glEnd();\n        }\n\n        public void Dispose()\n        {\n            if (m_View != null)\n            {\n                m_View.BufferSwapNotify -= OnBufferSwapNotify;\n            }\n        }\n    }\n}\n\n")),(0,o.kt)("h2",{id:"openglcs"},"OpenGL.cs"),(0,o.kt)("p",null,"OpenGL\u51fd\u6570\u7684\u5bfc\u5165\u5217\u8868\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'using System.Runtime.InteropServices;\n\nnamespace CodeStack.OpenGlBoxGrid\n{\n    public static class OpenGL\n    {\n        [DllImport("opengl32")]\n        public static extern void glBegin(uint mode);\n\n        [DllImport("opengl32")]\n        public static extern void glEnd();\n\n        [DllImport("opengl32")]\n        public static extern void glVertex3d(double x, double y, double z);\n\n        [DllImport("opengl32.dll")]\n        public static extern void glDisable(uint cap);\n\n        [DllImport("opengl32.dll")]\n        public static extern void glColor4f(float R, float G, float B, float A);\n\n        [DllImport("opengl32.dll")]\n        public static extern void glEnable(uint cap);\n\n        [DllImport("opengl32.dll")]\n        public static extern void glBlendFunc(uint sfactor, uint dfactor);\n\n        public const int GL_TRIANGLE_STRIP = 0x0005;\n        public const uint GL_LIGHTING = 0x0B50;\n        public const int GL_BLEND = 0x0BE2;\n        public const int GL_SRC_ALPHA = 0x0302;\n        public const int GL_ONE_MINUS_SRC_ALPHA = 0x0303;\n    }\n}\n\n')))}u.isMDXComponent=!0},97750:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/opengl-cubes-9b2d3c4b7efcdbe2550d5c744e53b90a.png"}}]);