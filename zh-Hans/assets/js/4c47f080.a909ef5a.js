"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[18233],{3905:(n,e,o)=>{o.d(e,{Zo:()=>l,kt:()=>f});var t=o(67294);function s(n,e,o){return e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o,n}function r(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.push.apply(o,t)}return o}function i(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?r(Object(o),!0).forEach((function(e){s(n,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))}))}return n}function a(n,e){if(null==n)return{};var o,t,s=function(n,e){if(null==n)return{};var o,t,s={},r=Object.keys(n);for(t=0;t<r.length;t++)o=r[t],e.indexOf(o)>=0||(s[o]=n[o]);return s}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(t=0;t<r.length;t++)o=r[t],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(n,o)&&(s[o]=n[o])}return s}var c=t.createContext({}),m=function(n){var e=t.useContext(c),o=e;return n&&(o="function"==typeof n?n(e):i(i({},e),n)),o},l=function(n){var e=m(n.components);return t.createElement(c.Provider,{value:e},n.children)},p="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},d=t.forwardRef((function(n,e){var o=n.components,s=n.mdxType,r=n.originalType,c=n.parentName,l=a(n,["components","mdxType","originalType","parentName"]),p=m(o),d=s,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||r;return o?t.createElement(f,i(i({ref:e},l),{},{components:o})):t.createElement(f,i({ref:e},l))}));function f(n,e){var o=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var r=o.length,i=new Array(r);i[0]=d;var a={};for(var c in e)hasOwnProperty.call(e,c)&&(a[c]=e[c]);a.originalType=n,a[p]="string"==typeof n?n:s,i[1]=a;for(var m=2;m<r;m++)i[m]=o[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}d.displayName="MDXCreateElement"},81122:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>m});var t=o(87462),s=(o(67294),o(3905));const r={title:"\u4f7f\u7528SOLIDWORKS API\u4fee\u6539\u7ec4\u4ef6\u7684\u914d\u7f6e\u53c2\u6570",caption:"\u4fee\u6539\u591a\u4e2a\u7ec4\u4ef6\u7684\u914d\u7f6e\u53c2\u6570"},i=void 0,a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/assembly/components/batch-modify-parameters/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/assembly/components/batch-modify-parameters/index",title:"\u4f7f\u7528SOLIDWORKS API\u4fee\u6539\u7ec4\u4ef6\u7684\u914d\u7f6e\u53c2\u6570",description:"\u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u4fee\u6539\u6307\u5b9a\u914d\u7f6e\uff08\u4f8b\u5982\u6291\u5236\u72b6\u6001\uff09\u4e2d\u591a\u4e2a\u7ec4\u4ef6\u7684\u53c2\u6570\u3002\u4e0d\u9700\u8981\u6fc0\u6d3b\u914d\u7f6e\u6216\u9009\u62e9\u4efb\u4f55\u7ec4\u4ef6\u5373\u53ef\u4f7f\u7528\u5b8f\u3002",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/assembly/components/batch-modify-parameters/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/assembly/components/batch-modify-parameters",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/assembly/components/batch-modify-parameters/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/assembly/components/batch-modify-parameters/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/assembly/components/batch-modify-parameters/index.md",tags:[],version:"current",frontMatter:{title:"\u4f7f\u7528SOLIDWORKS API\u4fee\u6539\u7ec4\u4ef6\u7684\u914d\u7f6e\u53c2\u6570",caption:"\u4fee\u6539\u591a\u4e2a\u7ec4\u4ef6\u7684\u914d\u7f6e\u53c2\u6570"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u4eceCSV\u6587\u4ef6\u52a0\u8f7d\u7ec4\u4ef6\u6f14\u793a\u53d8\u6362",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/assembly/components/apply-presentation-transform-from-csv/"},next:{title:"\u5c06SOLIDWORKS\u7ec4\u4ef6\u7684\u8def\u5f84\u590d\u5236\u5230\u526a\u8d34\u677f\u7684\u5b8f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/assembly/components/copy-path/"}},c={},m=[{value:"labels: \u53c2\u6570, \u8bbe\u8ba1\u8868, \u7ec4\u4ef6, \u914d\u7f6e",id:"labels-\u53c2\u6570-\u8bbe\u8ba1\u8868-\u7ec4\u4ef6-\u914d\u7f6e",level:2}],l={toc:m},p="wrapper";function u(n){let{components:e,...r}=n;return(0,s.kt)(p,(0,t.Z)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"\u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u4fee\u6539\u6307\u5b9a\u914d\u7f6e\uff08\u4f8b\u5982\u6291\u5236\u72b6\u6001\uff09\u4e2d\u591a\u4e2a\u7ec4\u4ef6\u7684\u53c2\u6570\u3002\u4e0d\u9700\u8981\u6fc0\u6d3b\u914d\u7f6e\u6216\u9009\u62e9\u4efb\u4f55\u7ec4\u4ef6\u5373\u53ef\u4f7f\u7528\u5b8f\u3002\nimage: modify-configurations.png"),(0,s.kt)("h2",{id:"labels-\u53c2\u6570-\u8bbe\u8ba1\u8868-\u7ec4\u4ef6-\u914d\u7f6e"},"labels: ","[\u53c2\u6570, \u8bbe\u8ba1\u8868, \u7ec4\u4ef6, \u914d\u7f6e]"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"\u5728\u914d\u7f6e\u4e2d\u4fee\u6539\u7ec4\u4ef6\u53c2\u6570",src:o(11543).Z,width:"673",height:"285"}),"{ width=350 }"),(0,s.kt)("p",null,"\u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u53c2\u6570\uff08\u7c7b\u4f3c\u4e8e\u8bbe\u8ba1\u8868\u53c2\u6570\uff09\u6765\u6291\u5236\u9664\u6d3b\u52a8\u914d\u7f6e\u4e4b\u5916\u7684\u6240\u6709\u914d\u7f6e\u4e2d\u7684\u6240\u6709\u7ec4\u4ef6\uff0c\u4f7f\u7528SOLIDWORKS API\u3002\u4e0d\u9700\u8981\u6fc0\u6d3b\u914d\u7f6e\u6216\u9009\u62e9\u4efb\u4f55\u7ec4\u4ef6\u5373\u53ef\u4f7f\u7528\u5b8f\u3002"),(0,s.kt)("p",null,"\u53ef\u4ee5\u6279\u91cf\u4fee\u6539\u591a\u4e2a\u7ec4\u4ef6\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swAssy As SldWorks.AssemblyDoc\n    \n    Set swAssy = swApp.ActiveDoc\n    \n    If Not swAssy Is Nothing Then\n        \n        Dim vConfNames As Variant\n        vConfNames = GetOtherConfigurations(swAssy)\n        \n        If Not IsEmpty(vConfNames) Then\n        \n            Dim vComps As Variant\n            vComps = swAssy.GetComponents(True)\n            \n            Dim i As Integer\n            \n            Dim paramNames() As String\n            Dim paramValues() As String\n            \n            ReDim paramNames(UBound(vComps))\n            ReDim paramValues(UBound(vComps))\n            \n            For i = 0 To UBound(vComps)\n                    \n                Dim swComp As SldWorks.Component2\n                Set swComp = vComps(i)\n                \n                Dim instId As Integer\n                Dim compName As String\n                compName = swComp.Name2\n                instId = CInt(Right(compName, Len(compName) - InStrRev(compName, "-")))\n                compName = Left(compName, InStrRev(compName, "-") - 1)\n                \n                paramNames(i) = "$STATE@" & compName & "<" & instId & ">"\n                paramValues(i) = "S"\n                                \n            Next\n            \n            For i = 0 To UBound(vConfNames)\n                \n                Dim swConfMgr As SldWorks.ConfigurationManager\n                Set swConfMgr = swAssy.ConfigurationManager\n                \n                If False = swConfMgr.SetConfigurationParams(CStr(vConfNames(i)), (paramNames), (paramValues)) Then\n                    MsgBox "Failed to set configuration parameters for " & CStr(vConfNames(i))\n                End If\n                \n            Next\n            \n        Else\n            MsgBox "There is no other configurations in the assembly"\n        End If\n    \n    Else\n        MsgBox "Please open assembly"\n    End If\n    \nEnd Sub\n\nFunction GetOtherConfigurations(model As SldWorks.ModelDoc2) As Variant\n    \n    Dim vAllConfs As Variant\n    vAllConfs = model.GetConfigurationNames()\n    \n    If UBound(vAllConfs) > 0 Then\n        \n        Dim confs() As String\n        ReDim confs(UBound(vAllConfs) - 1)\n        \n        Dim curIndex As Integer\n        curIndex = 0\n        \n        Dim activeConf As String\n        activeConf = model.ConfigurationManager.ActiveConfiguration.Name\n        \n        Dim i As Integer\n        \n        For i = 0 To UBound(vAllConfs)\n            If LCase(vAllConfs(i)) <> LCase(activeConf) Then\n                confs(curIndex) = vAllConfs(i)\n                curIndex = curIndex + 1\n            End If\n        Next\n        \n        GetOtherConfigurations = confs\n        \n    Else\n        GetOtherConfigurations = Empty\n    End If\n    \nEnd Function\n')))}u.isMDXComponent=!0},11543:(n,e,o)=>{o.d(e,{Z:()=>t});const t=o.p+"assets/images/modify-configurations-a4e521b29ddf571380fb733682c0106d.png"}}]);