"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[75790],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>u});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),S=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=S(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),c=S(r),m=n,u=c["".concat(i,".").concat(m)]||c[m]||g[m]||o;return r?a.createElement(u,s(s({ref:t},l),{},{components:r})):a.createElement(u,s({ref:t},l))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=m;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[c]="string"==typeof e?e:n,s[1]=d;for(var S=2;S<o;S++)s[S]=r[S];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},98593:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>d,toc:()=>S});var a=r(87462),n=(r(67294),r(3905));const o={title:"Storing data in the 3rd party storage store via SwEx.AddIn framework",caption:"Storage",description:"Serializing custom structures into the 3rd party storage store using SwEx.AddIn framework","toc-group-name":"labs-solidworks-swex",sidebar_position:0},s=void 0,d={unversionedId:"codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/index",id:"codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/index",title:"Storing data in the 3rd party storage store via SwEx.AddIn framework",description:"Serializing custom structures into the 3rd party storage store using SwEx.AddIn framework",source:"@site/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/index.md",sourceDirName:"codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage",slug:"/codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/storage/index.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Storing data in the 3rd party storage store via SwEx.AddIn framework",caption:"Storage",description:"Serializing custom structures into the 3rd party storage store using SwEx.AddIn framework","toc-group-name":"labs-solidworks-swex",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Storing 3rd party data in SOLIDWORKS models using SwEx.AddIn framework",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/"},next:{title:"Storing data in the 3rd party storage (stream) via SwEx.AddIn framework",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/stream/"}},i={},S=[{value:"Storage Access Handler",id:"storage-access-handler",level:2},{value:"Reading data",id:"reading-data",level:2},{value:"Writing data",id:"writing-data",level:2}],l={toc:S},c="wrapper";function g(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Call ",(0,n.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/M_SolidWorks_Interop_sldworks_ModelDocExtension_Access3rdPartyStorageStore.htm"},"IModelDoc2::Access3rdPartyStorageStore ")," extension method to access the 3rd storage store. Pass the boolean parameter to read or write storage."),(0,n.kt)("p",null,"Use this approach when it is required to store multiple data structures which need to be accessed and managed independently. Prefer this instead of creating multiple ",(0,n.kt)("a",{parentName:"p",href:"/docs/codestack/labs/solidworks/swex/add-in/third-party-data-storage/stream/"},"streams")),(0,n.kt)("h2",{id:"storage-access-handler"},"Storage Access Handler"),(0,n.kt)("p",null,"To simplify the handling of the storage lifecycle, use the Documents Manager API from the SwEx.AddIn framework:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},'Imports CodeStack.SwEx.AddIn\nImports CodeStack.SwEx.AddIn.Attributes\nImports CodeStack.SwEx.AddIn.Base\nImports CodeStack.SwEx.AddIn.Core\nImports CodeStack.SwEx.AddIn.Enums\nImports SolidWorks.Interop.sldworks\nImports System.Runtime.InteropServices\nImports System.Text\nImports System.Xml.Serialization\n\nNamespace CodeStack.SwEx\n    <AutoRegister>\n    <ComVisible(True), Guid("0421C699-E1B1-4D64-A086-D686E88EC311")>\n    Public Class ThirdPartyDataAddIn\n        Inherits SwAddInEx\n\n        Private m_StorageDocHandler As IDocumentsHandler(Of DocumentHandler)\n\n        Public Overrides Function OnConnect() As Boolean\n            m_StorageDocHandler = CreateDocumentsHandler()\n            AddHandler m_StorageDocHandler.HandlerCreated, AddressOf OnStorageHandlerCreated\n            Return True\n        End Function\n\n        Private Sub OnStorageHandlerCreated(ByVal doc As DocumentHandler)\n            AddHandler doc.Access3rdPartyData, AddressOf OnAccess3rdPartyStorageStore\n        End Sub\n\n        Private Sub OnAccess3rdPartyStorageStore(ByVal docHandler As DocumentHandler, ByVal state As Access3rdPartyDataState_e)\n            Select Case state\n                Case Access3rdPartyDataState_e.StorageRead\n                    LoadFromStorageStore(docHandler.Model)\n                Case Access3rdPartyDataState_e.StorageWrite\n                    SaveToStorageStore(docHandler.Model)\n            End Select\n        End Sub\n    End Class\nEnd Namespace\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},'using CodeStack.SwEx.AddIn;\nusing CodeStack.SwEx.AddIn.Attributes;\nusing CodeStack.SwEx.AddIn.Base;\nusing CodeStack.SwEx.AddIn.Core;\nusing CodeStack.SwEx.AddIn.Enums;\nusing SolidWorks.Interop.sldworks;\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Xml.Serialization;\n\nnamespace CodeStack.SwEx\n{\n    [AutoRegister]\n    [ComVisible(true), Guid("64684CEF-131C-4F08-88F7-B3C3BAA7004E")]\n    public class ThirdPartyDataAddIn : SwAddInEx\n    {\n        private IDocumentsHandler<DocumentHandler> m_StorageDocHandler;\n\n        public override bool OnConnect()\n        {\n            m_StorageDocHandler = CreateDocumentsHandler();\n            m_StorageDocHandler.HandlerCreated += OnStorageHandlerCreated;\n            return true;\n        }\n\n        private void OnStorageHandlerCreated(DocumentHandler doc)\n        {\n            doc.Access3rdPartyData += OnAccess3rdPartyStorageStore;\n        }\n\n        private void OnAccess3rdPartyStorageStore(DocumentHandler docHandler, Access3rdPartyDataState_e state)\n        {\n            switch (state)\n            {\n                case Access3rdPartyDataState_e.StorageRead:\n                    LoadFromStorageStore(docHandler.Model);\n                    break;\n\n                case Access3rdPartyDataState_e.StorageWrite:\n                    SaveToStorageStore(docHandler.Model);\n                    break;\n            }\n        }\n    }\n}\n')),(0,n.kt)("h2",{id:"reading-data"},"Reading data"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/P_CodeStack_SwEx_AddIn_Base_IThirdPartyStoreHandler_Storage.htm"},"IThirdPartyStoreHandler::Storage")," property returns null for the storage which not exists on reading."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},'Private Const STORAGE_NAME As String = "CodeStackStorage"\nPrivate Const STREAM1_NAME As String = "CodeStackStream1"\nPrivate Const STREAM2_NAME As String = "CodeStackStream2"\nPrivate Const SUB_STORAGE_NAME As String = "CodeStackSubStorage"\n\nPublic Class StorageStreamData\n    Public Property Prp3 As Integer\n    Public Property Prp4 As Boolean\nEnd Class\n\nPrivate m_StorageData As StorageStreamData\nPrivate Sub LoadFromStorageStore(ByVal model As IModelDoc2)\n    Using storageHandler = model.Access3rdPartyStorageStore(STORAGE_NAME, False)\n\n        If storageHandler.Storage IsNot Nothing Then\n\n            Using str = storageHandler.Storage.TryOpenStream(STREAM1_NAME, False)\n\n                If str IsNot Nothing Then\n                    Dim xmlSer = New XmlSerializer(GetType(StorageStreamData))\n                    m_StorageData = TryCast(xmlSer.Deserialize(str), StorageStreamData)\n                End If\n            End Using\n\n            Using subStorage = storageHandler.Storage.TryOpenStorage(SUB_STORAGE_NAME, False)\n\n                If subStorage IsNot Nothing Then\n\n                    Using str = subStorage.TryOpenStream(STREAM2_NAME, False)\n\n                        If str IsNot Nothing Then\n                            Dim buffer = New Byte(str.Length - 1) {}\n                            str.Read(buffer, 0, buffer.Length)\n                            Dim dateStr = Encoding.UTF8.GetString(buffer)\n                            Dim [date] = DateTime.Parse(dateStr)\n                        End If\n                    End Using\n                End If\n            End Using\n        End If\n    End Using\nEnd Sub\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},'private const string STORAGE_NAME = "CodeStackStorage";\nprivate const string STREAM1_NAME = "CodeStackStream1";\nprivate const string STREAM2_NAME = "CodeStackStream2";\nprivate const string SUB_STORAGE_NAME = "CodeStackSubStorage";\n\npublic class StorageStreamData\n{\n    public int Prp3 { get; set; }\n    public bool Prp4 { get; set; }\n}\n\nprivate StorageStreamData m_StorageData;\n\nprivate void LoadFromStorageStore(IModelDoc2 model)\n{\n    using (var storageHandler = model.Access3rdPartyStorageStore(STORAGE_NAME, false))\n    {\n        if (storageHandler.Storage != null)\n        {\n            using (var str = storageHandler.Storage.TryOpenStream(STREAM1_NAME, false))\n            {\n                if (str != null)\n                {\n                    var xmlSer = new XmlSerializer(typeof(StorageStreamData));\n                    m_StorageData = xmlSer.Deserialize(str) as StorageStreamData;\n                }\n            }\n\n            using (var subStorage = storageHandler.Storage.TryOpenStorage(SUB_STORAGE_NAME, false))\n            {\n                if (subStorage != null)\n                {\n                    using (var str = subStorage.TryOpenStream(STREAM2_NAME, false))\n                    {\n                        if (str != null)\n                        {\n                            var buffer = new byte[str.Length];\n                            str.Read(buffer, 0, buffer.Length);\n                            var dateStr = Encoding.UTF8.GetString(buffer);\n                            var date = DateTime.Parse(dateStr);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n')),(0,n.kt)("h2",{id:"writing-data"},"Writing data"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/P_CodeStack_SwEx_AddIn_Base_IThirdPartyStoreHandler_Storage.htm"},"IThirdPartyStoreHandler::Storage")," will always return the pointer to the storage (stream is automatically created if it doesn't exist)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},'Private Const STORAGE_NAME As String = "CodeStackStorage"\nPrivate Const STREAM1_NAME As String = "CodeStackStream1"\nPrivate Const STREAM2_NAME As String = "CodeStackStream2"\nPrivate Const SUB_STORAGE_NAME As String = "CodeStackSubStorage"\n\nPublic Class StorageStreamData\n    Public Property Prp3 As Integer\n    Public Property Prp4 As Boolean\nEnd Class\n\nPrivate m_StorageData As StorageStreamData\nPrivate Sub SaveToStorageStore(ByVal model As IModelDoc2)\n    Using storageHandler = model.Access3rdPartyStorageStore(STORAGE_NAME, True)\n\n        Using str = storageHandler.Storage.TryOpenStream(STREAM1_NAME, True)\n            Dim xmlSer = New XmlSerializer(GetType(StorageStreamData))\n            xmlSer.Serialize(str, m_StorageData)\n        End Using\n\n        Using subStorage = storageHandler.Storage.TryOpenStorage(SUB_STORAGE_NAME, True)\n\n            Using str = subStorage.TryOpenStream(STREAM2_NAME, True)\n                Dim buffer = Encoding.UTF8.GetBytes(DateTime.Now.ToString("yyyy-MM-dd-hh-mm-ss"))\n                str.Write(buffer, 0, buffer.Length)\n            End Using\n        End Using\n    End Using\nEnd Sub\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},'private const string STORAGE_NAME = "CodeStackStorage";\nprivate const string STREAM1_NAME = "CodeStackStream1";\nprivate const string STREAM2_NAME = "CodeStackStream2";\nprivate const string SUB_STORAGE_NAME = "CodeStackSubStorage";\n\npublic class StorageStreamData\n{\n    public int Prp3 { get; set; }\n    public bool Prp4 { get; set; }\n}\n\nprivate StorageStreamData m_StorageData;\n\nprivate void SaveToStorageStore(IModelDoc2 model)\n{\n    using (var storageHandler = model.Access3rdPartyStorageStore(STORAGE_NAME, true))\n    {\n        using (var str = storageHandler.Storage.TryOpenStream(STREAM1_NAME, true))\n        {\n            var xmlSer = new XmlSerializer(typeof(StorageStreamData));\n\n            xmlSer.Serialize(str, m_StorageData);\n        }\n\n        using (var subStorage = storageHandler.Storage.TryOpenStorage(SUB_STORAGE_NAME, true))\n        {\n            using (var str = subStorage.TryOpenStream(STREAM2_NAME, true))\n            {\n                var buffer = Encoding.UTF8.GetBytes(DateTime.Now.ToString("yyyy-MM-dd-hh-mm-ss"));\n                str.Write(buffer, 0, buffer.Length);\n            }\n        }\n    }\n}\n')),(0,n.kt)("p",null,"Explore the methods of ",(0,n.kt)("a",{parentName:"p",href:"https://docs.codestack.net/swex/add-in/html/T_CodeStack_SwEx_AddIn_Base_IComStorage.htm"},"IComStorage")," for information of how to create sub streams or sub storages and enumerate the existing elements."))}g.isMDXComponent=!0}}]);