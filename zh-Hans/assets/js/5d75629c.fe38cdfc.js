"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[80614],{3905:(n,e,r)=>{r.d(e,{Zo:()=>u,kt:()=>f});var t=r(67294);function a(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function s(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function i(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?s(Object(r),!0).forEach((function(e){a(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function o(n,e){if(null==n)return{};var r,t,a=function(n,e){if(null==n)return{};var r,t,a={},s=Object.keys(n);for(t=0;t<s.length;t++)r=s[t],e.indexOf(r)>=0||(a[r]=n[r]);return a}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(t=0;t<s.length;t++)r=s[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(a[r]=n[r])}return a}var l=t.createContext({}),p=function(n){var e=t.useContext(l),r=e;return n&&(r="function"==typeof n?n(e):i(i({},e),n)),r},u=function(n){var e=p(n.components);return t.createElement(l.Provider,{value:e},n.children)},c="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},m=t.forwardRef((function(n,e){var r=n.components,a=n.mdxType,s=n.originalType,l=n.parentName,u=o(n,["components","mdxType","originalType","parentName"]),c=p(r),m=a,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||s;return r?t.createElement(f,i(i({ref:e},u),{},{components:r})):t.createElement(f,i({ref:e},u))}));function f(n,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var s=r.length,i=new Array(s);i[0]=m;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=n,o[c]="string"==typeof n?n:a,i[1]=o;for(var p=2;p<s;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},84728:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var t=r(87462),a=(r(67294),r(3905));const s={layout:"sw-tool",image:"import-export-drawing-layers.svg",group:"\u7ed8\u56fe"},i=void 0,o={unversionedId:"codestack/solidworks-api/document/drawing/import-export-layers/index",id:"codestack/solidworks-api/document/drawing/import-export-layers/index",title:"index",description:"SOLIDWORKS\u56fe\u7eb8\u4e2d\u7684\u56fe\u5c42{ width=600 }",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/document/drawing/import-export-layers/index.md",sourceDirName:"codestack/solidworks-api/document/drawing/import-export-layers",slug:"/codestack/solidworks-api/document/drawing/import-export-layers/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/drawing/import-export-layers/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/document/drawing/import-export-layers/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",image:"import-export-drawing-layers.svg",group:"\u7ed8\u56fe"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u83b7\u53d6\u7ed8\u56fe\u89c6\u56fe\u4e2d\u7684\u7269\u4f53\u8d28\u91cf",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/drawing/get-view-bodies-mass/"},next:{title:"\u4f7f\u7528SOLIDWORKS API\u5728\u7ed8\u56fe\u89c6\u56fe\u4e2d\u63d2\u5165BOM\u6c14\u7403",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/document/drawing/insert-bom-balloons/"}},l={},p=[{value:"\u683c\u5f0f",id:"\u683c\u5f0f",level:2},{value:"CAD+",id:"cad",level:2},{value:"\u5bfc\u51fa",id:"\u5bfc\u51fa",level:2},{value:"\u5bfc\u5165",id:"\u5bfc\u5165",level:2}],u={toc:p},c="wrapper";function d(n){let{components:e,...s}=n;return(0,a.kt)(c,(0,t.Z)({},u,s,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SOLIDWORKS\u56fe\u7eb8\u4e2d\u7684\u56fe\u5c42",src:r(80662).Z,width:"1235",height:"452"}),"{ width=600 }"),(0,a.kt)("p",null,"\u8fd9\u4e9b\u5b8f\u5141\u8bb8\u5c06SOLIDWORKS\u56fe\u7eb8\u4e2d\u7684\u56fe\u5c42\u4fe1\u606f\u5bfc\u5165\u548c\u5bfc\u51fa\u5230\u6587\u672c\u6587\u4ef6\u4e2d\u3002"),(0,a.kt)("p",null,"\u5bfc\u5165\u548c\u5bfc\u51fa\u7684\u4fe1\u606f\u5305\u62ec\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u540d\u79f0"),(0,a.kt)("li",{parentName:"ul"},"\u63cf\u8ff0"),(0,a.kt)("li",{parentName:"ul"},"\u53ef\u89c1\u6027"),(0,a.kt)("li",{parentName:"ul"},"\u662f\u5426\u6253\u5370"),(0,a.kt)("li",{parentName:"ul"},"\u989c\u8272"),(0,a.kt)("li",{parentName:"ul"},"\u6837\u5f0f"),(0,a.kt)("li",{parentName:"ul"},"\u539a\u5ea6")),(0,a.kt)("h2",{id:"\u683c\u5f0f"},"\u683c\u5f0f"),(0,a.kt)("p",null,"\u8fd9\u4e2a\u5b8f\u5c06\u6240\u6709\u4fe1\u606f\u5bfc\u51fa\u5230\u8f93\u51fa\u6587\u672c\u6587\u4ef6\u4e2d\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u56fe\u5c42: \u5b9e\u4f53\n    \u63cf\u8ff0: \u5305\u542b\u5b9e\u4f53\u7684\u56fe\u5c42\n    \u989c\u8272: 0 128 255\n    \u53ef\u6253\u5370: True\n    \u6837\u5f0f: 0\n    \u53ef\u89c1: True\n    \u539a\u5ea6: 5\n\n\u56fe\u5c42: \u54c1\u724c\n    \u63cf\u8ff0: \u7528\u4e8e\u54c1\u724c\u56fe\u7247\u7684\u56fe\u5c42\n    \u989c\u8272: 0 128 128\n    \u53ef\u6253\u5370: True\n    \u6837\u5f0f: 0\n    \u53ef\u89c1: True\n    \u539a\u5ea6: 0\n")),(0,a.kt)("p",null,"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6587\u4ef6\u5c06\u4fdd\u5b58\u6216\u52a0\u8f7d\u5230\u4e0e\u539f\u59cb\u6587\u4ef6\u76f8\u540c\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u6587\u4ef6\u540d\u524d\u7f00\u4e3a",(0,a.kt)("strong",{parentName:"p"},"_Layers.txt")),(0,a.kt)("h2",{id:"cad"},"CAD+"),(0,a.kt)("p",null,"\u6b64\u5b8f\u4e0e",(0,a.kt)("a",{parentName:"p",href:"https://cadplus.xarial.com/toolbar/"},"Toolbar+"),"\u548c",(0,a.kt)("a",{parentName:"p",href:"https://cadplus.xarial.com/batch/"},"Batch+"),"\u5de5\u5177\u517c\u5bb9\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u6309\u94ae\u6dfb\u52a0\u5230\u5de5\u5177\u680f\u5e76\u5206\u914d\u5feb\u6377\u952e\u4ee5\u4fbf\u66f4\u8f7b\u677e\u5730\u8bbf\u95ee\u6216\u6279\u91cf\u8fd0\u884c\u3002"),(0,a.kt)("p",null,"\u8981\u542f\u7528",(0,a.kt)("a",{parentName:"p",href:"https://cadplus.xarial.com/toolbar/configuration/arguments/"},"\u5b8f\u53c2\u6570"),"\uff0c\u8bf7\u5c06",(0,a.kt)("strong",{parentName:"p"},"ARGS"),"\u5e38\u91cf\u8bbe\u7f6e\u4e3atrue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-vb"},"#Const ARGS = True\n")),(0,a.kt)("p",null,"\u5c06\u6587\u672c\u6587\u4ef6\u7684\u8def\u5f84\u4f5c\u4e3a\u5b8f\u53c2\u6570\u5bfc\u5165\u6216\u5bfc\u51fa\u3002"),(0,a.kt)("h2",{id:"\u5bfc\u51fa"},"\u5bfc\u51fa"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-vb"},'#Const ARGS = False \'True to use arguments from Toolbar+ or Batch+ instead of the constant\n\nConst TOKEN_LAYER = "\u56fe\u5c42: "\nConst TOKEN_DESCRIPTION = "\u63cf\u8ff0: "\nConst TOKEN_COLOR = "\u989c\u8272: "\nConst TOKEN_PRINTABLE = "\u53ef\u6253\u5370: "\nConst TOKEN_STYLE = "\u6837\u5f0f: "\nConst TOKEN_VISIBLE = "\u53ef\u89c1: "\nConst TOKEN_THICKNESS = "\u539a\u5ea6: "\n\nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swDraw As SldWorks.DrawingDoc\n    \n    Set swDraw = swApp.ActiveDoc\n    \n    Dim filePath As String\n    \n    #If ARGS Then\n                \n        Dim macroRunner As Object\n        Set macroRunner = CreateObject("CadPlus.MacroRunner.Sw")\n        \n        Dim param As Object\n        Set param = macroRunner.PopParameter(swApp)\n        \n        Dim vArgs As Variant\n        vArgs = param.Get("Args")\n        \n        filePath = CStr(vArgs(0))\n        \n    #Else\n        filePath = swDraw.GetPathName\n        If filePath <> "" Then\n            filePath = Left(filePath, InStrRev(filePath, ".") - 1) & "_Layers.txt"\n        Else\n            Err.Raise vbError, "", "\u5982\u679c\u672a\u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\u8def\u5f84\uff0c\u5219\u5fc5\u987b\u4fdd\u5b58\u6587\u4ef6"\n        End If\n    #End If\n    \n    If Not swDraw Is Nothing Then\n        ExportLayers swDraw, filePath\n    Else\n        Err.Raise vbError, "", "\u6253\u5f00\u56fe\u7eb8"\n    End If\n    \nEnd Sub\n\nSub ExportLayers(draw As SldWorks.DrawingDoc, filePath As String)\n    \n    Dim swLayerMgr As SldWorks.LayerMgr\n    \n    Set swLayerMgr = draw.GetLayerManager\n    \n    Dim vLayers As Variant\n    vLayers = swLayerMgr.GetLayerList\n\n    Dim fileNmb As Integer\n    fileNmb = FreeFile\n    \n    Open filePath For Output As #fileNmb\n        \n    Dim i As Integer\n    \n    For i = 0 To UBound(vLayers)\n        \n        Dim layerName As String\n        layerName = CStr(vLayers(i))\n        \n        Dim swLayer As SldWorks.Layer\n        Set swLayer = swLayerMgr.GetLayer(layerName)\n        \n        Dim RGBHex As String\n        RGBHex = Right("000000" & Hex(swLayer.Color), 6)\n        \n        Print #fileNmb, TOKEN_LAYER & swLayer.Name\n        Print #fileNmb, "    " & TOKEN_DESCRIPTION & swLayer.Description\n        Print #fileNmb, "    " & TOKEN_COLOR & CInt("&H" & Mid(RGBHex, 5, 2)) & " " & CInt("&H" & Mid(RGBHex, 3, 2)) & " " & CInt("&H" & Mid(RGBHex, 1, 2))\n        Print #fileNmb, "    " & TOKEN_PRINTABLE & swLayer.Printable\n        Print #fileNmb, "    " & TOKEN_STYLE & swLayer.Style\n        Print #fileNmb, "    " & TOKEN_VISIBLE & swLayer.Visible\n        Print #fileNmb, "    " & TOKEN_THICKNESS & swLayer.Width\n        Print #fileNmb, ""\n        \n    Next\n        \n    Close #fileNmb\n    \nEnd Sub\n')),(0,a.kt)("h2",{id:"\u5bfc\u5165"},"\u5bfc\u5165"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-vb"},'#Const ARGS = False \'True to use arguments from Toolbar+ or Batch+ instead of the constant\n\nConst TOKEN_LAYER = "\u56fe\u5c42: "\nConst TOKEN_DESCRIPTION = "\u63cf\u8ff0: "\nConst TOKEN_COLOR = "\u989c\u8272: "\nConst TOKEN_PRINTABLE = "\u53ef\u6253\u5370: "\nConst TOKEN_STYLE = "\u6837\u5f0f: "\nConst TOKEN_VISIBLE = "\u53ef\u89c1: "\nConst TOKEN_THICKNESS = "\u539a\u5ea6: "\n\nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swDraw As SldWorks.DrawingDoc\n    \n    Set swDraw = swApp.ActiveDoc\n    \n    Dim filePath As String\n    \n    #If ARGS Then\n                \n        Dim macroRunner As Object\n        Set macroRunner = CreateObject("CadPlus.MacroRunner.Sw")\n        \n        Dim param As Object\n        Set param = macroRunner.PopParameter(swApp)\n        \n        Dim vArgs As Variant\n        vArgs = param.Get("Args")\n        \n        filePath = CStr(vArgs(0))\n        \n    #Else\n        filePath = swDraw.GetPathName\n        If filePath <> "" Then\n            filePath = Left(filePath, InStrRev(filePath, ".") - 1) & "_Layers.txt"\n        Else\n            Err.Raise vbError, "", "\u5982\u679c\u672a\u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\u8def\u5f84\uff0c\u5219\u5fc5\u987b\u4fdd\u5b58\u6587\u4ef6"\n        End If\n    #End If\n    \n    If Not swDraw Is Nothing Then\n        ImportLayers swDraw, filePath\n    Else\n        Err.Raise vbError, "", "\u6253\u5f00\u56fe\u7eb8"\n    End If\n    \nEnd Sub\n\nSub ImportLayers(draw As SldWorks.DrawingDoc, filePath As String)\n    \n    Dim swLayerMgr As SldWorks.LayerMgr\n    \n    Set swLayerMgr = draw.GetLayerManager\n    \n    Set fso = CreateObject("Scripting.FileSystemObject")\n    \n    If fso.FileExists(filePath) Then\n        \n        Dim swCurrentLayer As SldWorks.Layer\n        \n        Set file = fso.OpenTextFile(filePath)\n                \n        Do Until file.AtEndOfStream\n                \n            Dim line As String\n                \n            line = file.ReadLine\n            \n            Dim value As String\n            \n            If IsToken(line, TOKEN_LAYER, value) Then\n                \n                Set swCurrentLayer = swLayerMgr.GetLayer(value)\n                \n                If swCurrentLayer Is Nothing Then\n                    swLayerMgr.AddLayer value, "", RGB(255, 255, 255), swLineStyles_e.swLineCENTER, swLineWeights_e.swLW_CUSTOM\n                    Set swCurrentLayer = swLayerMgr.GetLayer(value)\n                End If\n                \n                If swCurrentLayer Is Nothing Then\n                    Err.Raise vbError, "", "\u65e0\u6cd5\u8bbf\u95ee\u56fe\u5c42 " & value\n                End If\n                \n            Else\n                \n                If swCurrentLayer Is Nothing Then\n                    Err.Raise vbError, "", "\u5f53\u524d\u56fe\u5c42\u672a\u8bbe\u7f6e"\n                End If\n                \n                If IsToken(line, TOKEN_DESCRIPTION, value) Then\n                    swCurrentLayer.Description = value\n                ElseIf IsToken(line, TOKEN_COLOR, value) Then\n                    Dim vRgb As Variant\n                    vRgb = Split(value, " ")\n                    swCurrentLayer.Color = RGB(CInt(Trim(CStr(vRgb(0)))), CInt(Trim(CStr(vRgb(1)))), CInt(Trim(CStr(vRgb(2)))))\n                ElseIf IsToken(line, TOKEN_PRINTABLE, value) Then\n                    swCurrentLayer.Printable = CBool(value)\n                ElseIf IsToken(line, TOKEN_STYLE, value) Then\n                    swCurrentLayer.Style = CInt(value)\n                ElseIf IsToken(line, TOKEN_VISIBLE, value) Then\n                    swCurrentLayer.Visible = CBool(value)\n                ElseIf IsToken(line, TOKEN_THICKNESS, value) Then\n                    swCurrentLayer.Width = CInt(value)\n                End If\n                \n            End If\n            \n        Loop\n        \n        file.Close\n        \n    Else\n        Err.Raise vbError, "", "\u6587\u4ef6\u4e0d\u5b58\u5728"\n    End If\n    \nEnd Sub\n\nFunction IsToken(txt As String, token As String, ByRef value As String) As Boolean\n    \n    txt = Trim(txt)\n    \n    If LCase(Left(txt, Len(token))) = LCase(token) Then\n        value = Trim(Right(txt, Len(txt) - Len(token)))\n        IsToken = True\n    Else\n        value = ""\n        IsToken = False\n    End If\n    \nEnd Function\n')))}d.isMDXComponent=!0},80662:(n,e,r)=>{r.d(e,{Z:()=>t});const t=r.p+"assets/images/sw-layers-17040c13c77cfb98a16db4d7dfa5a13b.png"}}]);