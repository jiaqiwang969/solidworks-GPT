"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[51670],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),w=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=w(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=w(t),u=r,p=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return t?o.createElement(p,s(s({ref:n},c),{},{components:t})):o.createElement(p,s({ref:n},c))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[d]="string"==typeof e?e:r,s[1]=a;for(var w=2;w<i;w++)s[w]=t[w];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},47462:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>w});var o=t(87462),r=(t(67294),t(3905));const i={caption:"Rename Drawing Views",title:"Rename all drawing views to the name of the sheet they are on"},s=void 0,a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/rename-views-after-sheets/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/rename-views-after-sheets/index",title:"Rename all drawing views to the name of the sheet they are on",description:"This VBA macro allows you to rename all drawing views on all sheets in the active SOLIDWORKS drawing document to the name of the sheet followed by an index.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/rename-views-after-sheets/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/rename-views-after-sheets",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/rename-views-after-sheets/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/rename-views-after-sheets/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/rename-views-after-sheets/index.md",tags:[],version:"current",frontMatter:{caption:"Rename Drawing Views",title:"Rename all drawing views to the name of the sheet they are on"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u91cd\u547d\u540d\u8868\u683c\u6ce8\u91ca\u7684\u5b8f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/rename-table-annotation/"},next:{title:"\u4f7f\u7528SOLIDWORKS API\u66ff\u6362\u7ec4\u4ef6\u5e76\u4fdd\u7559\u9009\u62e9",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/replace/"}},l={},w=[{value:"This VBA macro allows you to rename all drawing views on all sheets in the active SOLIDWORKS drawing document to the name of the sheet followed by an index.",id:"this-vba-macro-allows-you-to-rename-all-drawing-views-on-all-sheets-in-the-active-solidworks-drawing-document-to-the-name-of-the-sheet-followed-by-an-index",level:2}],c={toc:w},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"this-vba-macro-allows-you-to-rename-all-drawing-views-on-all-sheets-in-the-active-solidworks-drawing-document-to-the-name-of-the-sheet-followed-by-an-index"},"This VBA macro allows you to rename all drawing views on all sheets in the active SOLIDWORKS drawing document to the name of the sheet followed by an index."),(0,r.kt)("p",null,"This VBA macro allows you to rename all drawing views on all sheets in the active SOLIDWORKS drawing document to the name of the sheet followed by an index."),(0,r.kt)("p",null,"Detail and section views will be excluded from the renaming process."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    If Not swModel Is Nothing Then\n        \n        If swModel.GetType() = swDocumentTypes_e.swDocDRAWING Then\n            \n            Dim swDraw As SldWorks.DrawingDoc\n            \n            Set swDraw = swModel\n            \n            Dim vSheets As Variant\n            vSheets = swDraw.GetViews\n            \n            Dim i As Integer\n            \n            For i = 0 To UBound(vSheets)\n                \n                Dim vViews As Variant\n                vViews = vSheets(i)\n                \n                Dim swSheetView As SldWorks.View\n                \n                Set swSheetView = vViews(0)\n                \n                Dim j As Integer\n                \n                Dim nextViewIndex As Integer\n                nextViewIndex = 0\n                \n                For j = 1 To UBound(vViews)\n                    \n                    Dim swView As SldWorks.View\n                    Set swView = vViews(j)\n                    \n                    Dim viewType As Integer\n                    viewType = swView.Type\n                    \n                    If viewType <> swDrawingViewTypes_e.swDrawingDetailView And viewType <> swDrawingViewTypes_e.swDrawingSectionView Then\n                        \n                        nextViewIndex = nextViewIndex + 1\n                        \n                        Dim newViewName As String\n                        newViewName = swSheetView.Name & "(" & nextViewIndex & ")"\n                        \n                        If False = swView.SetName2(newViewName) Then\n                            Err.Raise vbError, "", "Failed to rename " & swView.Name & " to " & ""\n                        End If\n                    End If\n                    \n                Next\n                \n            Next\n            \n        Else\n            Err.Raise vbError, "", "Active document is not a drawing"\n        End If\n    Else\n        Err.Raise vbError, "", "Please open the drawing"\n    End If\n    \nEnd Sub\n')))}m.isMDXComponent=!0}}]);