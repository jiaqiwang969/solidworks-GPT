"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[85195],{3905:(n,e,o)=>{o.d(e,{Zo:()=>c,kt:()=>f});var r=o(67294);function t(n,e,o){return e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o,n}function s(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.push.apply(o,r)}return o}function a(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?s(Object(o),!0).forEach((function(e){t(n,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))}))}return n}function i(n,e){if(null==n)return{};var o,r,t=function(n,e){if(null==n)return{};var o,r,t={},s=Object.keys(n);for(r=0;r<s.length;r++)o=s[r],e.indexOf(o)>=0||(t[o]=n[o]);return t}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(r=0;r<s.length;r++)o=s[r],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(n,o)&&(t[o]=n[o])}return t}var p=r.createContext({}),l=function(n){var e=r.useContext(p),o=e;return n&&(o="function"==typeof n?n(e):a(a({},e),n)),o},c=function(n){var e=l(n.components);return r.createElement(p.Provider,{value:e},n.children)},d="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var o=n.components,t=n.mdxType,s=n.originalType,p=n.parentName,c=i(n,["components","mdxType","originalType","parentName"]),d=l(o),m=t,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||s;return o?r.createElement(f,a(a({ref:e},c),{},{components:o})):r.createElement(f,a({ref:e},c))}));function f(n,e){var o=arguments,t=e&&e.mdxType;if("string"==typeof n||t){var s=o.length,a=new Array(s);a[0]=m;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=n,i[d]="string"==typeof n?n:t,a[1]=i;for(var l=2;l<s;l++)a[l]=o[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},51391:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=o(87462),t=(o(67294),o(3905));const s={caption:"\u5e94\u7528\u968f\u673a\u989c\u8272\u5230\u7ec4\u4ef6",title:"\u5728SOLIDWORKS\u88c5\u914d\u4e2d\u5e94\u7528\u968f\u673a\u989c\u8272\u7684\u5b8f"},a=void 0,i={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/appearance/color-assembly/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/appearance/color-assembly/index",title:"\u5728SOLIDWORKS\u88c5\u914d\u4e2d\u5e94\u7528\u968f\u673a\u989c\u8272\u7684\u5b8f",description:"VBA\u5b8f\uff0c\u5c06\u968f\u673a\u989c\u8272\u5e94\u7528\u4e8eSOLIDWORKS\u88c5\u914d\u4e2d\u7684\u6240\u6709\u7ec4\u4ef6\uff0c\u5e76\u53ef\u6309\u81ea\u5b9a\u4e49\u5c5e\u6027\u503c\u8fdb\u884c\u5206\u7ec4",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/appearance/color-assembly/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/appearance/color-assembly",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/appearance/color-assembly/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/appearance/color-assembly/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/appearance/color-assembly/index.md",tags:[],version:"current",frontMatter:{caption:"\u5e94\u7528\u968f\u673a\u989c\u8272\u5230\u7ec4\u4ef6",title:"\u5728SOLIDWORKS\u88c5\u914d\u4e2d\u5e94\u7528\u968f\u673a\u989c\u8272\u7684\u5b8f"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u751f\u6210\u6750\u6599\u53d8\u4f53\u914d\u7f6e",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/appearance/apply-render-material/"},next:{title:"\u4eceSOLIDWORKS\u6587\u6863\u4e2d\u5220\u9664\u6240\u6709\u989c\u8272\u7684\u5b8f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/appearance/remove-color/"}},p={},l=[{value:"VBA\u5b8f\uff0c\u5c06\u968f\u673a\u989c\u8272\u5e94\u7528\u4e8eSOLIDWORKS\u88c5\u914d\u4e2d\u7684\u6240\u6709\u7ec4\u4ef6\uff0c\u5e76\u53ef\u6309\u81ea\u5b9a\u4e49\u5c5e\u6027\u503c\u8fdb\u884c\u5206\u7ec4",id:"vba\u5b8f\u5c06\u968f\u673a\u989c\u8272\u5e94\u7528\u4e8esolidworks\u88c5\u914d\u4e2d\u7684\u6240\u6709\u7ec4\u4ef6\u5e76\u53ef\u6309\u81ea\u5b9a\u4e49\u5c5e\u6027\u503c\u8fdb\u884c\u5206\u7ec4",level:2}],c={toc:l},d="wrapper";function u(n){let{components:e,...o}=n;return(0,t.kt)(d,(0,r.Z)({},c,o,{components:e,mdxType:"MDXLayout"}),(0,t.kt)("h2",{id:"vba\u5b8f\u5c06\u968f\u673a\u989c\u8272\u5e94\u7528\u4e8esolidworks\u88c5\u914d\u4e2d\u7684\u6240\u6709\u7ec4\u4ef6\u5e76\u53ef\u6309\u81ea\u5b9a\u4e49\u5c5e\u6027\u503c\u8fdb\u884c\u5206\u7ec4"},"VBA\u5b8f\uff0c\u5c06\u968f\u673a\u989c\u8272\u5e94\u7528\u4e8eSOLIDWORKS\u88c5\u914d\u4e2d\u7684\u6240\u6709\u7ec4\u4ef6\uff0c\u5e76\u53ef\u6309\u81ea\u5b9a\u4e49\u5c5e\u6027\u503c\u8fdb\u884c\u5206\u7ec4"),(0,t.kt)("p",null,"\u8fd9\u4e2aVBA\u5b8f\u5c06\u5728\u6d3b\u52a8\u88c5\u914d\u7684\u6240\u6709\u7ec4\u4ef6\u4e0a\u5e94\u7528\u968f\u673a\u989c\u8272\u3002"),(0,t.kt)("p",null,"\u4fee\u6539\u5b8f\u7684\u5e38\u91cf\u4ee5\u66f4\u6539\u989c\u8272\u7684\u7ea7\u522b\uff08\u7ec4\u4ef6\u7ea7\u522b\u6216\u6a21\u578b\u7ea7\u522b\uff09\u3002"),(0,t.kt)("p",null,"\u5982\u679c\u5c06\u989c\u8272\u5e94\u7528\u4e8e\u5404\u4e2a\u914d\u7f6e\uff08\u4f8b\u5982",(0,t.kt)("strong",{parentName:"p"},"ALL_CONFIGS")," = ",(0,t.kt)("strong",{parentName:"p"},"False"),"\uff09\uff0c\u6587\u6863\u5fc5\u987b\u5177\u6709\u4e0e\u914d\u7f6e\u5173\u8054\u7684\u663e\u793a\u72b6\u6001\uff0c\u5426\u5219\u989c\u8272\u4e0d\u80fd\u662f\u914d\u7f6e\u7279\u5b9a\u7684\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-vb"},"Const COMP_LEVEL As Boolean = True 'True\u8868\u793a\u5728\u88c5\u914d\u7ea7\u522b\u5e94\u7528\u989c\u8272\uff0cFalse\u8868\u793a\u5728\u6a21\u578b\u7ea7\u522b\u5e94\u7528\u989c\u8272\nConst PARTS_ONLY As Boolean = True 'True\u8868\u793a\u4ec5\u5904\u7406\u96f6\u4ef6\u7ec4\u4ef6\uff0cFalse\u8868\u793a\u4e5f\u5c06\u989c\u8272\u5e94\u7528\u4e8e\u88c5\u914d\nConst ALL_CONFIGS As Boolean = True 'True\u8868\u793a\u5c06\u989c\u8272\u5e94\u7528\u4e8e\u6240\u6709\u914d\u7f6e\uff0cFalse\u8868\u793a\u4ec5\u5e94\u7528\u4e8e\u5f15\u7528\u7684\u914d\u7f6e\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-vb"},"Const PRP_NAME As String = \"Type\" '\u6309\u6b64\u81ea\u5b9a\u4e49\u5c5e\u6027\u503c\u5bf9\u7ec4\u4ef6\u8fdb\u884c\u5206\u7ec4\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a\u7a7a\u5b57\u7b26\u4e32 \"\" \u4ee5\u4e0d\u5bf9\u7ec4\u4ef6\u8fdb\u884c\u5206\u7ec4\n\nSub InitColors(Optional dummy As Variant = Empty)\n\n    ColorsMap.Add \"Plate\", RGB(255, 0, 0) '\u5c06\u6240\u6709\u81ea\u5b9a\u4e49\u5c5e\u6027'Type'\u7b49\u4e8e'Plate'\u7684\u7ec4\u4ef6\u989c\u8272\u8bbe\u7f6e\u4e3a\u7ea2\u8272\n    ColorsMap.Add \"Beam\", RGB(0, 255, 0) '\u5c06\u6240\u6709\u81ea\u5b9a\u4e49\u5c5e\u6027'Type'\u7b49\u4e8e'Beam'\u7684\u7ec4\u4ef6\u989c\u8272\u8bbe\u7f6e\u4e3a\u7eff\u8272\n    \nEnd Sub\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-vb"},'Const COMP_LEVEL As Boolean = True\nConst PARTS_ONLY As Boolean = True\nConst ALL_CONFIGS As Boolean = True\nConst PRP_NAME As String = ""\n\nDim swApp As SldWorks.SldWorks\nDim ColorsMap As Object\n\nSub InitColors(Optional dummy As Variant = Empty)\n\n    ColorsMap.Add "Plate", RGB(255, 0, 0)\n    ColorsMap.Add "Beam", RGB(0, 255, 0)\n    \nEnd Sub\n\nSub main()\n\ntry_:\n    \n    On Error GoTo catch_\n    \n    Set ColorsMap = CreateObject("Scripting.Dictionary")\n\n    ColorsMap.CompareMode = vbTextCompare\n\n    InitColors\n\n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    If Not swModel Is Nothing Then\n    \n        If swModel.GetType() = swDocumentTypes_e.swDocASSEMBLY Then\n            \n            Dim swAssy As SldWorks.AssemblyDoc\n            \n            Set swAssy = swModel\n            \n            swAssy.ResolveAllLightWeightComponents True\n            \n            Dim vComps As Variant\n            vComps = swAssy.GetComponents(False)\n            \n            ColorizeComponents vComps\n            \n            swModel.GraphicsRedraw2\n        Else\n            Err.Raise vbError, "", "\u4ec5\u652f\u6301\u88c5\u914d\u6587\u6863"\n        End If\n    Else\n        Err.Raise vbError, "", "\u6253\u5f00\u88c5\u914d\u6587\u6863"\n    End If\n    \n    GoTo finally_\n    \ncatch_:\n    MsgBox Err.Description, vbCritical\nfinally_:\n    \nEnd Sub\n\nSub ColorizeComponents(vComps As Variant)\n    \n    Dim i As Integer\n    \n    Dim processedDocs() As String\n    \n    For i = 0 To UBound(vComps)\n        \n        Dim swComp As SldWorks.Component2\n        Set swComp = vComps(i)\n        \n        Dim swRefModel As SldWorks.ModelDoc2\n            \n        Set swRefModel = swComp.GetModelDoc2()\n        \n        If Not swRefModel Is Nothing Then\n        \n            If Not PARTS_ONLY Or swRefModel.GetType() = swDocumentTypes_e.swDocPART Then\n        \n                Dim docKey As String\n                docKey = LCase(swRefModel.GetPathName())\n                \n                If Not ALL_CONFIGS Then\n                    docKey = docKey & ":" & LCase(swComp.ReferencedConfiguration)\n                End If\n                \n                If COMP_LEVEL Or Not Contains(processedDocs, docKey) Then\n                    \n                    If (Not processedDocs) = -1 Then\n                        ReDim processedDocs(0)\n                    Else\n                        ReDim Preserve processedDocs(UBound(processedDocs) + 1)\n                    End If\n                    \n                    processedDocs(UBound(processedDocs)) = docKey\n                    \n                    Dim color As Long\n                    color = RGB(Int(255 * Rnd), Int(255 * Rnd), Int(255 * Rnd))\n                    \n                    If PRP_NAME <> "" Then\n                        \n                        Dim prpVal As String\n                                    \n                        prpVal = GetModelPropertyValue(swRefModel, swComp.ReferencedConfiguration, PRP_NAME)\n                        \n                        If prpVal <> "" Then\n                        \n                            If ColorsMap.Exists(prpVal) Then\n                                color = ColorsMap(prpVal)\n                            Else\n                                ColorsMap.Add prpVal, color\n                            End If\n                        \n                        End If\n                        \n                    End If\n                    \n                    Dim RGBHex As String\n            \n                    RGBHex = Right("000000" & Hex(color), 6)\n                    \n                    Dim dMatPrps(8) As Double\n                    \n                    dMatPrps(0) = CInt("&H" & Mid(RGBHex, 5, 2)) / 255\n                    dMatPrps(1) = CInt("&H" & Mid(RGBHex, 3, 2)) / 255\n                    dMatPrps(2) = CInt("&H" & Mid(RGBHex, 1, 2)) / 255\n                    dMatPrps(3) = 1\n                    dMatPrps(4) = 1\n                    dMatPrps(5) = 0.5\n                    dMatPrps(6) = 0.3125\n                    dMatPrps(7) = 0\n                    dMatPrps(8) = 0\n                                   \n                    If COMP_LEVEL Then\n                        swComp.SetMaterialPropertyValues2 dMatPrps, IIf(ALL_CONFIGS, swInConfigurationOpts_e.swAllConfiguration, swInConfigurationOpts_e.swThisConfiguration), Empty\n                    Else\n                        Dim sConfs(0)  As String\n                        sConfs(0) = swComp.ReferencedConfiguration\n                        swRefModel.Extension.SetMaterialPropertyValues dMatPrps, IIf(ALL_CONFIGS, swInConfigurationOpts_e.swAllConfiguration, swInConfigurationOpts_e.swSpecifyConfiguration), IIf(ALL_CONFIGS, Empty, sConfs)\n                    End If\n                \n                End If\n                \n            End If\n            \n        End If\n                \n    Next\n    \nEnd Sub\n\nFunction GetModelPropertyValue(model As SldWorks.ModelDoc2, confName As String, prpName As String) As String\n    \n    Dim prpVal As String\n    Dim swCustPrpMgr As SldWorks.CustomPropertyManager\n    \n    Set swCustPrpMgr = model.Extension.CustomPropertyManager(confName)\n    prpVal = GetPropertyValue(swCustPrpMgr, prpName)\n    \n    If prpVal = "" Then\n        Set swCustPrpMgr = model.Extension.CustomPropertyManager("")\n        prpVal = GetPropertyValue(swCustPrpMgr, prpName)\n    End If\n    \n    GetModelPropertyValue = prpVal\n    \nEnd Function\n\nFunction GetPropertyValue(custPrpMgr As SldWorks.CustomPropertyManager, prpName As String) As String\n    Dim resVal As String\n    custPrpMgr.Get2 prpName, "", resVal\n    GetPropertyValue = resVal\nEnd Function\n\nFunction Contains(arr() As String, item As String) As Boolean\n    \n    If (Not arr) <> -1 Then\n    \n        Dim i As Integer\n        \n        For i = 0 To UBound(arr)\n            If arr(i) = item Then\n                Contains = True\n                Exit Function\n            End If\n        Next\n    \n    End If\n    \n    Contains = False\n    \nEnd Function\n')))}u.isMDXComponent=!0}}]);