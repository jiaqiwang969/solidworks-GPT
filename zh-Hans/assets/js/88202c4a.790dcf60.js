"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[71854],{3905:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>g});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function p(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)o=s[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var a=r.createContext({}),c=function(e){var t=r.useContext(a),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},l=function(e){var t=c(e.components);return r.createElement(a.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,s=e.originalType,a=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(o),d=n,g=u["".concat(a,".").concat(d)]||u[d]||m[d]||s;return o?r.createElement(g,i(i({ref:t},l),{},{components:o})):r.createElement(g,i({ref:t},l))}));function g(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=o.length,i=new Array(s);i[0]=d;var p={};for(var a in t)hasOwnProperty.call(t,a)&&(p[a]=t[a]);p.originalType=e,p[u]="string"==typeof e?e:n,i[1]=p;for(var c=2;c<s;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},81757:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var r=o(87462),n=(o(67294),o(3905));const s={layout:"sw-tool",title:"Macro to copy SOLIDWORKS custom properties from cut-list to model",caption:"Copy Cut-List Custom Properties To Model",description:"VBA macro to copy SOLIDWORKS custom properties from cut-list (sheet metal or weldment) to model or configuration",image:"copy-cutlist-properties.svg",labels:["cut-list","sheet metal","properties"],group:"Custom Properties"},i=void 0,p={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/cut-lists/copy-custom-properties/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/cut-lists/copy-custom-properties/index",title:"Macro to copy SOLIDWORKS custom properties from cut-list to model",description:"VBA macro to copy SOLIDWORKS custom properties from cut-list (sheet metal or weldment) to model or configuration",source:"@site/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/cut-lists/copy-custom-properties/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/cut-lists/copy-custom-properties",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/cut-lists/copy-custom-properties/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/cut-lists/copy-custom-properties/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/cut-lists/copy-custom-properties/index.md",tags:[],version:"current",frontMatter:{layout:"sw-tool",title:"Macro to copy SOLIDWORKS custom properties from cut-list to model",caption:"Copy Cut-List Custom Properties To Model",description:"VBA macro to copy SOLIDWORKS custom properties from cut-list (sheet metal or weldment) to model or configuration",image:"copy-cutlist-properties.svg",labels:["cut-list","sheet metal","properties"],group:"Custom Properties"},sidebar:"tutorialSidebar",previous:{title:"Macro to colorize SOLIDWORKS sheet metal and weldment cut-list items",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/cut-lists/colorize-cut-lists/"},next:{title:"SOLIDWORKS macro to exclude selected bodies from cut-lists",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/document/cut-lists/exclude-selected-bodies/"}},a={},c=[{value:"Configuration",id:"configuration",level:2},{value:"Properties Scope",id:"properties-scope",level:3},{value:"Properties Source",id:"properties-source",level:3},{value:"Properties List",id:"properties-list",level:3}],l={toc:c},u="wrapper";function m(e){let{components:t,...s}=e;return(0,n.kt)(u,(0,r.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This VBA macro copies the specified or all SOLIDWORKS custom properties from the sheet metal or weldment cut-list item to model or configuration."),(0,n.kt)("p",null,"Properties from the first found cut-list will be copied."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},'Const CONF_SPEC_PRP As Boolean = False\nConst COPY_RES_VAL As Boolean = True\n\nDim PROPERTIES As Variant\n\nDim swApp As SldWorks.SldWorks\n\nSub Init(Optional dummy As Variant = Empty)\n    PROPERTIES = Array("Bounding Box Length", "Bounding Box Width", "Sheet Metal Thickness") \'list of custom properties to copy or Empty to copy all\nEnd Sub\n\nSub main()\n    \ntry_:\n    \n    On Error GoTo catch_\n    \n    Init\n    \n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    Set swModel = swApp.ActiveDoc\n    \n    Dim swCutListPrpMgr As SldWorks.CustomPropertyManager\n    Set swCutListPrpMgr = GetCutListPropertyManager(swModel)\n    \n    If Not swCutListPrpMgr Is Nothing Then\n        \n        Dim swTargetPrpMgr As SldWorks.CustomPropertyManager\n        \n        If CONF_SPEC_PRP Then\n            Set swTargetPrpMgr = swModel.ConfigurationManager.ActiveConfiguration.CustomPropertyManager\n        Else\n            Set swTargetPrpMgr = swModel.Extension.CustomPropertyManager("")\n        End If\n        \n        CopyProperties swCutListPrpMgr, swTargetPrpMgr, PROPERTIES\n        \n    Else\n        Err.Raise vbError, "", "Cut-list is not found"\n    End If\n    \n    GoTo finally_\n    \ncatch_:\n    swApp.SendMsgToUser2 Err.Description, swMessageBoxIcon_e.swMbStop, swMessageBoxBtn_e.swMbOk\nfinally_:\n\nEnd Sub\n\nFunction GetCutListPropertyManager(model As SldWorks.ModelDoc2) As SldWorks.CustomPropertyManager\n\n    Dim swFeat As SldWorks.Feature\n    \n    Set swFeat = model.FirstFeature\n    \n    While Not swFeat Is Nothing\n        \n        If swFeat.GetTypeName2() = "CutListFolder" Then\n            Set GetCutListPropertyManager = swFeat.CustomPropertyManager\n            Exit Function\n        End If\n\n        Set swFeat = swFeat.GetNextFeature\n        \n    Wend\n    \nEnd Function\n\nSub CopyProperties(srcPrpMgr As SldWorks.CustomPropertyManager, targPrpMgr As SldWorks.CustomPropertyManager, vPrpNames As Variant)\n\n    If IsEmpty(vPrpNames) Then\n        vPrpNames = srcPrpMgr.GetNames()\n    End If\n    \n    If Not IsEmpty(vPrpNames) Then\n    \n        For i = 0 To UBound(vPrpNames)\n                        \n            prpName = vPrpNames(i)\n\n            Dim prpVal As String\n            Dim prpResVal As String\n                        \n            srcPrpMgr.Get5 prpName, False, prpVal, prpResVal, False\n            \n            Dim targVal As String\n            targVal = IIf(COPY_RES_VAL, prpResVal, prpVal)\n            \n            targPrpMgr.Add2 prpName, swCustomInfoType_e.swCustomInfoText, targVal\n            targPrpMgr.Set prpName, targVal\n            \n        Next\n        \n    Else\n        Err.Raise vbError, "", "No properties to copy"\n    End If\n    \nEnd Sub\n')),(0,n.kt)("h2",{id:"configuration"},"Configuration"),(0,n.kt)("p",null,"Macro can be configured by changing the constants"),(0,n.kt)("h3",{id:"properties-scope"},"Properties Scope"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"CONF_SPEC_PRP")," constant sets the target properties scope."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"True to copy properties to configuration specific tab"),(0,n.kt)("li",{parentName:"ul"},"False to copy to Custom tab")),(0,n.kt)("h3",{id:"properties-source"},"Properties Source"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"COPY_RES_VAL")," constant sets the property source"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"True to copy resolved values\n")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Resolved values copied to custom properties",src:o(92350).Z,width:"757",height:"476"})," { width=500 }"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"False to copy expressions")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Expression are copied to custom properties",src:o(52553).Z,width:"758",height:"478"})," { width=500 }"),(0,n.kt)("h3",{id:"properties-list"},"Properties List"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"PROPERTIES")," array contains list of properties to copy"),(0,n.kt)("p",null,"Copy specified properties"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},'Sub Init(Optional dummy As Variant = Empty)\n    PROPERTIES = Array("Prp1", "Prp2", "Prp3") \'Copy Prp1, Prp2, Prp3\nEnd Sub\n')),(0,n.kt)("p",null,"Copy all properties"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-vb"},"Sub Init(Optional dummy As Variant = Empty)\n    PROPERTIES = Empty\nEnd Sub\n")))}m.isMDXComponent=!0},52553:(e,t,o)=>{o.d(t,{Z:()=>r});const r=o.p+"assets/images/copied-expressions-2148888722d44364f2e1a79cf1df5545.png"},92350:(e,t,o)=>{o.d(t,{Z:()=>r});const r=o.p+"assets/images/copied-property-values-8b8a75b178af3e02906e7726ac78a90a.png"}}]);