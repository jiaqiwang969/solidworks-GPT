"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[49171],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=d(t),f=r,b=m["".concat(l,".").concat(f)]||m[f]||u[f]||s;return t?o.createElement(b,i(i({ref:n},c),{},{components:t})):o.createElement(b,i({ref:n},c))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[m]="string"==typeof e?e:r,i[1]=a;for(var d=2;d<s;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},11329:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var o=t(87462),r=(t(67294),t(3905));const s={title:"Save the selected body into external file using SOLIDWORKS API",caption:"Save Body To File",description:"VBA example to serialize the selected body as binary file using SOLIDWORKS API",labels:["serialize","com stream","save body"]},i=void 0,a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/save-body-to-file/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/save-body-to-file/index",title:"Save the selected body into external file using SOLIDWORKS API",description:"VBA example to serialize the selected body as binary file using SOLIDWORKS API",source:"@site/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/save-body-to-file/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/save-body-to-file",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/save-body-to-file/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/save-body-to-file/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/save-body-to-file/index.md",tags:[],version:"current",frontMatter:{title:"Save the selected body into external file using SOLIDWORKS API",caption:"Save Body To File",description:"VBA example to serialize the selected body as binary file using SOLIDWORKS API",labels:["serialize","com stream","save body"]},sidebar:"tutorialSidebar",previous:{title:"Macro to save all opened documents silently using SOLIDWORKS API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/save-all-silently/"},next:{title:"VBA macro to scale the geometry of the imported features using SOLIDWORKS API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/scale-imported-part/"}},l={},d=[],c={toc:d},m="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This VBA example demonstrates how to serialize the selected body (surface or solid) into the COM Stream using SOLIDWORKS API and store that in the external binary file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Imports SolidWorks.Interop.sldworks\nImports System.IO\nImports System.Runtime.InteropServices\nImports System.Runtime.InteropServices.ComTypes\n\nModule Module1\n\n    Declare Function CreateStreamOnHGlobal Lib "ole32" (ByVal hGlobal As IntPtr, ByVal fDeleteOnRelease As Boolean, ByRef ppstm As IStream) As Long\n\n    Const FILE_PATH As String = "D:\\body.dat"\n\n    Sub Main()\n\n        Dim app As ISldWorks = CreateObject("SldWorks.Application")\n        app.Visible = True\n\n        Dim model As IModelDoc2\n        model = app.ActiveDoc\n\n        If Not model Is Nothing Then\n\n            Dim body As IBody2 = model.ISelectionManager.GetSelectedObject6(1, -1)\n\n            If Not body Is Nothing Then\n                SaveBodyToFile(body, FILE_PATH)\n            Else\n                Throw New Exception("Please select body to export")\n            End If\n\n        Else\n            Throw New Exception("Please open the model")\n        End If\n\n    End Sub\n\n    Sub SaveBodyToFile(body As IBody2, filePath As String)\n\n        Dim stream As IStream = Nothing\n\n        CreateStreamOnHGlobal(IntPtr.Zero, True, stream)\n        body.Save(stream)\n\n        Dim comStream = New ComStream(stream, False, False)\n\n        Using fileStream = File.Create(filePath)\n            comStream.Seek(0, SeekOrigin.Begin)\n            comStream.CopyTo(fileStream)\n        End Using\n\n    End Sub\n\nEnd Module\n\nPublic Class ComStream\n    Inherits Stream\n\n    Private ReadOnly m_ComStream As IStream\n    Private ReadOnly m_Commit As Boolean\n    Private m_IsWritable As Boolean\n\n    Public Sub New(ByRef comStream As IStream, writable As Boolean, Optional commit As Boolean = True)\n\n        If comStream Is Nothing Then\n            Throw New ArgumentNullException(NameOf(comStream))\n        End If\n\n        m_ComStream = comStream\n        m_IsWritable = writable\n        m_Commit = commit\n\n    End Sub\n\n    Public Overrides ReadOnly Property CanRead() As Boolean\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public Overrides ReadOnly Property CanSeek() As Boolean\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public Overrides ReadOnly Property CanWrite() As Boolean\n        Get\n            Return m_IsWritable\n        End Get\n    End Property\n\n    Public Overrides ReadOnly Property Length As Long\n        Get\n            Const STATSFLAG_NONAME As Integer = 1\n\n            Dim stats As ComTypes.STATSTG = Nothing\n            m_ComStream.Stat(stats, STATSFLAG_NONAME)\n\n            Return stats.cbSize\n        End Get\n    End Property\n\n    Public Overrides Property Position() As Long\n        Get\n            Return Seek(0, SeekOrigin.Current)\n        End Get\n        Set(ByVal Value As Long)\n            Seek(Value, SeekOrigin.Begin)\n        End Set\n    End Property\n\n    Public Overrides Sub Flush()\n        If m_Commit Then\n            Const STGC_DEFAULT As Integer = 0\n            m_ComStream.Commit(STGC_DEFAULT)\n        End If\n    End Sub\n\n    Public Overrides Sub SetLength(ByVal Value As Long)\n        m_ComStream.SetSize(Value)\n    End Sub\n\n    Public Overrides Sub Write(buffer() As Byte, offset As Integer, count As Integer)\n        If offset <> 0 Then\n            Dim bufferSize As Integer\n            bufferSize = buffer.Length - offset\n            Dim tmpBuffer(bufferSize) As Byte\n            Array.Copy(buffer, offset, tmpBuffer, 0, bufferSize)\n            m_ComStream.Write(tmpBuffer, bufferSize, Nothing)\n        Else\n            m_ComStream.Write(buffer, count, Nothing)\n        End If\n    End Sub\n\n    Public Overrides Function Read(buffer() As Byte, offset As Integer, count As Integer) As Integer\n\n        Dim bytesRead As Integer = 0\n        Dim boxBytesRead As Object = bytesRead\n        Dim hObject As GCHandle\n\n        Try\n            hObject = GCHandle.Alloc(boxBytesRead, GCHandleType.Pinned)\n            Dim pBytesRead As IntPtr = hObject.AddrOfPinnedObject()\n\n            If offset <> 0 Then\n                Dim tmpBuffer(count - 1) As Byte\n                m_ComStream.Read(tmpBuffer, count, pBytesRead)\n                bytesRead = CInt(boxBytesRead)\n                Array.Copy(tmpBuffer, 0, buffer, offset, bytesRead)\n            Else\n                m_ComStream.Read(buffer, count, pBytesRead)\n                bytesRead = CInt(boxBytesRead)\n            End If\n\n        Finally\n            If hObject.IsAllocated Then\n                hObject.Free()\n            End If\n        End Try\n\n        Return bytesRead\n\n    End Function\n\n    Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long\n\n        Dim curPosition As Long = 0\n        Dim boxCurPosition As Object = curPosition\n        Dim hObject As GCHandle\n\n        Try\n            hObject = GCHandle.Alloc(boxCurPosition, GCHandleType.Pinned)\n            Dim pCurPosition As IntPtr = hObject.AddrOfPinnedObject()\n\n            m_ComStream.Seek(offset, origin, pCurPosition)\n            curPosition = CLng(boxCurPosition)\n        Finally\n            If hObject.IsAllocated Then\n                hObject.Free()\n            End If\n        End Try\n\n        Return curPosition\n    End Function\n\n    Protected Overrides Sub Dispose(ByVal disposing As Boolean)\n        Try\n            If disposing Then\n                m_IsWritable = False\n            End If\n        Finally\n            MyBase.Dispose(disposing)\n        End Try\n    End Sub\n\n    Protected Overrides Sub Finalize()\n        Dispose(False)\n    End Sub\n\nEnd Class\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vba"},'Const FILE_PATH As String = "D:\\body.dat"\n\nPrivate Declare PtrSafe Function CreateStreamOnHGlobal Lib "ole32" (ByVal hGlobal As LongPtr, ByVal fDeleteOnRelease As Long, ByRef ppstm As Any) As Long\nPrivate Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As Long\nPrivate Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As Long\nPrivate Declare PtrSafe Function GlobalSize Lib "kernel32" (ByVal hMem As LongPtr) As Long\nPrivate Declare PtrSafe Function GetHGlobalFromStream Lib "ole32" (ByVal ppstm As LongPtr, hGlobal As LongPtr) As Long\nPrivate Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef Destination As Any, ByRef Source As Any, ByVal Length As Long)\n    \nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    Set swModel = swApp.ActiveDoc\n    \n    If Not swModel Is Nothing Then\n    \n        Dim swBody As SldWorks.Body2\n        Set swBody = swModel.SelectionManager.GetSelectedObject6(1, -1)\n        \n        If Not swBody Is Nothing Then\n            SaveBodyToFile swBody, FILE_PATH\n        Else\n            MsgBox "Please select body to export"\n        End If\n    \n    Else\n        MsgBox "Please open the model"\n    End If\n    \nEnd Sub\n\nSub SaveBodyToFile(body As SldWorks.Body2, filePath As String)\n    \n    Dim comStream As IUnknown\n            \n    If CreateStreamOnHGlobal(0, 0, comStream) Then\n        Err.Raise vbError, "", "Failed to create new stream"\n    End If\n    \n    body.Save comStream\n    \n    Dim buff() As Byte\n\n    buff = GetArrayFromComStream(comStream)\n    \n    WriteByteArrToFile filePath, buff\n    \nEnd Sub\n\nPrivate Function GetArrayFromComStream(comStream As IUnknown) As Byte()\n  \n    Dim buffer() As Byte\n  \n    Dim hMem As LongPtr\n    Dim lpMem As LongPtr\n    Dim bytesCount As Long\n     \n    If Not comStream Is Nothing Then\n     \n        If GetHGlobalFromStream(ByVal ObjPtr(comStream), hMem) = 0 Then\n            \n            bytesCount = GlobalSize(hMem)\n            \n            If bytesCount > 0 Then\n                \n                lpMem = GlobalLock(hMem)\n                \n                If lpMem <> 0 Then\n                    ReDim buffer(0 To bytesCount - 1)\n                    CopyMemory buffer(0), ByVal lpMem, bytesCount\n                    GlobalUnlock hMem\n                    GetArrayFromComStream = buffer\n                Else\n                    Err.Raise vbError, "", "Failed to lock memory"\n                End If\n            Else\n                Err.Raise vbError, "", "Stream is empty"\n            End If\n        Else\n            Err.Raise vbError, "", "Failed to get handler from stream"\n        End If\n    Else\n        Err.Raise vbError, "", "Stream is null"\n    End If\n     \nEnd Function\n\nFunction WriteByteArrToFile(filePath As String, buffer() As Byte)\n\n    Dim fileNmb As Integer\n    fileNmb = FreeFile\n    \n    Open filePath For Binary Access Write As #fileNmb\n    Put #fileNmb, 1, buffer\n    Close #fileNmb\n    \nEnd Function\n')))}u.isMDXComponent=!0}}]);