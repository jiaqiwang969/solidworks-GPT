"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[78714],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>k});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},w=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=d(t),w=s,k=p["".concat(c,".").concat(w)]||p[w]||u[w]||o;return t?r.createElement(k,i(i({ref:n},l),{},{components:t})):r.createElement(k,i({ref:n},l))}));function k(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,i=new Array(o);i[0]=w;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[p]="string"==typeof e?e:s,i[1]=a;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}w.displayName="MDXCreateElement"},15315:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=t(87462),s=(t(67294),t(3905));const o={caption:"\u83b7\u53d6\u6d3e\u751f\u96f6\u4ef6\u4e2d\u5bf9\u5e94\u7684\u5b9e\u4f53",title:"\u4f7f\u7528SOLIDWORKS API\u83b7\u53d6\u6d3e\u751f\u96f6\u4ef6\u4e2d\u7684\u5bf9\u5e94\u5b9e\u4f53\uff08\u9762\u3001\u8fb9\u548c\u9876\u70b9\uff09"},i=void 0,a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/derived-part-get-corresponding-entity/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/derived-part-get-corresponding-entity/index",title:"\u4f7f\u7528SOLIDWORKS API\u83b7\u53d6\u6d3e\u751f\u96f6\u4ef6\u4e2d\u7684\u5bf9\u5e94\u5b9e\u4f53\uff08\u9762\u3001\u8fb9\u548c\u9876\u70b9\uff09",description:"VBA\u5b8f\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u5728\u6d3e\u751f\u96f6\u4ef6\u4e2d\u67e5\u627e\u8f93\u5165\u96f6\u4ef6\u7684\u5bf9\u5e94\u5b9e\u4f53",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/derived-part-get-corresponding-entity/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/derived-part-get-corresponding-entity",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/derived-part-get-corresponding-entity/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/derived-part-get-corresponding-entity/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/derived-part-get-corresponding-entity/index.md",tags:[],version:"current",frontMatter:{caption:"\u83b7\u53d6\u6d3e\u751f\u96f6\u4ef6\u4e2d\u5bf9\u5e94\u7684\u5b9e\u4f53",title:"\u4f7f\u7528SOLIDWORKS API\u83b7\u53d6\u6d3e\u751f\u96f6\u4ef6\u4e2d\u7684\u5bf9\u5e94\u5b9e\u4f53\uff08\u9762\u3001\u8fb9\u548c\u9876\u70b9\uff09"},sidebar:"tutorialSidebar",previous:{title:"index",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/delete-rolledback-features/"},next:{title:"\u4f7f\u7528\u8be6\u7ec6\u6a21\u5f0f\u4fdd\u5b58SOLIDWORKS\u7ed8\u56fe",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/detailing-mode-save-model-data/"}},c={},d=[{value:"VBA\u5b8f\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u5728\u6d3e\u751f\u96f6\u4ef6\u4e2d\u67e5\u627e\u8f93\u5165\u96f6\u4ef6\u7684\u5bf9\u5e94\u5b9e\u4f53",id:"vba\u5b8f\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528solidworks-api\u5728\u6d3e\u751f\u96f6\u4ef6\u4e2d\u67e5\u627e\u8f93\u5165\u96f6\u4ef6\u7684\u5bf9\u5e94\u5b9e\u4f53",level:2},{value:"\u8fd0\u884c\u5b8f",id:"\u8fd0\u884c\u5b8f",level:2}],l={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,s.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"vba\u5b8f\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528solidworks-api\u5728\u6d3e\u751f\u96f6\u4ef6\u4e2d\u67e5\u627e\u8f93\u5165\u96f6\u4ef6\u7684\u5bf9\u5e94\u5b9e\u4f53"},"VBA\u5b8f\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u5728\u6d3e\u751f\u96f6\u4ef6\u4e2d\u67e5\u627e\u8f93\u5165\u96f6\u4ef6\u7684\u5bf9\u5e94\u5b9e\u4f53"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://help.solidworks.com/2019/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.IPartDoc~InsertPart3.html"},"IPartDoc::InsertPart3")," API\u5141\u8bb8\u5c06\u6d3e\u751f\u96f6\u4ef6\u63d2\u5165\u5230\u53e6\u4e00\u4e2a\u96f6\u4ef6\u4e2d\u3002\u7136\u800c\uff0c\u4e0e",(0,s.kt)("a",{parentName:"p",href:"/docs/codestack/solidworks-api/document/assembly/context#converting-the-pointers"},"\u7ec4\u4ef6"),"\u7c7b\u4f3c\uff0c\u627e\u5230\u8f93\u5165\u96f6\u4ef6\u7684\u5bf9\u5e94\u5b9e\u4f53\u7684API\u662f\u4e0d\u53ef\u7528\u7684\u3002"),(0,s.kt)("p",null,"\u8fd9\u4e2aVBA\u5b8f\u6f14\u793a\u4e86\u4e00\u4e2a\u6027\u80fd\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u9650\u5236\u3002"),(0,s.kt)("h2",{id:"\u8fd0\u884c\u5b8f"},"\u8fd0\u884c\u5b8f"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u6253\u5f00\u6e90\u96f6\u4ef6\uff08\u8fd9\u662f\u8981\u63d2\u5165\u5230\u53e6\u4e00\u4e2a\u96f6\u4ef6\u4e2d\u7684\u96f6\u4ef6\uff09\u3002\u6b64\u96f6\u4ef6\u5fc5\u987b\u5df2\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u5b9e\u4f53\uff08\u9762\u3001\u8fb9\u3001\u9876\u70b9\uff09\u3002\u5982\u679c\u662f\u591a\u5b9e\u4f53\u96f6\u4ef6\uff0c\u5219\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u5b9e\u4f53\u4e2d\u8fdb\u884c\u9009\u62e9\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u8fd0\u884c\u5b8f\u3002\u5b8f\u5c06\u7d22\u5f15\u8f93\u5165\u5e76\u505c\u6b62\u6267\u884c\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u6253\u5f00\u6216\u521b\u5efa\u9700\u8981\u63d2\u5165\u6e90\u96f6\u4ef6\u7684\u65b0\u96f6\u4ef6\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u7ee7\u7eed\u6267\u884c\u5b8f\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u7ed3\u679c\u5c06\u63d2\u5165\u6d3e\u751f\u96f6\u4ef6\uff0c\u5e76\u9009\u62e9\u6240\u6709\u5bf9\u5e94\u7684\u5b9e\u4f53\u3002")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swSrcModel As SldWorks.ModelDoc2\n    \n    Set swSrcModel = swApp.ActiveDoc\n    \n    If swSrcModel.GetType() <> swDocumentTypes_e.swDocPART Then\n        Err.Raise vbError, "", "\u4ec5\u652f\u6301\u96f6\u4ef6"\n    End If\n    \n    Dim trackDefId As Integer\n    trackDefId = TrackSelectedEntities(swSrcModel)\n    \n    Stop\n    \n    Dim swTargModel As SldWorks.ModelDoc2\n    Set swTargModel = swApp.ActiveDoc\n    \n    Dim swTargPart As SldWorks.PartDoc\n    Set swTargPart = swTargModel\n    \n    Dim swDerPartFeat As SldWorks.Feature\n    \n    Set swDerPartFeat = swTargPart.InsertPart3(swSrcModel.GetPathName(), swInsertPartOptions_e.swInsertPartImportSolids, swSrcModel.ConfigurationManager.ActiveConfiguration.Name)\n    \n    Dim vTrackedEnts As Variant\n    vTrackedEnts = GetTrackedEntitites(swTargModel, swDerPartFeat, trackDefId)\n    \n    If Not IsEmpty(vTrackedEnts) Then\n        swTargModel.Extension.MultiSelect2 vTrackedEnts, False, Nothing\n    Else\n        Err.Raise vbError, "", "\u672a\u627e\u5230\u8ddf\u8e2a\u7684\u5b9e\u4f53"\n    End If\n    \nEnd Sub\n\nFunction TrackSelectedEntities(model As SldWorks.ModelDoc2) As Integer\n    \n    Dim trackDefId As Integer\n    \n    trackDefId = swApp.RegisterTrackingDefinition("_DerivedPartTrack_")\n    \n    Dim i As Integer\n    \n    For i = 1 To model.SelectionManager.GetSelectedObjectCount2(-1)\n            \n        Select Case model.SelectionManager.GetSelectedObjectType3(i, -1)\n            Case swSelectType_e.swSelFACES\n                Dim swFace As SldWorks.Face2\n                Set swFace = model.SelectionManager.GetSelectedObject6(i, -1)\n                If swFace.SetTrackingID(trackDefId, i) <> swTrackingIDError_e.swTrackingIDError_NoError Then\n                    Err.Raise vbError, "", "\u8ddf\u8e2a\u9762\u5931\u8d25"\n                End If\n            Case swSelectType_e.swSelEDGES\n                Dim swEdge As SldWorks.Edge\n                Set swEdge = model.SelectionManager.GetSelectedObject6(i, -1)\n                If swEdge.SetTrackingID(trackDefId, i) <> swTrackingIDError_e.swTrackingIDError_NoError Then\n                    Err.Raise vbError, "", "\u8ddf\u8e2a\u8fb9\u5931\u8d25"\n                End If\n            Case swSelectType_e.swSelVERTICES\n                Dim swVertex As SldWorks.Vertex\n                Set swVertex = model.SelectionManager.GetSelectedObject6(i, -1)\n                If swVertex.SetTrackingID(trackDefId, i) <> swTrackingIDError_e.swTrackingIDError_NoError Then\n                    Err.Raise vbError, "", "\u8ddf\u8e2a\u9876\u70b9\u5931\u8d25"\n                End If\n            Case Else\n                Err.Raise vbError, "", "\u4ec5\u652f\u6301\u9762\u3001\u8fb9\u548c\u9876\u70b9"\n        End Select\n        \n    Next\n    \n    TrackSelectedEntities = trackDefId\n    \nEnd Function\n\nFunction GetTrackedEntitites(model As SldWorks.ModelDoc2, derFeatPart As SldWorks.Feature, trackDefId As Integer) As Variant\n\n    Dim isInit As Boolean\n    isInit = False\n    Dim swEnts() As SldWorks.Entity\n    \n    Dim searchTypes(2) As Integer\n    searchTypes(0) = swTopoEntity_e.swTopoFace\n    searchTypes(1) = swTopoEntity_e.swTopoEdge\n    searchTypes(2) = swTopoEntity_e.swTopoVertex\n    \n    Dim vBodies As Variant\n    vBodies = GetFeatureBodies(derFeatPart)\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(vBodies)\n    \n        Dim vTrackedEnts As Variant\n        Dim swBody As SldWorks.Body2\n        Set swBody = vBodies(i)\n        \n        vTrackedEnts = model.Extension.FindTrackedObjects(trackDefId, swBody, searchTypes, Empty)\n        \n        If Not IsEmpty(vTrackedEnts) Then\n            If Not isInit Then\n                isInit = True\n                ReDim swEnts(UBound(vTrackedEnts))\n            Else\n                ReDim Preserve swEnts(UBound(swEnts) + UBound(vTrackedEnts) + 1)\n            End If\n            \n            Dim j As Integer\n            \n            For j = 0 To UBound(vTrackedEnts)\n                Dim swEnt As SldWorks.Entity\n                Set swEnt = vTrackedEnts(j)\n                Set swEnts(UBound(swEnts) - UBound(vTrackedEnts) + j) = swEnt\n            Next\n            \n        End If\n    \n    Next\n\n    If isInit Then\n        GetTrackedEntitites = swEnts\n    Else\n        GetTrackedEntitites = Empty\n    End If\n\nEnd Function\n\nFunction GetFeatureBodies(feat As SldWorks.Feature) As Variant\n    \n    Dim isInit As Boolean\n    isInit = False\n    \n    Dim swBodies() As SldWorks.Body2\n\n    Dim i As Integer\n    \n    Dim vFaces As Variant\n    \n    vFaces = feat.GetFaces\n    \n    For i = 0 To UBound(vFaces)\n                \n        Dim swFace As SldWorks.Face2\n    \n        Set swFace = vFaces(i)\n        \n        Dim swBody As SldWorks.Body2\n        \n        Set swBody = swFace.GetBody\n        \n            If Not isInit Then\n                ReDim swBodies(0)\n                Set swBodies(0) = swBody\n                isInit = True\n            Else\n                If Not Contains(swBodies, swBody) Then\n                    ReDim Preserve swBodies(UBound(swBodies) + 1)\n                    Set swBodies(UBound(swBodies)) = swBody\n                End If\n            End If\n    \n    Next\n\n    If isInit Then\n        GetFeatureBodies = swBodies\n    Else\n        GetFeatureBodies = Empty\n    End If\n\nEnd Function\n\nFunction Contains(vArr As Variant, item As Object) As Boolean\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(vArr)\n        If vArr(i) Is item Then\n            Contains = True\n            Exit Function\n        End If\n    Next\n    \n    Contains = False\n    \nEnd Function\n')))}u.isMDXComponent=!0}}]);