"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[21909],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>l});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},s=Object.keys(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var m=r.createContext({}),p=function(n){var e=r.useContext(m),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},u=function(n){var e=p(n.components);return r.createElement(m.Provider,{value:e},n.children)},c="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},D=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,s=n.originalType,m=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),c=p(t),D=o,l=c["".concat(m,".").concat(D)]||c[D]||d[D]||s;return t?r.createElement(l,a(a({ref:e},u),{},{components:t})):r.createElement(l,a({ref:e},u))}));function l(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var s=t.length,a=new Array(s);a[0]=D;var i={};for(var m in e)hasOwnProperty.call(e,m)&&(i[m]=e[m]);i.originalType=n,i[c]="string"==typeof n?n:o,a[1]=i;for(var p=2;p<s;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}D.displayName="MDXCreateElement"},3016:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const s={title:"\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u8bfb\u53d6\u6240\u6709\u81ea\u5b9a\u4e49\u5c5e\u6027",image:"properties-list.png",labels:["\u8bfb\u53d6\u5c5e\u6027","\u81ea\u5b9a\u4e49\u5c5e\u6027"]},a=void 0,i={unversionedId:"codestack/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/index",id:"codestack/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/index",title:"\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u8bfb\u53d6\u6240\u6709\u81ea\u5b9a\u4e49\u5c5e\u6027",description:"SOLIDWORKS\u81ea\u5b9a\u4e49\u5c5e\u6027{ width=550 }",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/index.md",sourceDirName:"codestack/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties",slug:"/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/index.md",tags:[],version:"current",frontMatter:{title:"\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u8bfb\u53d6\u6240\u6709\u81ea\u5b9a\u4e49\u5c5e\u6027",image:"properties-list.png",labels:["\u8bfb\u53d6\u5c5e\u6027","\u81ea\u5b9a\u4e49\u5c5e\u6027"]},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u8bfb\u53d6\u6240\u6709\u4e0d\u53ef\u89c1\u7684\u81ea\u5b9a\u4e49\u5c5e\u6027",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-invisible-properties/"},next:{title:"\u4f7f\u7528\u6587\u6863\u7ba1\u7406\u5668 API \u5c06\u81ea\u5b9a\u4e49\u5c5e\u6027\u5199\u5165\u6240\u6709\u6765\u6e90",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-document-manager-api/document/data-storage/custom-properties/write-all-properties/"}},m={},p=[],u={toc:p},c="wrapper";function d(n){let{components:e,...s}=n;return(0,o.kt)(c,(0,r.Z)({},u,s,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"SOLIDWORKS\u81ea\u5b9a\u4e49\u5c5e\u6027",src:t(30805).Z,width:"1021",height:"685"}),"{ width=550 }"),(0,o.kt)("p",null,"\u8fd9\u4e2aVBA\u5b8f\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u4ece\u6240\u6709\u6765\u6e90\uff08\u901a\u7528\u6587\u4ef6\u5c5e\u6027\u3001\u914d\u7f6e\u7279\u5b9a\u5c5e\u6027\u548c\u5207\u5272\u5217\u8868\u9879\u5c5e\u6027\uff09\u8bfb\u53d6\u6240\u6709\u81ea\u5b9a\u4e49\u5c5e\u6027\u3002"),(0,o.kt)("p",null,"\u6240\u6709\u7684\u7ed3\u679c\u4ee5\u4ee5\u4e0b\u683c\u5f0f\u8f93\u51fa\u5230VBA\u7f16\u8f91\u5668\u7684\u5373\u65f6\u7a97\u53e3\u4e2d\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\u901a\u7528\u81ea\u5b9a\u4e49\u5c5e\u6027\n    \u5c5e\u6027\uff1aApprovedDate\n    \u503c/\u6587\u672c\u8868\u8fbe\u5f0f\uff1a12/09/2019\n    \u8bc4\u4f30\u503c\uff1a12/09/2019\n    \u7c7b\u578b\uff1a\u65e5\u671f\n\n\u914d\u7f6e\u7279\u5b9a\u5c5e\u6027\n    B\n        \u5c5e\u6027\uff1aApprovedDate\n        \u503c/\u6587\u672c\u8868\u8fbe\u5f0f\uff1a12/09/2019\n        \u8bc4\u4f30\u503c\uff1a12/09/2019\n        \u7c7b\u578b\uff1a\u65e5\u671f\n\n    A\n        \u5c5e\u6027\uff1aApprovedDate\n        \u503c/\u6587\u672c\u8868\u8fbe\u5f0f\uff1a12/09/2019\n        \u8bc4\u4f30\u503c\uff1a12/09/2019\n        \u7c7b\u578b\uff1a\u65e5\u671f\n\n\u5207\u5272\u5217\u8868\u5c5e\u6027\n    B\n            \u5c5e\u6027\uff1aBounding Box Length\n            \u503c/\u6587\u672c\u8868\u8fbe\u5f0f\uff1a"SW-Bounding Box Length@@@Sheet<1>@Part3.SLDPRT"\n            \u8bc4\u4f30\u503c\uff1a100\n            \u7c7b\u578b\uff1a\u6587\u672c\n...\n\n    A\n            \u5c5e\u6027\uff1aBounding Box Length\n            \u503c/\u6587\u672c\u8868\u8fbe\u5f0f\uff1a"SW-Bounding Box Length@@@Sheet<1>@CS-02.SLDPRT"\n            \u8bc4\u4f30\u503c\uff1a150\n            \u7c7b\u578b\uff1a\u6587\u672c\n...\n')),(0,o.kt)("p",null,"\u5728",(0,o.kt)("em",{parentName:"p"},"FILE_PATH"),"\u5e38\u91cf\u4e2d\u6307\u5b9a\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Const SW_DM_KEY As String = "\u60a8\u7684\u8bb8\u53ef\u8bc1\u5bc6\u94a5"\n\nConst FILE_PATH As String = "C:\\SampleModel.SLDPRT"\n\nDim swDmClassFactory As SwDocumentMgr.swDmClassFactory\nDim swDmApp As SwDocumentMgr.SwDMApplication\n\nSub main()\n\n    Set swDmClassFactory = CreateObject("SwDocumentMgr.SwDMClassFactory")\n    \n    If Not swDmClassFactory Is Nothing Then\n        \n        Set swDmApp = swDmClassFactory.GetApplication(SW_DM_KEY)\n        Dim swDmDoc As SwDocumentMgr.SwDMDocument19\n        Set swDmDoc = OpenDocument(FILE_PATH, True)\n        \n        PrintGeneralProperties swDmDoc\n        PrintConfigurationSpecificProperties swDmDoc\n        PrintCutListProperties swDmDoc\n        \n    Else\n        MsgBox "\u672a\u5b89\u88c5\u6587\u6863\u7ba1\u7406\u5668SDK"\n    End If\n    \nEnd Sub\n\nSub PrintGeneralProperties(dmDoc As SwDocumentMgr.SwDMDocument19)\n    \n    Dim vNames As Variant\n    Dim vTypes As Variant\n    Dim vLinkedTo As Variant\n    Dim vValues As Variant\n    \n    dmDoc.GetAllCustomPropertyNamesAndValues vNames, vTypes, vLinkedTo, vValues\n    \n    Debug.Print "\u901a\u7528\u81ea\u5b9a\u4e49\u5c5e\u6027"\n    \n    PrintProperties vNames, vTypes, vLinkedTo, vValues, "    "\n    \nEnd Sub\n\nSub PrintConfigurationSpecificProperties(dmDoc As SwDocumentMgr.SwDMDocument19)\n    \n    Dim vConfNames As Variant\n    vConfNames = dmDoc.ConfigurationManager.GetConfigurationNames()\n    \n    Dim i As Integer\n    \n    Debug.Print "\u914d\u7f6e\u7279\u5b9a\u5c5e\u6027"\n    \n    For i = 0 To UBound(vConfNames)\n        \n        Dim confName As String\n        confName = vConfNames(i)\n        \n        Dim swDmConf As SwDocumentMgr.SwDMConfiguration13\n        Set swDmConf = dmDoc.ConfigurationManager.GetConfigurationByName(confName)\n        \n        Dim vNames As Variant\n        Dim vTypes As Variant\n        Dim vLinkedTo As Variant\n        Dim vValues As Variant\n        \n        \'\u6ce8\u610f\uff1a\u914d\u7f6e\u5728SW DM API\u4e2d\u89e3\u6790\u548c\u8868\u8fbe\u5f0f\u7684\u987a\u5e8f\u4e0d\u6b63\u786e\uff0c\u6240\u4ee5\u53cd\u8f6c\u53d8\u91cf\n        swDmConf.GetAllCustomPropertyNamesAndValues vNames, vTypes, vValues, vLinkedTo\n                \n        Debug.Print "    " & confName\n        \n        PrintProperties vNames, vTypes, vLinkedTo, vValues, "        "\n        \n    Next\n    \nEnd Sub\n\nSub PrintCutListProperties(dmDoc As SwDocumentMgr.SwDMDocument19)\n\n    Dim vConfNames As Variant\n    vConfNames = dmDoc.ConfigurationManager.GetConfigurationNames()\n    \n    Dim i As Integer\n    \n    Debug.Print "\u5207\u5272\u5217\u8868\u5c5e\u6027"\n    \n    For i = 0 To UBound(vConfNames)\n        \n        Dim confName As String\n        confName = vConfNames(i)\n        \n        Dim swDmConf As SwDocumentMgr.SwDMConfiguration16\n        Set swDmConf = dmDoc.ConfigurationManager.GetConfigurationByName(confName)\n        \n        Dim vCutListItems As Variant\n        vCutListItems = swDmConf.GetCutListItems\n        \n        Debug.Print "    " & confName\n        \n        If Not IsEmpty(vCutListItems) Then\n            \n            Dim j As Integer\n            \n            For j = 0 To UBound(vCutListItems)\n                \n                Dim swDmCutList As SwDocumentMgr.SwDMCutListItem3\n                Set swDmCutList = vCutListItems(j)\n                \n                Dim vNames As Variant\n                Dim prpTypes() As SwDmCustomInfoType\n                Dim prpLinkedTo() As String\n                Dim prpValues() As String\n                    \n                vNames = swDmCutList.GetCustomPropertyNames()\n                \n                If Not IsEmpty(vNames) Then\n                    \n                    ReDim prpTypes(UBound(vNames))\n                    ReDim prpLinkedTo(UBound(vNames))\n                    ReDim prpValues(UBound(vNames))\n                    \n                    Dim k As Integer\n                    \n                    For k = 0 To UBound(vNames)\n                        prpValues(k) = swDmCutList.GetCustomPropertyValue2(CStr(vNames(k)), prpTypes(k), prpLinkedTo(k))\n                    Next\n                    \n                    PrintProperties vNames, prpTypes, prpLinkedTo, prpValues, "            "\n                    \n                End If\n                \n            Next\n        \n        Else\n            Debug.Print "        -\u6ca1\u6709\u5207\u5272\u5217\u8868-"\n        End If\n        \n    Next\n\nEnd Sub\n\nSub PrintProperties(vPrpNames As Variant, vTypes As Variant, vLinkedTo As Variant, vValues As Variant, indent As String)\n    \n    Dim i As Integer\n    \n    If Not IsEmpty(vPrpNames) Then\n    \n        For i = 0 To UBound(vPrpNames)\n            \n            Dim prpName As String\n            prpName = vPrpNames(i)\n            \n            Dim prpVal As String\n            Dim prpResVal As String\n            \n            prpResVal = vValues(i)\n            prpVal = vLinkedTo(i)\n            \n            If prpVal = "" Then\n                prpVal = prpResVal\n            End If\n            \n            Dim prpType As String\n            \n            Select Case vTypes(i)\n                Case SwDmCustomInfoType.swDmCustomInfoDate\n                    prpType = "\u65e5\u671f"\n                Case SwDmCustomInfoType.swDmCustomInfoNumber\n                    prpType = "\u6570\u5b57"\n                Case SwDmCustomInfoType.swDmCustomInfoText\n                    prpType = "\u6587\u672c"\n                Case SwDmCustomInfoType.swDmCustomInfoYesOrNo\n                    prpType = "\u662f/\u5426"\n                Case SwDmCustomInfoType.swDmCustomInfoUnknown\n                    prpType = "\u672a\u77e5"\n            End Select\n            \n            Debug.Print indent & "\u5c5e\u6027\uff1a" & prpName\n            Debug.Print indent & "\u503c/\u6587\u672c\u8868\u8fbe\u5f0f\uff1a" & prpVal\n            Debug.Print indent & "\u8bc4\u4f30\u503c\uff1a" & prpResVal\n            Debug.Print indent & "\u7c7b\u578b\uff1a" & prpType\n            Debug.Print ""\n        Next\n    Else\n        Debug.Print indent & "-\u6ca1\u6709\u5c5e\u6027-"\n    End If\n    \nEnd Sub\n\nFunction OpenDocument(filePath As String, readOnly As Boolean) As SwDocumentMgr.SwDMDocument19\n    \n    Dim openErr As SwDmDocumentOpenError\n    \n    Dim docType As SwDocumentMgr.SwDmDocumentType\n    \n    Dim ext As String\n    ext = LCase(Right(filePath, Len(".SLDXXX")))\n    \n    Select Case ext\n        Case ".sldprt"\n            docType = swDmDocumentPart\n        Case ".sldasm"\n            docType = swDmDocumentAssembly\n        Case ".slddrw"\n            docType = swDmDocumentDrawing\n    End Select\n    \n    Dim swDmDoc As SwDocumentMgr.SwDMDocument19\n    \n    Set swDmDoc = swDmApp.GetDocument(filePath, docType, readOnly, openErr)\n    \n    If swDmDoc Is Nothing Then\n        err.Raise vbError, "", "\u65e0\u6cd5\u6253\u5f00\u6587\u6863\uff1a" & openErr\n    End If\n    \n    Set OpenDocument = swDmDoc\n    \nEnd Function\n')))}d.isMDXComponent=!0},30805:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/properties-list-c1582d565a458a68ab737ab07a2ecfa7.png"}}]);