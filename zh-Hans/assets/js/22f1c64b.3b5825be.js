"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[38815],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),c=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(m.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(t),u=a,g=d["".concat(m,".").concat(u)]||d[u]||p[u]||o;return t?r.createElement(g,i(i({ref:n},l),{},{components:t})):r.createElement(g,i({ref:n},l))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},12897:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const o={title:"\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u5c06\u6c34\u5370\u6dfb\u52a0\u5230\u6a21\u578b\u7684\u7b2c\u4e09\u65b9\u5b58\u50a8",image:"add-watermark-console-output.png",labels:["\u6c34\u5370","\u5b58\u50a8"]},i=void 0,s={unversionedId:"codestack/solidworks-document-manager-api/document/data-storage/third-party/add-watermark/index",id:"codestack/solidworks-document-manager-api/document/data-storage/third-party/add-watermark/index",title:"\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u5c06\u6c34\u5370\u6dfb\u52a0\u5230\u6a21\u578b\u7684\u7b2c\u4e09\u65b9\u5b58\u50a8",description:"\u672c\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u5c06\u6570\u5b57\u6c34\u5370\u6dfb\u52a0\u5230SOLIDWORKS\u6a21\u578b\uff08\u96f6\u4ef6\u3001\u88c5\u914d\u6216\u7ed8\u56fe\uff09\u4e2d\u7684\u7b2c\u4e09\u65b9\u5b58\u50a8\uff08\u6d41\uff09\u3002",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-document-manager-api/document/data-storage/third-party/add-watermark/index.md",sourceDirName:"codestack/solidworks-document-manager-api/document/data-storage/third-party/add-watermark",slug:"/codestack/solidworks-document-manager-api/document/data-storage/third-party/add-watermark/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-document-manager-api/document/data-storage/third-party/add-watermark/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-document-manager-api/document/data-storage/third-party/add-watermark/index.md",tags:[],version:"current",frontMatter:{title:"\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u5c06\u6c34\u5370\u6dfb\u52a0\u5230\u6a21\u578b\u7684\u7b2c\u4e09\u65b9\u5b58\u50a8",image:"add-watermark-console-output.png",labels:["\u6c34\u5370","\u5b58\u50a8"]},sidebar:"tutorialSidebar",previous:{title:"index",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-document-manager-api/document/data-storage/third-party/add-comments/"},next:{title:"\u901a\u8fc7\u6587\u6863\u7ba1\u7406\u5668 API\uff08\u65e0\u9700 SOLIDWORKS\uff09\u5c06\u96f6\u4ef6\u5bfc\u51fa\u4e3a Parasolid",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-document-manager-api/document/export-parasolid/"}},m={},c=[{value:"\u6dfb\u52a0\u6c34\u5370",id:"\u6dfb\u52a0\u6c34\u5370",level:2},{value:"\u8bfb\u53d6\u6c34\u5370",id:"\u8bfb\u53d6\u6c34\u5370",level:2},{value:"Program.cs",id:"programcs",level:3},{value:"ComStream.cs",id:"comstreamcs",level:3}],l={toc:c},d="wrapper";function p(e){let{components:n,...o}=e;return(0,a.kt)(d,(0,r.Z)({},l,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u672c\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS\u6587\u6863\u7ba1\u7406\u5668API\u5c06\u6570\u5b57\u6c34\u5370\u6dfb\u52a0\u5230SOLIDWORKS\u6a21\u578b\uff08\u96f6\u4ef6\u3001\u88c5\u914d\u6216\u7ed8\u56fe\uff09\u4e2d\u7684\u7b2c\u4e09\u65b9\u5b58\u50a8\uff08\u6d41\uff09\u3002"),(0,a.kt)("p",null,"\u6b64\u5e94\u7528\u7a0b\u5e8f\u5b9e\u73b0\u4e3a\u547d\u4ee4\u884c\u7a0b\u5e8f\uff0c\u5177\u6709\u4ee5\u4e0b\u53c2\u6570\u3002"),(0,a.kt)("h2",{id:"\u6dfb\u52a0\u6c34\u5370"},"\u6dfb\u52a0\u6c34\u5370"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"SOLIDWORKS\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84"),(0,a.kt)("li",{parentName:"ul"},"-w - \u8868\u793a\u9700\u8981\u6dfb\u52a0\u6c34\u5370\u7684\u6807\u5fd7"),(0,a.kt)("li",{parentName:"ul"},"\u516c\u53f8\u540d\u79f0 - \u8981\u6dfb\u52a0\u5230\u6c34\u5370\u4e2d\u7684\u516c\u53f8\u540d\u79f0")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"AddWatermark.exe C:\\MyPart.sldprt -w MyCompanyName\n")),(0,a.kt)("p",null,"\u6c34\u5370\u5c06\u5305\u62ec\u516c\u53f8\u540d\u79f0\u3001\u5f53\u524d\u7528\u6237\u540d\u548c\u65f6\u95f4\u6233\u3002"),(0,a.kt)("h2",{id:"\u8bfb\u53d6\u6c34\u5370"},"\u8bfb\u53d6\u6c34\u5370"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"SOLIDWORKS\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84"),(0,a.kt)("li",{parentName:"ul"},"-r - \u8868\u793a\u9700\u8981\u8bfb\u53d6\u6c34\u5370\u7684\u6807\u5fd7")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"AddWatermark.exe C:\\MyPart.sldprt -r MyCompanyName\n")),(0,a.kt)("p",null,"\u7ed3\u679c\u5c06\u5728\u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f\u4e2d\u663e\u793a\u5b58\u50a8\u7684\u6c34\u5370\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u63a7\u5236\u53f0\u4e2d\u7684\u8f93\u51fa\u7ed3\u679c",src:t(26714).Z,width:"846",height:"551"}),"{ width=450 }"),(0,a.kt)("h3",{id:"programcs"},"Program.cs"),(0,a.kt)("p",null,"\u5305\u542b\u7528\u4e8e\u8bfb\u53d6\u548c\u6dfb\u52a0\u6c34\u5370\u7684\u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f\u7684\u8def\u7531\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'using SolidWorks.Interop.swdocumentmgr;\nusing System;\nusing System.IO;\nusing System.Runtime.InteropServices.ComTypes;\nusing System.Xml.Serialization;\nusing ThirdPartyStorage;\n\nnamespace CodeStack\n{\n    public class Watermark\n    {\n        public string CompanyName { get; set; }\n        public string SignedBy { get; set; }\n        public DateTime SignedOn { get; set; }\n    }\n\n    class Program\n    {\n        private const string DM_LIC_KEY = "<Your DM License Key>";\n        private const string STORAGE_NAME = "_CodeStackWatermark";\n\n        static void Main(string[] args)\n        {\n            var filePath = args[0];\n\n            var isWriting = args[1] == "-w";\n\n            var docType = GetDocumentType(filePath);\n            \n            var dmApp = ConnectoToDm(DM_LIC_KEY);\n\n            SwDmDocumentOpenError err;\n            var doc = dmApp.GetDocument(filePath, docType, !isWriting, out err) as SwDMDocument19;\n\n            if (doc != null)\n            {\n                var stream = doc.Get3rdPartyStorage(STORAGE_NAME, isWriting) as IStream;\n\n                try\n                {\n                    if (isWriting)\n                    {\n                        AddWatermark(args[2], stream);\n                    }\n                    else\n                    {\n                        ReadWatermark(stream);\n                    }\n                }\n                catch\n                {\n                    throw;\n                }\n                finally\n                {\n                    doc.Release3rdPartyStorage(STORAGE_NAME);\n\n                    if (isWriting)\n                    {\n                        doc.Save();\n                    }\n\n                    doc.CloseDoc();\n                }\n            }\n            else\n            {\n                throw new NullReferenceException($"Failed to open the document: {err}");\n            }\n        }\n\n        private static void ReadWatermark(IStream stream)\n        {\n            if (stream != null)\n            {\n                using (var comStream = new ComStream(stream, false, false))\n                {\n                    var ser = new XmlSerializer(typeof(Watermark));\n                    var wm = ser.Deserialize(comStream) as Watermark;\n\n                    Console.WriteLine($"Company Name: {wm.CompanyName}");\n                    Console.WriteLine($"Signed By: {wm.SignedBy}");\n                    Console.WriteLine($"Signed On: {wm.SignedOn}");\n                }\n            }\n            else\n            {\n                Console.WriteLine("No watermark");\n            }\n        }\n\n        private static void AddWatermark(string companyName, IStream stream)\n        {\n            var wm = new Watermark()\n            {\n                CompanyName = companyName,\n                SignedBy = Environment.UserName,\n                SignedOn = DateTime.Now\n            };\n\n            using (var comStream = new ComStream(stream, true, false))\n            {\n                var ser = new XmlSerializer(wm.GetType());\n                ser.Serialize(comStream, wm);\n            }\n\n            Console.WriteLine("Watermark is added");\n        }\n\n        private static SwDMApplication ConnectoToDm(string licKey)\n        {\n            var classFact = new SwDMClassFactory();\n            var docMgr = classFact.GetApplication(licKey) as SwDMApplication;\n\n            return docMgr;\n        }\n\n        private static SwDmDocumentType GetDocumentType(string filePath)\n        {\n            var docType = SwDmDocumentType.swDmDocumentUnknown;\n\n            switch (Path.GetExtension(filePath).ToUpper())\n            {\n                case ".SLDPRT":\n                    docType = SwDmDocumentType.swDmDocumentPart;\n                    break;\n                case ".SLDASM":\n                    docType = SwDmDocumentType.swDmDocumentAssembly;\n                    break;\n                case ".SLDDRW":\n                    docType = SwDmDocumentType.swDmDocumentDrawing;\n                    break;\n                default:\n                    throw new NotSupportedException("File type not supported");\n\n            }\n\n            return docType;\n        }\n    }\n}\n\n')),(0,a.kt)("h3",{id:"comstreamcs"},"ComStream.cs"),(0,a.kt)("p",null,"\u5c01\u88c5\u4e86",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/desktop/api/objidl/nn-objidl-istream"},"IStream"),"\u63a5\u53e3\uff0c\u7b80\u5316\u4e86\u4ece.NET\u8bed\u8a00\u8bbf\u95ee\u7684\u8fc7\u7a0b\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'using System;\nusing System.IO;\nusing System.Runtime.InteropServices.ComTypes;\n\nnamespace ThirdPartyStorage\n{\n    public class ComStream : Stream\n    {\n        private readonly IStream m_ComStream;\n        private readonly bool m_Commit;\n\n        private bool m_IsWritable;\n\n        public override bool CanRead\n        {\n            get\n            {\n                return true;\n            }\n        }\n\n        public override bool CanSeek\n        {\n            get\n            {\n                return true;\n            }\n        }\n\n        public override bool CanWrite\n        {\n            get\n            {\n                return m_IsWritable;\n            }\n        }\n\n        public override long Length\n        {\n            get\n            {\n                const int STATSFLAG_NONAME = 1;\n\n                STATSTG statstg;\n\n                m_ComStream.Stat(out statstg, STATSFLAG_NONAME);\n\n                return statstg.cbSize;\n            }\n        }\n\n        public override long Position\n        {\n            get\n            {\n                return Seek(0, SeekOrigin.Current);\n            }\n            set\n            {\n                Seek(value, SeekOrigin.Begin);\n            }\n        }\n\n        public ComStream(IStream comStream, bool writable, bool commit = true)\n        {\n            if (comStream == null)\n            {\n                throw new ArgumentNullException(nameof(comStream));\n            }\n            \n            m_ComStream = comStream;\n            m_Commit = commit;\n            m_IsWritable = writable;\n        }\n\n        public override void Flush()\n        {\n            if (m_Commit)\n            {\n                const int STGC_DEFAULT = 0;\n\n                m_ComStream.Commit(STGC_DEFAULT);\n            }\n        }\n\n        public unsafe override int Read(byte[] buffer, int offset, int count)\n        {\n            if (offset != 0)\n            {\n                throw new NotSupportedException("Offset is not supported");\n            }\n\n            int bytesRead;\n\n            var address = new IntPtr(&bytesRead);\n\n            m_ComStream.Read(buffer, count, address);\n\n            return bytesRead;\n        }\n\n        public unsafe override long Seek(long offset, SeekOrigin origin)\n        {\n            long position = 0;\n\n            var address = new IntPtr(&position);\n\n            m_ComStream.Seek(offset, (int)origin, address);\n\n            return position;\n        }\n\n        public override void SetLength(long value)\n        {\n            m_ComStream.SetSize(value);\n        }\n        \n        public override void Write(byte[] buffer, int offset, int count)\n        {\n            if (offset != 0)\n            {\n                throw new NotSupportedException("Offset is not supported");\n            }\n\n            m_ComStream.Write(buffer, count, IntPtr.Zero);\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            try\n            {\n                if (disposing)\n                {\n                    m_IsWritable = false;\n                }\n            }\n            finally\n            {\n                base.Dispose(disposing);\n            }\n        }\n\n        ~ComStream()\n        {\n            Dispose(false);\n        }\n    }\n}\n\n')))}p.isMDXComponent=!0},26714:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/add-watermark-console-output-5d5ffe797eadb6a998a7443e119c4888.png"}}]);