"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[45238],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>D});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),m=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(p.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),l=m(t),d=o,D=l["".concat(p,".").concat(d)]||l[d]||u[d]||s;return t?r.createElement(D,a(a({ref:n},c),{},{components:t})):r.createElement(D,a({ref:n},c))}));function D(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[l]="string"==typeof e?e:o,a[1]=i;for(var m=2;m<s;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},67307:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>m});var r=t(87462),o=(t(67294),t(3905));const s={title:"Read all invisible custom properties using SOLIDWORKS Document Manager API",caption:"Read All Invisible Custom Properties",description:"VBA example to read and output all invisible custom properties from the specific model using SOLIDWORKS Document Manager API",labels:["invisible","custom property"]},a=void 0,i={unversionedId:"codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-invisible-properties/index",id:"codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-invisible-properties/index",title:"Read all invisible custom properties using SOLIDWORKS Document Manager API",description:"VBA example to read and output all invisible custom properties from the specific model using SOLIDWORKS Document Manager API",source:"@site/docs/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-invisible-properties/index.md",sourceDirName:"codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-invisible-properties",slug:"/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-invisible-properties/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-invisible-properties/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-invisible-properties/index.md",tags:[],version:"current",frontMatter:{title:"Read all invisible custom properties using SOLIDWORKS Document Manager API",caption:"Read All Invisible Custom Properties",description:"VBA example to read and output all invisible custom properties from the specific model using SOLIDWORKS Document Manager API",labels:["invisible","custom property"]},sidebar:"tutorialSidebar",previous:{title:"Excel macro to manage custom properties in SOLIDWORKS files",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/excel-functions/"},next:{title:"Read All Custom Properties using SOLIDWORKS Document Manager API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-document-manager-api/document/data-storage/custom-properties/read-all-properties/"}},p={},m=[],c={toc:m},l="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(l,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'SOLIDWORKS models contain several invisible custom properties, such as $PRP:"SW-File Name", $PRP:"SW-Title". Those are read-only and cannot be modified.'),(0,o.kt)("p",null,"This VBA macro reads and outputs all invisible custom properties from the specified model using SOLIDWORKS Document Manager API. The result is output to the immediate window of the VBA editor in the following format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"...\nSW-Short Date: 12/09/2019 [Text]\nSW-Long Date: Thursday, 12 September 2019 [Text]\nSW-Configuration Name: A [Text]\n...\nSW-Created Date: Tuesday, 10 September 2019 10:46:55 AM [Text]\nSW-Last Saved Date: Thursday, 12 September 2019 8:33:04 PM [Text]\nSW-Last Saved By: artem.taturevych [Text]\n...\nMyProperty: MyValue [Text]\n")),(0,o.kt)("p",null,"Specify the file to read properties from in ",(0,o.kt)("em",{parentName:"p"},"FILE_PATH")," constant."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb"},'Const SW_DM_KEY As String = "Your license key"\n\nConst FILE_PATH As String = "C:\\SampleModel.SLDPRT"\n\nDim swDmClassFactory As SwDocumentMgr.swDmClassFactory\nDim swDmApp As SwDocumentMgr.SwDMApplication\n\nSub main()\n\n    Set swDmClassFactory = CreateObject("SwDocumentMgr.SwDMClassFactory")\n    \n    If Not swDmClassFactory Is Nothing Then\n        \n        Set swDmApp = swDmClassFactory.GetApplication(SW_DM_KEY)\n        Dim swDmDoc As SwDocumentMgr.SwDMDocument19\n        Set swDmDoc = OpenDocument(FILE_PATH, True)\n        \n        Dim vPrpNames As Variant\n        vPrpNames = swDmDoc.GetInvisibleCustomPropertyNames()\n        \n        If Not IsEmpty(vPrpNames) Then\n            \n            Dim i As Integer\n            \n            For i = 0 To UBound(vPrpNames)\n            \n                Dim prpName As String\n                prpName = vPrpNames(i)\n                \n                Dim prpType As SwDmCustomInfoType\n            \n                Dim prpTypeName As String\n                \n                Dim prpVal As String\n                prpVal = swDmDoc.GetInvisibleCustomProperty(prpName, prpType)\n                \n                Select Case prpType\n                    Case SwDmCustomInfoType.swDmCustomInfoDate\n                        prpTypeName = "Date"\n                    Case SwDmCustomInfoType.swDmCustomInfoNumber\n                        prpTypeName = "Number"\n                    Case SwDmCustomInfoType.swDmCustomInfoText\n                        prpTypeName = "Text"\n                    Case SwDmCustomInfoType.swDmCustomInfoYesOrNo\n                        prpTypeName = "YesNo"\n                    Case SwDmCustomInfoType.swDmCustomInfoUnknown\n                        prpTypeName = "Unknown"\n                End Select\n            \n                Debug.Print prpName & ": " & prpVal & " [" & prpTypeName & "]"\n            Next\n            \n        End If\n        \n    Else\n        MsgBox "Document Manager SDK is not installed"\n    End If\n    \nEnd Sub\n\nFunction OpenDocument(filePath As String, readOnly As Boolean) As SwDocumentMgr.SwDMDocument19\n    \n    Dim openErr As SwDmDocumentOpenError\n    \n    Dim docType As SwDocumentMgr.SwDmDocumentType\n    \n    Dim ext As String\n    ext = LCase(Right(filePath, Len(".SLDXXX")))\n    \n    Select Case ext\n        Case ".sldprt"\n            docType = swDmDocumentPart\n        Case ".sldasm"\n            docType = swDmDocumentAssembly\n        Case ".slddrw"\n            docType = swDmDocumentDrawing\n    End Select\n    \n    Dim swDmDoc As SwDocumentMgr.SwDMDocument19\n    \n    Set swDmDoc = swDmApp.GetDocument(filePath, docType, readOnly, openErr)\n    \n    If swDmDoc Is Nothing Then\n        Err.Raise vbError, "", "Failed to open document: " & openErr\n    End If\n    \n    Set OpenDocument = swDmDoc\n    \nEnd Function\n')))}u.isMDXComponent=!0}}]);