"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[37802],{3905:(n,e,o)=>{o.d(e,{Zo:()=>c,kt:()=>y});var t=o(67294);function r(n,e,o){return e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o,n}function s(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.push.apply(o,t)}return o}function a(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?s(Object(o),!0).forEach((function(e){r(n,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))}))}return n}function l(n,e){if(null==n)return{};var o,t,r=function(n,e){if(null==n)return{};var o,t,r={},s=Object.keys(n);for(t=0;t<s.length;t++)o=s[t],e.indexOf(o)>=0||(r[o]=n[o]);return r}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(t=0;t<s.length;t++)o=s[t],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(n,o)&&(r[o]=n[o])}return r}var p=t.createContext({}),i=function(n){var e=t.useContext(p),o=e;return n&&(o="function"==typeof n?n(e):a(a({},e),n)),o},c=function(n){var e=i(n.components);return t.createElement(p.Provider,{value:e},n.children)},d="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(n,e){var o=n.components,r=n.mdxType,s=n.originalType,p=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),d=i(o),u=r,y=d["".concat(p,".").concat(u)]||d[u]||m[u]||s;return o?t.createElement(y,a(a({ref:e},c),{},{components:o})):t.createElement(y,a({ref:e},c))}));function y(n,e){var o=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var s=o.length,a=new Array(s);a[0]=u;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=n,l[d]="string"==typeof n?n:r,a[1]=l;for(var i=2;i<s;i++)a[i]=o[i];return t.createElement.apply(null,a)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},30035:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var t=o(87462),r=(o(67294),o(3905));const s={caption:"Apply Random Colors To Components",title:"Macro to apply random colors to components in SOLIDWORKS assembly",description:"VBA macro to apply random color to all components in the SOLIDWORKS assembly with an option to apply on a component or model level and group by custom property value"},a=void 0,l={unversionedId:"codestack-clone/solidworks-api/document/appearance/color-assembly/index",id:"codestack-clone/solidworks-api/document/appearance/color-assembly/index",title:"Macro to apply random colors to components in SOLIDWORKS assembly",description:"VBA macro to apply random color to all components in the SOLIDWORKS assembly with an option to apply on a component or model level and group by custom property value",source:"@site/docs/codestack-clone/solidworks-api/document/appearance/color-assembly/index.md",sourceDirName:"codestack-clone/solidworks-api/document/appearance/color-assembly",slug:"/codestack-clone/solidworks-api/document/appearance/color-assembly/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-api/document/appearance/color-assembly/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack-clone/solidworks-api/document/appearance/color-assembly/index.md",tags:[],version:"current",frontMatter:{caption:"Apply Random Colors To Components",title:"Macro to apply random colors to components in SOLIDWORKS assembly",description:"VBA macro to apply random color to all components in the SOLIDWORKS assembly with an option to apply on a component or model level and group by custom property value"},sidebar:"tutorialSidebar",previous:{title:"Generate material variants configuration using SOLIDWORKS API",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-api/document/appearance/apply-render-material/"},next:{title:"Macro to remove all colors from SOLIDWORKS document",permalink:"/solidworks-GPT/zh-Hans/docs/codestack-clone/solidworks-api/document/appearance/remove-color/"}},p={},i=[],c={toc:i},d="wrapper";function m(n){let{components:e,...o}=n;return(0,r.kt)(d,(0,t.Z)({},c,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This VBA macro applies a random color on all components of the active assembly."),(0,r.kt)("p",null,"Modify constants of the macro to change the level of the color (component or model level)."),(0,r.kt)("p",null,"If colors is applied to the individual configurations (e.g. ",(0,r.kt)("strong",{parentName:"p"},"ALL_CONFIGS")," = ",(0,r.kt)("strong",{parentName:"p"},"False"),"), documents must have a display state linked to the configuration, otherwise the color cannot be configuration specific"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},"Const COMP_LEVEL As Boolean = True 'True to apply color on the assembly level, False to apply color on a model level\nConst PARTS_ONLY As Boolean = True 'True to only process part components, False to apply color to assemblies as well\nConst ALL_CONFIGS As Boolean = True 'True to apply color to all configurations, False to apply to referenced configuration only\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},"Const PRP_NAME As String = \"Type\" 'Custom property to group color by, Empty string \"\" to not group components\n\nSub InitColors(Optional dummy As Variant = Empty)\n\n    ColorsMap.Add \"Plate\", RGB(255, 0, 0) 'Color all component which custom property 'Type' equals to 'Plate' to Red color\n    ColorsMap.Add \"Beam\", RGB(0, 255, 0) 'Color all component which custom property 'Type' equals to 'Beam' to Green color\n    \nEnd Sub\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Const COMP_LEVEL As Boolean = True\nConst PARTS_ONLY As Boolean = True\nConst ALL_CONFIGS As Boolean = True\nConst PRP_NAME As String = ""\n\nDim swApp As SldWorks.SldWorks\nDim ColorsMap As Object\n\nSub InitColors(Optional dummy As Variant = Empty)\n\n    ColorsMap.Add "Plate", RGB(255, 0, 0)\n    ColorsMap.Add "Beam", RGB(0, 255, 0)\n    \nEnd Sub\n\nSub main()\n\ntry_:\n    \n    On Error GoTo catch_\n    \n    Set ColorsMap = CreateObject("Scripting.Dictionary")\n\n    ColorsMap.CompareMode = vbTextCompare\n\n    InitColors\n\n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    If Not swModel Is Nothing Then\n    \n        If swModel.GetType() = swDocumentTypes_e.swDocASSEMBLY Then\n            \n            Dim swAssy As SldWorks.AssemblyDoc\n            \n            Set swAssy = swModel\n            \n            swAssy.ResolveAllLightWeightComponents True\n            \n            Dim vComps As Variant\n            vComps = swAssy.GetComponents(False)\n            \n            ColorizeComponents vComps\n            \n            swModel.GraphicsRedraw2\n        Else\n            Err.Raise vbError, "", "Only assembly document is supported"\n        End If\n    Else\n        Err.Raise vbError, "", "Open assembly document"\n    End If\n    \n    GoTo finally_\n    \ncatch_:\n    MsgBox Err.Description, vbCritical\nfinally_:\n    \nEnd Sub\n\nSub ColorizeComponents(vComps As Variant)\n    \n    Dim i As Integer\n    \n    Dim processedDocs() As String\n    \n    For i = 0 To UBound(vComps)\n        \n        Dim swComp As SldWorks.Component2\n        Set swComp = vComps(i)\n        \n        Dim swRefModel As SldWorks.ModelDoc2\n            \n        Set swRefModel = swComp.GetModelDoc2()\n        \n        If Not swRefModel Is Nothing Then\n        \n            If Not PARTS_ONLY Or swRefModel.GetType() = swDocumentTypes_e.swDocPART Then\n        \n                Dim docKey As String\n                docKey = LCase(swRefModel.GetPathName())\n                \n                If Not ALL_CONFIGS Then\n                    docKey = docKey & ":" & LCase(swComp.ReferencedConfiguration)\n                End If\n                \n                If COMP_LEVEL Or Not Contains(processedDocs, docKey) Then\n                    \n                    If (Not processedDocs) = -1 Then\n                        ReDim processedDocs(0)\n                    Else\n                        ReDim Preserve processedDocs(UBound(processedDocs) + 1)\n                    End If\n                    \n                    processedDocs(UBound(processedDocs)) = docKey\n                    \n                    Dim color As Long\n                    color = RGB(Int(255 * Rnd), Int(255 * Rnd), Int(255 * Rnd))\n                    \n                    If PRP_NAME <> "" Then\n                        \n                        Dim prpVal As String\n                                    \n                        prpVal = GetModelPropertyValue(swRefModel, swComp.ReferencedConfiguration, PRP_NAME)\n                        \n                        If prpVal <> "" Then\n                        \n                            If ColorsMap.Exists(prpVal) Then\n                                color = ColorsMap(prpVal)\n                            Else\n                                ColorsMap.Add prpVal, color\n                            End If\n                        \n                        End If\n                        \n                    End If\n                    \n                    Dim RGBHex As String\n            \n                    RGBHex = Right("000000" & Hex(color), 6)\n                    \n                    Dim dMatPrps(8) As Double\n                    \n                    dMatPrps(0) = CInt("&H" & Mid(RGBHex, 5, 2)) / 255\n                    dMatPrps(1) = CInt("&H" & Mid(RGBHex, 3, 2)) / 255\n                    dMatPrps(2) = CInt("&H" & Mid(RGBHex, 1, 2)) / 255\n                    dMatPrps(3) = 1\n                    dMatPrps(4) = 1\n                    dMatPrps(5) = 0.5\n                    dMatPrps(6) = 0.3125\n                    dMatPrps(7) = 0\n                    dMatPrps(8) = 0\n                                   \n                    If COMP_LEVEL Then\n                        swComp.SetMaterialPropertyValues2 dMatPrps, IIf(ALL_CONFIGS, swInConfigurationOpts_e.swAllConfiguration, swInConfigurationOpts_e.swThisConfiguration), Empty\n                    Else\n                        Dim sConfs(0)  As String\n                        sConfs(0) = swComp.ReferencedConfiguration\n                        swRefModel.Extension.SetMaterialPropertyValues dMatPrps, IIf(ALL_CONFIGS, swInConfigurationOpts_e.swAllConfiguration, swInConfigurationOpts_e.swSpecifyConfiguration), IIf(ALL_CONFIGS, Empty, sConfs)\n                    End If\n                \n                End If\n                \n            End If\n            \n        End If\n                \n    Next\n    \nEnd Sub\n\nFunction GetModelPropertyValue(model As SldWorks.ModelDoc2, confName As String, prpName As String) As String\n    \n    Dim prpVal As String\n    Dim swCustPrpMgr As SldWorks.CustomPropertyManager\n    \n    Set swCustPrpMgr = model.Extension.CustomPropertyManager(confName)\n    prpVal = GetPropertyValue(swCustPrpMgr, prpName)\n    \n    If prpVal = "" Then\n        Set swCustPrpMgr = model.Extension.CustomPropertyManager("")\n        prpVal = GetPropertyValue(swCustPrpMgr, prpName)\n    End If\n    \n    GetModelPropertyValue = prpVal\n    \nEnd Function\n\nFunction GetPropertyValue(custPrpMgr As SldWorks.CustomPropertyManager, prpName As String) As String\n    Dim resVal As String\n    custPrpMgr.Get2 prpName, "", resVal\n    GetPropertyValue = resVal\nEnd Function\n\nFunction Contains(arr() As String, item As String) As Boolean\n    \n    If (Not arr) <> -1 Then\n    \n        Dim i As Integer\n        \n        For i = 0 To UBound(arr)\n            If arr(i) = item Then\n                Contains = True\n                Exit Function\n            End If\n        Next\n    \n    End If\n    \n    Contains = False\n    \nEnd Function\n')))}m.isMDXComponent=!0}}]);