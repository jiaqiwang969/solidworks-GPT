"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[78037],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>p});var s=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,s)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,s,r=function(n,e){if(null==n)return{};var t,s,r={},o=Object.keys(n);for(s=0;s<o.length;s++)t=o[s],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(s=0;s<o.length;s++)t=o[s],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var d=s.createContext({}),l=function(n){var e=s.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},c=function(n){var e=l(n.components);return s.createElement(d.Provider,{value:e},n.children)},w="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return s.createElement(s.Fragment,{},e)}},u=s.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,d=n.parentName,c=a(n,["components","mdxType","originalType","parentName"]),w=l(t),u=r,p=w["".concat(d,".").concat(u)]||w[u]||m[u]||o;return t?s.createElement(p,i(i({ref:e},c),{},{components:t})):s.createElement(p,i({ref:e},c))}));function p(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,i=new Array(o);i[0]=u;var a={};for(var d in e)hasOwnProperty.call(e,d)&&(a[d]=e[d]);a.originalType=n,a[w]="string"==typeof n?n:r,i[1]=a;for(var l=2;l<o;l++)i[l]=t[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}u.displayName="MDXCreateElement"},71400:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(87462),r=(t(67294),t(3905));const o={},i="\u6dfb\u52a0\u5b54\u4f4d\u6807\u6ce8",a={unversionedId:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/add-ordinate-dimensions/index",id:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/add-ordinate-dimensions/index",title:"\u6dfb\u52a0\u5b54\u4f4d\u6807\u6ce8",description:"\u7528\u4e8e\u5728SOLIDWORKS\u56fe\u7eb8\u89c6\u56fe\u4e2d\u4e3a\u5b54\u6dfb\u52a0\u6c34\u5e73\u548c\u5782\u76f4\u5b54\u4f4d\u6807\u6ce8\u7684\u5b8f",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/add-ordinate-dimensions/index.md",sourceDirName:"codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/add-ordinate-dimensions",slug:"/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/add-ordinate-dimensions/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/add-ordinate-dimensions/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/add-ordinate-dimensions/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u5728\u5750\u6807\u7cfb\u4e4b\u95f4\u6dfb\u52a0\u7ea6\u675f",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/add-mate-between-coordinate-systems/"},next:{title:"\u4f7f\u7528SOLIDWORKS API\u6dfb\u52a0\u548c\u8bfb\u53d6\u5e26\u53c2\u6570\u7684\u7ec4\u4ef6\u5c5e\u6027",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/troubleshooting/macros/windows-api-functions-incorrect-use/add-parameters-components/"}},d={},l=[],c={toc:l},w="wrapper";function m(n){let{components:e,...o}=n;return(0,r.kt)(w,(0,s.Z)({},c,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u6dfb\u52a0\u5b54\u4f4d\u6807\u6ce8"},"\u6dfb\u52a0\u5b54\u4f4d\u6807\u6ce8"),(0,r.kt)("p",null,"\u7528\u4e8e\u5728SOLIDWORKS\u56fe\u7eb8\u89c6\u56fe\u4e2d\u4e3a\u5b54\u6dfb\u52a0\u6c34\u5e73\u548c\u5782\u76f4\u5b54\u4f4d\u6807\u6ce8\u7684\u5b8f"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"\u56fe\u7eb8\u89c6\u56fe\u4e2d\u7684\u5b54\u4f4d\u6807\u6ce8",src:t(98132).Z,width:"690",height:"554"})),(0,r.kt)("p",null,"\u8fd9\u4e2aSOLIDWORKS VBA\u5b8f\u53ef\u4ee5\u81ea\u52a8\u4e3a\u6240\u9009\u56fe\u7eb8\u89c6\u56fe\u4e2d\u7684\u6240\u6709\u5b54\u6dfb\u52a0\u6c34\u5e73\u5b54\u4f4d\u6807\u6ce8\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5b8f\u5c06\u901a\u8fc7\u67e5\u627e\u89c6\u56fe\u4e2d\u7684\u5de6\u4e0b\u9876\u70b9\u6765\u786e\u5b9a\u5b54\u4f4d\u6807\u6ce8\u7684\u539f\u70b9"),(0,r.kt)("li",{parentName:"ul"},"\u5b8f\u5c06\u67e5\u627e\u89c6\u56fe\u4e2d\u7684\u6240\u6709\u5b54\uff08\u4ec5\u5305\u62ec\u5185\u90e8\u5b54\uff0c\u4e0d\u8003\u8651\u5012\u89d2\uff09"),(0,r.kt)("li",{parentName:"ul"},"\u5b8f\u5c06\u4e3a\u5b54\u6dfb\u52a0\u6c34\u5e73\u548c\u5782\u76f4\u6807\u6ce8"),(0,r.kt)("li",{parentName:"ul"},"\u6807\u6ce8\u5c06\u76f8\u5bf9\u4e8e\u56fe\u7eb8\u89c6\u56fe\u8fdb\u884c\u5b9a\u4f4d")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vb"},'Dim swApp As SldWorks.SldWorks\nDim swMathUtils As SldWorks.MathUtility\n\nSub main()\n\n    Set swApp = Application.SldWorks\n        \n    Set swMathUtils = swApp.GetMathUtility\n        \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    Dim swView As SldWorks.view\n\n    Set swView = swModel.SelectionManager.GetSelectedObject6(1, -1)\n    \n    If swView Is Nothing Then\n        Err.Raise vbError, "", "\u8bf7\u9009\u62e9\u89c6\u56fe"\n    End If\n    \n    Dim swOrigVertex As SldWorks.vertex\n    Set swOrigVertex = FindOriginVertex(swView)\n    \n    Dim vHoles As Variant\n    vHoles = FindHoles(swView)\n    \n    If IsEmpty(vHoles) Then\n        Err.Raise vbError, "", "\u672a\u627e\u5230\u5b54"\n    End If\n    \n    Dim vOutline As Variant\n    vOutline = swView.GetOutline\n    \n    Dim offset As Double\n    offset = (vOutline(2) - vOutline(1)) * 0.1\n    \n    AddOrdinateDimensions swModel, swOrigVertex, vHoles, swAddOrdinateDims_e.swHorizontalOrdinate, 0, vOutline(1) - offset\n    AddOrdinateDimensions swModel, swOrigVertex, vHoles, swAddOrdinateDims_e.swVerticalOrdinate, vOutline(0) - offset, 0\n\nEnd Sub\n\nSub AddOrdinateDimensions(model As SldWorks.ModelDoc2, origVertex As SldWorks.vertex, holes As Variant, dimType As swAddOrdinateDims_e, x As Double, y As Double)\n    \n    Dim swSels() As SldWorks.Entity\n    ReDim swSels(1 + UBound(holes))\n    \n    Set swSels(0) = origVertex\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(holes)\n        Set swSels(i + 1) = holes(i)\n    Next\n    \n    If model.Extension.MultiSelect2(swSels, False, Nothing) = UBound(swSels) + 1 Then\n        Dim res As Long\n        res = model.Extension.AddOrdinateDimension(dimType, x, y, 0)\n        \n        model.SetPickMode\n        \n        If res <> swCreateOrdDimError_e.swCreateOrdDimErr_Success Then\n            Err.Raise vbError, "", "\u6dfb\u52a0\u5b54\u4f4d\u6807\u6ce8\u5931\u8d25"\n        End If\n    Else\n        Err.Raise vbError, "", "\u9009\u62e9\u5b9e\u4f53\u5931\u8d25"\n    End If\n    \nEnd Sub\n\n\nFunction FindOriginVertex(view As SldWorks.view) As SldWorks.vertex\n    \n    Dim vComps As Variant\n    \n    vComps = view.GetVisibleComponents\n    \n    Dim swViewTransform As SldWorks.MathTransform\n    Set swViewTransform = view.ModelToViewTransform\n    \n    Dim swOriginVertex As SldWorks.vertex\n    \n    If Not IsEmpty(vComps) Then\n    \n        Dim i As Integer\n        \n        For i = 0 To UBound(vComps)\n        \n            Dim swComp As SldWorks.Component2\n                \n            Set swComp = vComps(i)\n            \n            Dim vVisEnts As Variant\n            vVisEnts = view.GetVisibleEntities2(swComp, swViewEntityType_e.swViewEntityType_Vertex)\n            \n            Dim j As Integer\n            \n            For j = 0 To UBound(vVisEnts)\n                Dim swVertex As SldWorks.vertex\n                Set swVertex = vVisEnts(j)\n                                \n                If swOriginVertex Is Nothing Then\n                    Set swOriginVertex = swVertex\n                Else\n                    Dim vCurOrigCoord As Variant\n                    vCurOrigCoord = GetVertexCoordinate(swOriginVertex, swViewTransform)\n                    \n                    Dim vCoord As Variant\n                    vCoord = GetVertexCoordinate(swVertex, swViewTransform)\n\n                    If vCoord(0) < vCurOrigCoord(0) And vCoord(1) < vCurOrigCoord(1) Then\n                        Set swOriginVertex = swVertex\n                    End If\n                    \n                End If\n                \n            Next\n            \n        Next\n        \n    End If\n    \n    If swOriginVertex Is Nothing Then\n        Err.Raise vbError, "", "\u672a\u627e\u5230\u539f\u70b9\u9876\u70b9"\n    End If\n    \n    Set FindOriginVertex = swOriginVertex\n    \nEnd Function\n\nFunction GetVertexCoordinate(vertex As SldWorks.vertex, transform As SldWorks.MathTransform) As Variant\n        \n    Dim vCoordPt As Variant\n    vCoordPt = vertex.GetPoint()\n    \n    Dim swMathPt As SldWorks.MathPoint\n    Set swMathPt = swMathUtils.CreatePoint(vCoordPt)\n    \n    Set swMathPt = swMathPt.MultiplyTransform(transform)\n    \n    GetVertexCoordinate = swMathPt.ArrayData\n    \nEnd Function\n\nFunction FindHoles(view As SldWorks.view) As Variant\n    \n    Dim vComps As Variant\n    \n    vComps = view.GetVisibleComponents\n       \n    Dim swHoles() As SldWorks.Edge\n    \n    If Not IsEmpty(vComps) Then\n    \n        Dim i As Integer\n        \n        For i = 0 To UBound(vComps)\n        \n            Dim swComp As SldWorks.Component2\n                \n            Set swComp = vComps(i)\n            \n            Dim vVisEnts As Variant\n            vVisEnts = view.GetVisibleEntities2(swComp, swViewEntityType_e.swViewEntityType_Edge)\n            \n            Dim j As Integer\n            \n            For j = 0 To UBound(vVisEnts)\n                \n                Dim swEdge As SldWorks.Edge\n                Set swEdge = vVisEnts(j)\n                \n                Dim swCurve As SldWorks.Curve\n                Set swCurve = swEdge.GetCurve\n                \n                If False <> swCurve.IsCircle() Then\n                    \n                    Dim isClosed As Boolean\n                    swCurve.GetEndParams -1, -1, isClosed, -1\n                    \n                    If False <> isClosed Then\n                    \n                        If (Not swHoles) = -1 Then\n                            ReDim swHoles(0)\n                        Else\n                            ReDim Preserve swHoles(UBound(swHoles) + 1)\n                        End If\n                        \n                        Set swHoles(UBound(swHoles)) = swEdge\n        \n                    End If\n                    \n                End If\n                \n            Next\n            \n        Next\n        \n    End If\n    \n    If (Not swHoles) = -1 Then\n        FindHoles = Empty\n    Else\n        FindHoles = swHoles\n    End If\n\nEnd Function\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/LorinBeer/solidworks-api/blob/master/Examples/OrdinateDimensions.md"},"\u539f\u59cb\u94fe\u63a5")))}m.isMDXComponent=!0},98132:(n,e,t)=>{t.d(e,{Z:()=>s});const s=t.p+"assets/images/ordinate-dimensions-c4062817d08ec4fc19d47fea853211f3.png"}}]);