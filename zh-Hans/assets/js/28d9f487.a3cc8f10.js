"use strict";(self.webpackChunksolidworks_gpt=self.webpackChunksolidworks_gpt||[]).push([[32330],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>p});var t=r(67294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function u(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var i=t.createContext({}),l=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=l(e.components);return t.createElement(i.Provider,{value:n},e.children)},v="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),v=l(r),m=s,p=v["".concat(i,".").concat(m)]||v[m]||d[m]||o;return r?t.createElement(p,a(a({ref:n},c),{},{components:r})):t.createElement(p,a({ref:n},c))}));function p(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=r.length,a=new Array(o);a[0]=m;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u[v]="string"==typeof e?e:s,a[1]=u;for(var l=2;l<o;l++)a[l]=r[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},72114:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var t=r(87462),s=(r(67294),r(3905));const o={title:"\u4f7f\u7528SOLIDWORKS API\u521b\u5efa\u9762\u7684ISO\u66f2\u7ebf\u7684\u5b8f",caption:"\u521b\u5efa\u9762\u7684ISO\u66f2\u7ebf"},a=void 0,u={unversionedId:"codestack/solidworks-api/geometry/face-iso-curves/index",id:"codestack/solidworks-api/geometry/face-iso-curves/index",title:"\u4f7f\u7528SOLIDWORKS API\u521b\u5efa\u9762\u7684ISO\u66f2\u7ebf\u7684\u5b8f",description:"\u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u5728\u6240\u9009\u9762\u7684u\u548cv\u8fb9\u754c\u4e2d\u627e\u5230\u6307\u5b9a\u6570\u91cf\u7684ISO\u66f2\u7ebf\u3002",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/codestack/solidworks-api/geometry/face-iso-curves/index.md",sourceDirName:"codestack/solidworks-api/geometry/face-iso-curves",slug:"/codestack/solidworks-api/geometry/face-iso-curves/",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/geometry/face-iso-curves/",draft:!1,editUrl:"https://github.com/jiaqiwang969/solidworks-GPT/edit/main/website/docs/codestack/solidworks-api/geometry/face-iso-curves/index.md",tags:[],version:"current",frontMatter:{title:"\u4f7f\u7528SOLIDWORKS API\u521b\u5efa\u9762\u7684ISO\u66f2\u7ebf\u7684\u5b8f",caption:"\u521b\u5efa\u9762\u7684ISO\u66f2\u7ebf"},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528SOLIDWORKS API\u786e\u5b9a\u6240\u9009\u9762\u662f\u5b54\u8fd8\u662f\u51f8\u53f0",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/geometry/determine-hole-boss/"},next:{title:"index",permalink:"/solidworks-GPT/zh-Hans/docs/codestack/solidworks-api/geometry/fill-hole/"}},i={},l=[{value:"labels: curve, evaluate, geometry, macro, iso, uv, trimmed curve, vba",id:"labels-curve-evaluate-geometry-macro-iso-uv-trimmed-curve-vba",level:2}],c={toc:l},v="wrapper";function d(e){let{components:n,...o}=e;return(0,s.kt)(v,(0,t.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"\u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u5728\u6240\u9009\u9762\u7684u\u548cv\u8fb9\u754c\u4e2d\u627e\u5230\u6307\u5b9a\u6570\u91cf\u7684ISO\u66f2\u7ebf\u3002\nimage: iso-curves-wire-body.png"),(0,s.kt)("h2",{id:"labels-curve-evaluate-geometry-macro-iso-uv-trimmed-curve-vba"},"labels: ","[curve, evaluate, geometry, macro, iso, uv, trimmed curve, vba]"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"\u9762\u7684ISO\u66f2\u7ebf\u9884\u89c8",src:r(6401).Z,width:"482",height:"461"}),"{ width=300 }"),(0,s.kt)("p",null,"\u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528SOLIDWORKS API\u5728\u6240\u9009\u9762\u7684u\u548cv\u8fb9\u754c\u4e2d\u627e\u5230\u6307\u5b9a\u6570\u91cf\u7684ISO\u66f2\u7ebf\u3002"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u9009\u62e9\u9762\u5e76\u8fd0\u884c\u5b8f"),(0,s.kt)("li",{parentName:"ul"},"ISO\u66f2\u7ebf\u5c06\u88ab\u9884\u89c8\uff0c\u5b8f\u6267\u884c\u505c\u6b62"),(0,s.kt)("li",{parentName:"ul"},"\u7ee7\u7eed\u6267\u884c\u5b8f\u4ee5\u6e05\u9664\u9884\u89c8")),(0,s.kt)("p",null,"\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e2d\u66f4\u6539u\u548cv\u65b9\u5411\u4e0a\u7684ISO\u66f2\u7ebf\u6570\u91cf\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb"},"Dim vCurves As Variant\nvCurves = GetIsoCurves(swFace, <u\u65b9\u5411\u4e0a\u7684\u66f2\u7ebf\u6570\u91cf>, <v\u65b9\u5411\u4e0a\u7684\u66f2\u7ebf\u6570\u91cf>)\n")),(0,s.kt)("p",null,"\u8be5\u5b8f\u8fd8\u53ef\u9009\u62e9\u57283D\u8349\u56fe\u4e2d\u521b\u5efa\u66f2\u7ebf\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"\u4e3a\u9762\u7684ISO\u66f2\u7ebf\u521b\u5efa\u7684\u8349\u56fe",src:r(6249).Z,width:"469",height:"429"}),"{ width=300 }"),(0,s.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7\u5728\u5b8f\u7684\u5f00\u5934\u5c06",(0,s.kt)("em",{parentName:"p"},"CREATE_SKETCH"),"\u5e38\u91cf\u8bbe\u7f6e\u4e3a",(0,s.kt)("em",{parentName:"p"},"True"),"\u6765\u542f\u7528\u6b64\u9009\u9879\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb"},"Const CREATE_SKETCH As Boolean = True\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u5b8f\uff1a")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb"},'Const CREATE_SKETCH As Boolean = False\n\nDim swApp As SldWorks.SldWorks\n\nSub main()\n\n    Set swApp = Application.SldWorks\n    \n    Dim swModel As SldWorks.ModelDoc2\n    \n    Set swModel = swApp.ActiveDoc\n    \n    If Not swModel Is Nothing Then\n    \n        Dim swSelMgr As SldWorks.SelectionMgr\n        \n        Set swSelMgr = swModel.SelectionManager\n        \n        Dim swFace As SldWorks.Face2\n        Set swFace = swSelMgr.GetSelectedObject6(1, -1)\n        \n        If Not swFace Is Nothing Then\n            \n            Dim vCurves As Variant\n            vCurves = GetIsoCurves(swFace, 10, 10)\n            \n            If True = CREATE_SKETCH Then\n                DrawCurves swModel, vCurves, 0.001, 0.001\n            Else\n                PreviewCurves swModel, vCurves\n            End If\n            \n        Else\n            MsgBox "\u8bf7\u9009\u62e9\u9762"\n        End If\n    \n    Else\n        MsgBox "\u8bf7\u6253\u5f00\u6a21\u578b"\n    End If\n    \nEnd Sub\n\nFunction GetIsoCurves(face As SldWorks.Face2, uCount As Integer, vCount As Integer) As Variant\n    \n    Dim swCurves() As SldWorks.curve\n    ReDim swCurves(uCount + vCount - 1)\n    \n    Dim uCurves As Variant\n    Dim vCurves As Variant\n    \n    uCurves = SplitFaceOnIsoCurves(face, True, uCount)\n    vCurves = SplitFaceOnIsoCurves(face, False, vCount)\n    \n    Dim i As Integer\n    \n    For i = 0 To UBound(uCurves)\n        Set swCurves(i) = uCurves(i)\n    Next\n    \n    For i = 0 To UBound(vCurves)\n        Set swCurves(UBound(uCurves) + 1 + i) = vCurves(i)\n    Next\n    \n    GetIsoCurves = swCurves\n    \nEnd Function\n\nFunction SplitFaceOnIsoCurves(face As SldWorks.Face2, UorV As Boolean, count As Integer) As Variant\n\n    Dim swCurves() As SldWorks.curve\n    ReDim swCurves(count - 1)\n    \n    Dim swSurf As SldWorks.Surface\n    Set swSurf = face.GetSurface\n    \n    Dim thisParamMin As Double\n    Dim thisParamMax As Double\n    Dim otherParamMin As Double\n    Dim otherParamMax As Double\n    \n    Dim vUvBounds As Variant\n    vUvBounds = face.GetUVBounds\n    \n    If True = UorV Then\n        thisParamMin = vUvBounds(0)\n        thisParamMax = vUvBounds(1)\n        otherParamMin = vUvBounds(2)\n        otherParamMax = vUvBounds(3)\n    Else\n        thisParamMin = vUvBounds(2)\n        thisParamMax = vUvBounds(3)\n        otherParamMin = vUvBounds(0)\n        otherParamMax = vUvBounds(1)\n    End If\n    \n    Dim i As Integer\n    \n    Dim paramStep As Double\n    paramStep = (thisParamMax - thisParamMin) / (count - 1)\n    \n    For i = 0 To count - 1\n        \n        Dim param As Double\n        param = thisParamMin + i * paramStep\n        \n        Dim swCurve As SldWorks.curve\n        Set swCurve = swSurf.MakeIsoCurve2(Not UorV, param)\n        \n        Dim u As Double\n        Dim v As Double\n        \n        Dim vStartPt As Variant\n        Dim vEndPt As Variant\n        \n        If True = UorV Then\n            u = param\n            v = otherParamMin\n        Else\n            v = param\n            u = otherParamMin\n        End If\n        \n        vStartPt = swSurf.Evaluate(u, v, 0, 0)\n        \n        If True = UorV Then\n            u = param\n            v = otherParamMax\n        Else\n            v = param\n            u = otherParamMax\n        End If\n        \n        vEndPt = swSurf.Evaluate(u, v, 0, 0)\n        \n        Set swCurve = swCurve.CreateTrimmedCurve2(vStartPt(0), vStartPt(1), vStartPt(2), vEndPt(0), vEndPt(1), vEndPt(2))\n        Set swCurves(i) = swCurve\n    Next\n    \n    SplitFaceOnIsoCurves = swCurves\n    \nEnd Function\n\nSub PreviewCurves(model As SldWorks.ModelDoc2, curves As Variant)\n    \n    Dim swModeler As SldWorks.Modeler\n    Set swModeler = swApp.GetModeler\n    \n    Dim swCurvesBody() As SldWorks.Body2\n    \n    ReDim swCurvesBody(UBound(curves))\n    \n    Dim i As Integer\n        \n    For i = 0 To UBound(curves)\n        Dim swCurve As SldWorks.curve\n        Set swCurve = curves(i).MakeBsplineCurve2()\n        Set swCurvesBody(i) = swCurve.CreateWireBody\n        swCurvesBody(i).Display3 model, RGB(255, 255, 0), swTempBodySelectOptions_e.swTempBodySelectOptionNone\n    Next\n    \n    Stop\n    \n    \'\u6e05\u9664\u9884\u89c8\n    For i = 0 To UBound(swCurvesBody)\n        Set swCurvesBody(i) = Nothing\n    Next\n        \n    model.GraphicsRedraw2\n    \nEnd Sub\n\nSub DrawCurves(model As SldWorks.ModelDoc2, curves As Variant, chordTol As Double, lengthTol As Double)\n    \n    Dim swSketchMgr As SldWorks.SketchManager\n    Set swSketchMgr = model.SketchManager\n    \n    model.ClearSelection2 True\n    swSketchMgr.Insert3DSketch False\n    model.SetAddToDB True\n        \n    For i = 0 To UBound(curves)\n        Dim swCurve As SldWorks.curve\n        Set swCurve = curves(i)\n        DrawCurve swCurve, model, chordTol, lengthTol\n    Next\n    \n    model.SetAddToDB False\n    swSketchMgr.Insert3DSketch True\n        \nEnd Sub\n\nSub DrawCurve(curve As SldWorks.curve, model As SldWorks.ModelDoc2, chordTol As Double, lengthTol As Double)\n\n    Dim vStartPt As Variant\n    Dim vEndPt As Variant\n    Dim vTessPts As Variant\n    \n    Dim startParam As Double\n    Dim endParam As Double\n    \n    curve.GetEndParams startParam, endParam, False, False\n    \n    vStartPt = curve.Evaluate2(startParam, 0)\n    vEndPt = curve.Evaluate2(endParam, 0)\n\n    vTessPts = curve.GetTessPts(chordTol, lengthTol, (vStartPt), (vEndPt))\n\n    For i = 0 To UBound(vTessPts) - 3 Step 3\n        model.CreateLine2 vTessPts(i + 0), vTessPts(i + 1), vTessPts(i + 2), vTessPts(i + 3), vTessPts(i + 4), vTessPts(i + 5)\n    Next i\n\nEnd Sub\n')))}d.isMDXComponent=!0},6249:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/iso-curves-sketch-b7e079ea9f47a9e950b8abaf0e88b522.png"},6401:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/iso-curves-wire-body-e38c652a5f2f858c95a5ca3f2a8a2d63.png"}}]);